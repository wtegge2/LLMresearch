[
    {
        "task_id": 0,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,long param_2,int param_3)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  do {\n    local_c = local_10;\n    if (param_3 <= local_10) {\n      return 0;\n    }\n    while (local_c = local_c + 1, local_c < param_3) {\n      if ((float)(DAT_001020d0 &\n                 (uint)(*(float *)(param_2 + (long)local_10 * 4) -\n                       *(float *)(param_2 + (long)local_c * 4))) < param_1) {\n        return 1;\n      }\n    }\n    local_10 = local_10 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 0,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,long param_2,int param_3)\n\n{\n  long lVar1;\n  long lVar2;\n  \n  if (param_3 < 1) {\n    return 0;\n  }\n  lVar2 = 1;\n  do {\n    if (lVar2 == (ulong)(param_3 - 1) + 1) {\n      return 0;\n    }\n    lVar1 = lVar2;\n    do {\n      if ((float)((uint)(*(float *)(param_2 + -4 + lVar2 * 4) - *(float *)(param_2 + lVar1 * 4)) &\n                 DAT_001020c0) < param_1) {\n        return 1;\n      }\n      lVar1 = lVar1 + 1;\n    } while ((int)lVar1 < param_3);\n    lVar2 = lVar2 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 0,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,long param_2,int param_3)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_3) {\n    lVar3 = 1;\n    lVar2 = (ulong)(param_3 - 1) + 1;\n    if (lVar2 != 1) {\n      do {\n        lVar1 = lVar3;\n        do {\n          if ((float)((uint)(*(float *)(param_2 + -4 + lVar3 * 4) - *(float *)(param_2 + lVar1 * 4))\n                     & DAT_001020b0) < param_1) {\n            return 1;\n          }\n          lVar1 = lVar1 + 1;\n        } while ((int)lVar1 < param_3);\n        lVar3 = lVar3 + 1;\n      } while (lVar3 != lVar2);\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 0,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,long param_2,int param_3)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_3) {\n    lVar3 = 1;\n    lVar2 = (ulong)(param_3 - 1) + 1;\n    if (lVar2 != 1) {\n      do {\n        lVar1 = lVar3;\n        do {\n          if ((float)((uint)(*(float *)(param_2 + -4 + lVar3 * 4) - *(float *)(param_2 + lVar1 * 4))\n                     & DAT_001020b0) < param_1) {\n            return 1;\n          }\n          lVar1 = lVar1 + 1;\n        } while ((int)lVar1 < param_3);\n        lVar3 = lVar3 + 1;\n      } while (lVar2 != lVar3);\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 1,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *__s;\n  char *pcVar3;\n  int local_3c;\n  int local_38;\n  int local_34;\n  int local_30;\n  void *local_28;\n  \n  sVar2 = strlen(param_1);\n  local_3c = 0;\n  local_38 = 10;\n  local_28 = malloc(0x50);\n  __s = (char *)malloc((long)((int)sVar2 + 1));\n  local_34 = 0;\n  *param_2 = 0;\n  for (local_30 = 0; local_30 < (int)sVar2; local_30 = local_30 + 1) {\n    if (param_1[local_30] == '(') {\n      local_3c = local_3c + 1;\n      __s[local_34] = '(';\n      local_34 = local_34 + 1;\n    }\n    else if (param_1[local_30] == ')') {\n      local_3c = local_3c + -1;\n      iVar1 = local_34 + 1;\n      __s[local_34] = ')';\n      local_34 = iVar1;\n      if (local_3c == 0) {\n        __s[iVar1] = '\\0';\n        iVar1 = *param_2;\n        pcVar3 = strdup(__s);\n        *(char **)((long)iVar1 * 8 + (long)local_28) = pcVar3;\n        *param_2 = *param_2 + 1;\n        if (local_38 <= *param_2) {\n          local_38 = local_38 << 1;\n          local_28 = realloc(local_28,(long)local_38 * 8);\n        }\n        local_34 = 0;\n      }\n    }\n  }\n  free(__s);\n  return local_28;\n}"
    },
    {
        "task_id": 1,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char *pcVar1;\n  char cVar2;\n  uint uVar3;\n  void *__ptr;\n  char *pcVar4;\n  char *pcVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int local_44;\n  \n  lVar6 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar6 == 0) break;\n    lVar6 = lVar6 + -1;\n    cVar2 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar2 != '\\0');\n  uVar3 = ~(uint)lVar6;\n  __ptr = malloc(0x50);\n  pcVar4 = (char *)malloc((long)(int)uVar3);\n  *param_2 = 0;\n  if (0 < (int)(uVar3 - 1)) {\n    pcVar1 = param_1 + (ulong)(uVar3 - 2) + 1;\n    local_44 = 10;\n    iVar9 = 0;\n    iVar8 = 0;\n    do {\n      if (*param_1 == '(') {\n        iVar9 = iVar9 + 1;\n        pcVar4[iVar8] = '(';\n        iVar7 = iVar8 + 1;\n      }\n      else {\n        iVar7 = iVar8;\n        if (*param_1 == ')') {\n          iVar7 = iVar8 + 1;\n          pcVar4[iVar8] = ')';\n          iVar9 = iVar9 + -1;\n          if (iVar9 == 0) {\n            pcVar4[iVar7] = '\\0';\n            iVar8 = *param_2;\n            pcVar5 = strdup(pcVar4);\n            *(char **)((long)__ptr + (long)iVar8 * 8) = pcVar5;\n            iVar8 = *param_2;\n            *param_2 = iVar8 + 1;\n            iVar7 = 0;\n            if (local_44 <= iVar8 + 1) {\n              local_44 = local_44 << 1;\n              __ptr = realloc(__ptr,(long)local_44 << 3);\n            }\n          }\n        }\n      }\n      param_1 = param_1 + 1;\n      iVar8 = iVar7;\n    } while (param_1 != pcVar1);\n  }\n  free(pcVar4);\n  return __ptr;\n}"
    },
    {
        "task_id": 1,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char *pcVar1;\n  int iVar2;\n  size_t sVar3;\n  void *__ptr;\n  char *__s;\n  long lVar4;\n  char *pcVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  \n  sVar3 = strlen(param_1);\n  __ptr = malloc(0x50);\n  iVar2 = (int)sVar3;\n  __s = (char *)malloc((long)(iVar2 + 1));\n  *param_2 = 0;\n  if (0 < iVar2) {\n    iVar7 = 0;\n    iVar6 = 10;\n    iVar8 = 0;\n    pcVar1 = param_1 + (ulong)(iVar2 - 1) + 1;\n    do {\n      while (*param_1 == '(') {\n        lVar4 = (long)iVar7;\n        param_1 = param_1 + 1;\n        iVar8 = iVar8 + 1;\n        iVar7 = iVar7 + 1;\n        __s[lVar4] = '(';\n        if (param_1 == pcVar1) goto LAB_001015ab;\n      }\n      if (*param_1 == ')') {\n        lVar4 = (long)iVar7;\n        iVar7 = iVar7 + 1;\n        __s[lVar4] = ')';\n        iVar8 = iVar8 + -1;\n        if (iVar8 == 0) {\n          iVar2 = *param_2;\n          __s[iVar7] = '\\0';\n          pcVar5 = strdup(__s);\n          *(char **)((long)__ptr + (long)iVar2 * 8) = pcVar5;\n          iVar2 = *param_2;\n          iVar7 = 0;\n          *param_2 = iVar2 + 1;\n          if (iVar6 <= iVar2 + 1) {\n            iVar6 = iVar6 * 2;\n            __ptr = realloc(__ptr,(long)iVar6 << 3);\n            iVar7 = 0;\n          }\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pcVar1);\n  }\nLAB_001015ab:\n  free(__s);\n  return __ptr;\n}"
    },
    {
        "task_id": 1,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char *pcVar1;\n  int iVar2;\n  size_t sVar3;\n  void *__ptr;\n  char *__s;\n  long lVar4;\n  char *pcVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  \n  sVar3 = strlen(param_1);\n  __ptr = malloc(0x50);\n  iVar2 = (int)sVar3;\n  __s = (char *)malloc((long)(iVar2 + 1));\n  *param_2 = 0;\n  if (0 < iVar2) {\n    iVar7 = 0;\n    iVar6 = 10;\n    iVar8 = 0;\n    pcVar1 = param_1 + (ulong)(iVar2 - 1) + 1;\n    do {\n      while (*param_1 == '(') {\n        lVar4 = (long)iVar7;\n        param_1 = param_1 + 1;\n        iVar8 = iVar8 + 1;\n        iVar7 = iVar7 + 1;\n        __s[lVar4] = '(';\n        if (pcVar1 == param_1) goto LAB_001015fb;\n      }\n      if (*param_1 == ')') {\n        lVar4 = (long)iVar7;\n        iVar7 = iVar7 + 1;\n        __s[lVar4] = ')';\n        iVar8 = iVar8 + -1;\n        if (iVar8 == 0) {\n          iVar2 = *param_2;\n          __s[iVar7] = '\\0';\n          pcVar5 = strdup(__s);\n          *(char **)((long)__ptr + (long)iVar2 * 8) = pcVar5;\n          iVar2 = *param_2;\n          iVar7 = 0;\n          *param_2 = iVar2 + 1;\n          if (iVar6 <= iVar2 + 1) {\n            iVar6 = iVar6 * 2;\n            __ptr = realloc(__ptr,(long)iVar6 << 3);\n            iVar7 = 0;\n          }\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (pcVar1 != param_1);\n  }\nLAB_001015fb:\n  free(__s);\n  return __ptr;\n}"
    },
    {
        "task_id": 2,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1)\n\n{\n  return param_1 - (float)(int)param_1;\n}"
    },
    {
        "task_id": 2,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1)\n\n{\n  return param_1 - (float)(int)param_1;\n}"
    },
    {
        "task_id": 2,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1)\n\n{\n  return param_1 - (float)(int)param_1;\n}"
    },
    {
        "task_id": 2,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1)\n\n{\n  return param_1 - (float)(int)param_1;\n}"
    },
    {
        "task_id": 3,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_c = 0;\n  while( true ) {\n    if (param_2 <= local_c) {\n      return 0;\n    }\n    local_10 = local_10 + *(int *)(param_1 + (long)local_c * 4);\n    if (local_10 < 0) break;\n    local_c = local_c + 1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 3,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar2 = *param_1;\n  if (-1 < iVar2) {\n    param_1 = param_1 + 1;\n    piVar1 = param_1 + (param_2 - 1);\n    do {\n      if (param_1 == piVar1) {\n        return 0;\n      }\n      iVar2 = iVar2 + *param_1;\n      param_1 = param_1 + 1;\n    } while (-1 < iVar2);\n    return 1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 3,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar2 = *param_1;\n  if (-1 < iVar2) {\n    param_1 = param_1 + 1;\n    piVar1 = param_1 + (param_2 - 1);\n    do {\n      if (param_1 == piVar1) {\n        return 0;\n      }\n      iVar2 = iVar2 + *param_1;\n      param_1 = param_1 + 1;\n    } while (-1 < iVar2);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 3,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar2 = *param_1;\n  if (-1 < iVar2) {\n    param_1 = param_1 + 1;\n    piVar1 = param_1 + (param_2 - 1);\n    do {\n      if (param_1 == piVar1) {\n        return 0;\n      }\n      iVar2 = iVar2 + *param_1;\n      param_1 = param_1 + 1;\n    } while (-1 < iVar2);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 4,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(long param_1,int param_2)\n\n{\n  float local_18;\n  float local_14;\n  int local_10;\n  \n  local_18 = 0.0;\n  for (local_10 = 0; local_10 < param_2; local_10 = local_10 + 1) {\n    local_18 = *(float *)(param_1 + (long)local_10 * 4) + local_18;\n  }\n  local_14 = 0.0;\n  for (local_10 = 0; local_10 < param_2; local_10 = local_10 + 1) {\n    local_14 = (float)((uint)(*(float *)(param_1 + (long)local_10 * 4) - local_18 / (float)param_2)\n                      & DAT_001020b0) + local_14;\n  }\n  return local_14 / (float)param_2;\n}"
    },
    {
        "task_id": 4,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  \n  if (0 < param_2) {\n    lVar1 = param_1 + 4 + (ulong)(param_2 - 1) * 4;\n    lVar2 = param_1;\n    do {\n      lVar2 = lVar2 + 4;\n    } while (lVar2 != lVar1);\n    do {\n      param_1 = param_1 + 4;\n    } while (param_1 != lVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 4,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  \n  if (param_2 < 1) {\n    return;\n  }\n  lVar1 = param_1 + 4 + (ulong)(param_2 - 1) * 4;\n  lVar2 = param_1;\n  do {\n    lVar2 = lVar2 + 4;\n  } while (lVar1 != lVar2);\n  do {\n    param_1 = param_1 + 4;\n  } while (lVar1 != param_1);\n  return;\n}"
    },
    {
        "task_id": 4,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float *param_1,uint param_2)\n\n{\n  float *pfVar1;\n  float *pfVar2;\n  float *pfVar3;\n  float fVar4;\n  uint uVar5;\n  float *pfVar6;\n  float fVar7;\n  undefined auVar8 [16];\n  undefined auVar11 [12];\n  undefined auVar9 [16];\n  undefined auVar10 [16];\n  float fVar12;\n  float fVar13;\n  float fVar14;\n  \n  fVar14 = (float)param_2;\n  if ((int)param_2 < 1) {\n    auVar10._4_12_ = SUB1612((undefined  [16])0x0,4);\n    auVar10._0_4_ = 0.0 / fVar14;\n    return auVar10._0_8_;\n  }\n  if (param_2 - 1 < 3) {\n    uVar5 = 0;\n    fVar13 = 0.0;\nLAB_0010121a:\n    fVar7 = 0.0;\n    auVar11 = (undefined  [12])0x0;\n    fVar13 = fVar13 + param_1[(int)uVar5];\n    if ((int)(uVar5 + 1) < (int)param_2) {\n      fVar13 = fVar13 + param_1[(int)(uVar5 + 1)];\n      if ((int)(uVar5 + 2) < (int)param_2) {\n        fVar13 = fVar13 + param_1[(int)(uVar5 + 2)];\n      }\n    }\n    fVar13 = fVar13 / fVar14;\n    if (2 < param_2 - 1) goto LAB_0010124f;\n    uVar5 = 0;\n  }\n  else {\n    fVar13 = 0.0;\n    pfVar6 = param_1;\n    do {\n      fVar7 = *pfVar6;\n      pfVar1 = pfVar6 + 1;\n      pfVar2 = pfVar6 + 2;\n      pfVar3 = pfVar6 + 3;\n      pfVar6 = pfVar6 + 4;\n      fVar13 = fVar13 + fVar7 + *pfVar1 + *pfVar2 + *pfVar3;\n    } while (pfVar6 != param_1 + (ulong)(param_2 >> 2) * 4);\n    uVar5 = param_2 & 0xfffffffc;\n    if (param_2 != uVar5) goto LAB_0010121a;\n    fVar13 = fVar13 / fVar14;\nLAB_0010124f:\n    fVar7 = 0.0;\n    pfVar6 = param_1;\n    do {\n      fVar4 = *pfVar6;\n      pfVar1 = pfVar6 + 1;\n      pfVar2 = pfVar6 + 2;\n      pfVar3 = pfVar6 + 3;\n      pfVar6 = pfVar6 + 4;\n      fVar12 = (float)((uint)(*pfVar3 - fVar13) & _UNK_0010206c);\n      auVar8._4_4_ = fVar12;\n      auVar8._0_4_ = fVar12;\n      auVar8._8_4_ = fVar12;\n      auVar8._12_4_ = fVar12;\n      auVar11 = auVar8._4_12_;\n      fVar7 = fVar12 + (float)((uint)(*pfVar2 - fVar13) & _UNK_00102068) +\n                       fVar7 + (float)((uint)(fVar4 - fVar13) & _DAT_00102060) +\n                       (float)((uint)(*pfVar1 - fVar13) & _UNK_00102064);\n    } while (pfVar6 != param_1 + (ulong)(param_2 >> 2) * 4);\n    uVar5 = param_2 & 0xfffffffc;\n    if ((param_2 & 3) == 0) goto LAB_001012ff;\n  }\n  fVar7 = fVar7 + (float)((uint)(param_1[(int)uVar5] - fVar13) & DAT_00102050);\n  if ((int)(uVar5 + 1) < (int)param_2) {\n    fVar7 = fVar7 + (float)((uint)(param_1[(int)(uVar5 + 1)] - fVar13) & DAT_00102050);\n    if ((int)(uVar5 + 2) < (int)param_2) {\n      fVar7 = fVar7 + (float)((uint)(param_1[(int)(uVar5 + 2)] - fVar13) & DAT_00102050);\n    }\n  }\nLAB_001012ff:\n  auVar9._0_4_ = fVar7 / fVar14;\n  auVar9._4_12_ = auVar11;\n  return auVar9._0_8_;\n}"
    },
    {
        "task_id": 5,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined4 * func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n\n{\n  undefined4 *puVar1;\n  int iVar2;\n  int local_18;\n  int local_14;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    iVar2 = param_2 * 2 + -1;\n  }\n  *param_4 = iVar2;\n  puVar1 = (undefined4 *)malloc((long)*param_4 << 2);\n  if (0 < param_2) {\n    *puVar1 = *param_1;\n  }\n  local_14 = 1;\n  for (local_18 = 1; local_18 < param_2; local_18 = local_18 + 1) {\n    iVar2 = local_14 + 1;\n    puVar1[local_14] = param_3;\n    local_14 = local_14 + 2;\n    puVar1[iVar2] = param_1[local_18];\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 5,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  long lVar3;\n  \n  if (param_2 < 1) {\n    *param_4 = 0;\n    malloc(0);\n  }\n  else {\n    iVar1 = param_2 * 2 + -1;\n    *param_4 = iVar1;\n    puVar2 = (undefined4 *)malloc((long)iVar1 << 2);\n    *puVar2 = *param_1;\n    if (1 < param_2) {\n      lVar3 = 1;\n      do {\n        puVar2[lVar3 * 2 + -1] = param_3;\n        puVar2[lVar3 * 2] = param_1[lVar3];\n        lVar3 = lVar3 + 1;\n      } while ((ulong)(param_2 - 2) + 2 != lVar3);\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 5,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 *puVar3;\n  long lVar4;\n  \n  if (0 < param_2) {\n    iVar1 = param_2 * 2 + -1;\n    *param_4 = iVar1;\n    puVar3 = (undefined4 *)malloc((long)iVar1 << 2);\n    *puVar3 = *param_1;\n    if (param_2 != 1) {\n      lVar4 = 1;\n      do {\n        uVar2 = param_1[lVar4];\n        puVar3[lVar4 * 2 + -1] = param_3;\n        puVar3[lVar4 * 2] = uVar2;\n        lVar4 = lVar4 + 1;\n      } while ((ulong)(param_2 - 2) + 2 != lVar4);\n    }\n    return;\n  }\n  *param_4 = 0;\n  malloc(0);\n  return;\n}"
    },
    {
        "task_id": 5,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n\n{\n  undefined4 *puVar1;\n  undefined8 *puVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 *puVar6;\n  int iVar7;\n  long lVar8;\n  int iVar9;\n  uint uVar10;\n  uint uVar11;\n  \n  if (param_2 < 1) {\n    *param_4 = 0;\n    malloc(0);\n    return;\n  }\n  iVar7 = param_2 * 2 + -1;\n  *param_4 = iVar7;\n  puVar6 = (undefined4 *)malloc((long)iVar7 << 2);\n  *puVar6 = *param_1;\n  if (param_2 != 1) {\n    uVar11 = param_2 - 1;\n    if (param_2 - 2U < 3) {\n      iVar9 = 1;\n      iVar7 = 1;\n    }\n    else {\n      lVar8 = 0;\n      do {\n        puVar1 = (undefined4 *)((long)param_1 + lVar8 + 4);\n        uVar3 = puVar1[1];\n        uVar4 = puVar1[2];\n        uVar5 = puVar1[3];\n        puVar2 = (undefined8 *)((long)puVar6 + lVar8 * 2 + 4);\n        *puVar2 = CONCAT44(*puVar1,param_3);\n        *(undefined4 *)(puVar2 + 2) = param_3;\n        *(undefined4 *)((long)puVar2 + 0x14) = uVar3;\n        puVar1 = (undefined4 *)((long)puVar6 + lVar8 * 2 + 0x14);\n        *puVar1 = param_3;\n        puVar1[1] = uVar4;\n        puVar1[2] = param_3;\n        puVar1[3] = uVar5;\n        lVar8 = lVar8 + 0x10;\n      } while ((ulong)(uVar11 >> 2) << 4 != lVar8);\n      uVar10 = uVar11 & 0xfffffffc;\n      iVar7 = uVar10 + 1;\n      iVar9 = uVar10 * 2 + 1;\n      if (uVar11 == uVar10) {\n        return;\n      }\n    }\n    uVar3 = param_1[iVar7];\n    puVar6[iVar9] = param_3;\n    puVar6[(long)iVar9 + 1] = uVar3;\n    if (iVar7 + 1 < param_2) {\n      uVar3 = param_1[iVar7 + 1];\n      puVar6[iVar9 + 2] = param_3;\n      puVar6[(long)(iVar9 + 2) + 1] = uVar3;\n      if (iVar7 + 2 < param_2) {\n        uVar3 = param_1[iVar7 + 2];\n        puVar6[iVar9 + 4] = param_3;\n        puVar6[(long)(iVar9 + 4) + 1] = uVar3;\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 6,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int *param_2)\n\n{\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_14;\n  void *local_10;\n  \n  local_10 = (void *)0x0;\n  local_20 = 0;\n  local_1c = 0;\n  local_14 = 0;\n  for (local_18 = 0; *(char *)(param_1 + local_18) != '\\0'; local_18 = local_18 + 1) {\n    if (*(char *)(param_1 + local_18) == '(') {\n      local_20 = local_20 + 1;\n      if (local_1c < local_20) {\n        local_1c = local_20;\n      }\n    }\n    else if ((*(char *)(param_1 + local_18) == ')') && (local_20 = local_20 + -1, local_20 == 0)) {\n      local_10 = realloc(local_10,(long)(local_14 + 1) * 4);\n      *(int *)((long)local_14 * 4 + (long)local_10) = local_1c;\n      local_1c = 0;\n      local_14 = local_14 + 1;\n    }\n  }\n  *param_2 = local_14;\n  return local_10;\n}"
    },
    {
        "task_id": 6,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  void *__ptr;\n  char cVar1;\n  char *pcVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar5 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    iVar5 = 0;\n    iVar4 = 0;\n    iVar3 = 0;\n    __ptr = (void *)0x0;\n    pcVar2 = param_1 + 1;\n    do {\n      if (cVar1 == '(') {\n        iVar3 = iVar3 + 1;\n        if (iVar4 < iVar3) {\n          iVar4 = iVar3;\n        }\n      }\n      else if (cVar1 == ')') {\n        iVar3 = iVar3 + -1;\n        if (iVar3 == 0) {\n          iVar5 = iVar5 + 1;\n          __ptr = realloc(__ptr,(long)iVar5 * 4);\n          *(int *)((long)__ptr + ((long)iVar5 * 4 - 4U)) = iVar4;\n          iVar4 = 0;\n        }\n      }\n      cVar1 = *pcVar2;\n      pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n  }\n  *param_2 = iVar5;\n  return __ptr;\n}"
    },
    {
        "task_id": 6,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  void *__ptr;\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar4 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    param_1 = param_1 + 1;\n    iVar4 = 0;\n    iVar3 = 0;\n    iVar2 = 0;\n    __ptr = (void *)0x0;\n    do {\n      while (cVar1 == '(') {\n        iVar2 = iVar2 + 1;\n        if (iVar3 < iVar2) {\n          iVar3 = iVar2;\n        }\n        cVar1 = *param_1;\n        param_1 = param_1 + 1;\n        if (cVar1 == '\\0') goto LAB_001013ca;\n      }\n      if (cVar1 == ')') {\n        iVar2 = iVar2 + -1;\n        if (iVar2 == 0) {\n          iVar4 = iVar4 + 1;\n          __ptr = realloc(__ptr,(long)iVar4 * 4);\n          *(int *)((long)__ptr + ((long)iVar4 * 4 - 4U)) = iVar3;\n          iVar3 = 0;\n        }\n      }\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar1 != '\\0');\n  }\nLAB_001013ca:\n  *param_2 = iVar4;\n  return __ptr;\n}"
    },
    {
        "task_id": 6,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  void *__ptr;\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar4 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    param_1 = param_1 + 1;\n    iVar4 = 0;\n    iVar3 = 0;\n    iVar2 = 0;\n    __ptr = (void *)0x0;\n    do {\n      while (cVar1 == '(') {\n        iVar2 = iVar2 + 1;\n        if (iVar3 < iVar2) {\n          iVar3 = iVar2;\n        }\n        cVar1 = *param_1;\n        param_1 = param_1 + 1;\n        if (cVar1 == '\\0') goto LAB_001013aa;\n      }\n      if (cVar1 == ')') {\n        iVar2 = iVar2 + -1;\n        if (iVar2 == 0) {\n          iVar4 = iVar4 + 1;\n          __ptr = realloc(__ptr,(long)iVar4 * 4);\n          *(int *)((long)__ptr + ((long)iVar4 * 4 - 4U)) = iVar3;\n          iVar3 = 0;\n        }\n      }\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar1 != '\\0');\n  }\nLAB_001013aa:\n  *param_2 = iVar4;\n  return __ptr;\n}"
    },
    {
        "task_id": 7,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,char *param_3,int *param_4)\n\n{\n  char *pcVar1;\n  int local_18;\n  int local_14;\n  void *local_10;\n  \n  local_10 = (void *)0x0;\n  local_18 = 0;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    pcVar1 = strstr(*(char **)(param_1 + (long)local_14 * 8),param_3);\n    if (pcVar1 != (char *)0x0) {\n      local_10 = realloc(local_10,(long)(local_18 + 1) * 8);\n      *(undefined8 *)((long)local_10 + (long)local_18 * 8) =\n           *(undefined8 *)(param_1 + (long)local_14 * 8);\n      local_18 = local_18 + 1;\n    }\n  }\n  *param_4 = local_18;\n  return local_10;\n}"
    },
    {
        "task_id": 7,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char **param_1,int param_2,char *param_3,int *param_4)\n\n{\n  char **ppcVar1;\n  char *__haystack;\n  char *pcVar2;\n  void *__ptr;\n  int iVar3;\n  \n  if (param_2 < 1) {\n    iVar3 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar3 = 0;\n    __ptr = (void *)0x0;\n    do {\n      __haystack = *param_1;\n      pcVar2 = strstr(__haystack,param_3);\n      if (pcVar2 != (char *)0x0) {\n        iVar3 = iVar3 + 1;\n        __ptr = realloc(__ptr,(long)iVar3 * 8);\n        *(char **)((long)__ptr + ((long)iVar3 * 8 - 8U)) = __haystack;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  *param_4 = iVar3;\n  return __ptr;\n}"
    },
    {
        "task_id": 7,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char **param_1,int param_2,char *param_3,int *param_4)\n\n{\n  char **ppcVar1;\n  char *__haystack;\n  char *pcVar2;\n  void *__ptr;\n  int iVar3;\n  \n  if (param_2 < 1) {\n    iVar3 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    iVar3 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    __ptr = (void *)0x0;\n    do {\n      __haystack = *param_1;\n      pcVar2 = strstr(__haystack,param_3);\n      if (pcVar2 != (char *)0x0) {\n        iVar3 = iVar3 + 1;\n        __ptr = realloc(__ptr,(long)iVar3 * 8);\n        *(char **)((long)__ptr + ((long)iVar3 * 8 - 8U)) = __haystack;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  *param_4 = iVar3;\n  return __ptr;\n}"
    },
    {
        "task_id": 7,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(char **param_1,int param_2,char *param_3,int *param_4)\n\n{\n  char **ppcVar1;\n  char *__haystack;\n  char *pcVar2;\n  void *__ptr;\n  int iVar3;\n  \n  if (param_2 < 1) {\n    iVar3 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    iVar3 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    __ptr = (void *)0x0;\n    do {\n      __haystack = *param_1;\n      pcVar2 = strstr(__haystack,param_3);\n      if (pcVar2 != (char *)0x0) {\n        iVar3 = iVar3 + 1;\n        __ptr = realloc(__ptr,(long)iVar3 * 8);\n        *(char **)((long)__ptr + ((long)iVar3 * 8 - 8U)) = __haystack;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  *param_4 = iVar3;\n  return __ptr;\n}"
    },
    {
        "task_id": 8,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,int *param_3)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0;\n  local_10 = 1;\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    local_14 = local_14 + *(int *)(param_1 + (long)local_c * 4);\n    local_10 = *(int *)(param_1 + (long)local_c * 4) * local_10;\n  }\n  *param_3 = local_14;\n  param_3[1] = local_10;\n  return;\n}"
    },
    {
        "task_id": 8,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (param_2 < 1) {\n    iVar2 = 1;\n    iVar3 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar2 = 1;\n    iVar3 = 0;\n    do {\n      iVar3 = iVar3 + *param_1;\n      iVar2 = iVar2 * *param_1;\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  *param_3 = iVar3;\n  param_3[1] = iVar2;\n  return;\n}"
    },
    {
        "task_id": 8,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (0 < param_2) {\n    iVar3 = 1;\n    iVar4 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar2 = *param_1;\n      param_1 = param_1 + 1;\n      iVar3 = iVar3 * iVar2;\n      iVar4 = iVar4 + iVar2;\n    } while (param_1 != piVar1);\n    *param_3 = iVar4;\n    param_3[1] = iVar3;\n    return;\n  }\n  *param_3 = 0;\n  param_3[1] = 1;\n  return;\n}"
    },
    {
        "task_id": 8,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined (*param_1) [16],uint param_2,int *param_3)\n\n{\n  long lVar1;\n  undefined auVar2 [16];\n  undefined (*pauVar3) [16];\n  uint uVar4;\n  long lVar5;\n  uint uVar6;\n  ulong uVar7;\n  ulong uVar8;\n  undefined auVar9 [16];\n  ulong uVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 uVar15;\n  ulong uVar16;\n  undefined4 uVar17;\n  \n  if ((int)param_2 < 1) {\n    *param_3 = 0;\n    param_3[1] = 1;\n    return;\n  }\n  if (param_2 - 1 < 0x17) {\n    uVar4 = 0;\n    uVar7 = 1;\n    iVar11 = 0;\n  }\n  else {\n    iVar11 = 0;\n    iVar12 = 0;\n    iVar13 = 0;\n    iVar14 = 0;\n    pauVar3 = param_1;\n    uVar7 = _DAT_00102010;\n    uVar8 = _UNK_00102018;\n    do {\n      auVar2 = *pauVar3;\n      pauVar3 = pauVar3 + 1;\n      uVar16 = (uVar7 & 0xffffffff) * (ulong)auVar2._0_4_;\n      iVar11 = iVar11 + auVar2._0_4_;\n      iVar12 = iVar12 + auVar2._4_4_;\n      iVar13 = iVar13 + auVar2._8_4_;\n      iVar14 = iVar14 + auVar2._12_4_;\n      uVar10 = (auVar2._0_8_ >> 0x20) * (uVar7 >> 0x20);\n      uVar15 = (undefined4)uVar16;\n      uVar17 = (undefined4)((uVar8 & 0xffffffff) * (ulong)auVar2._8_4_);\n      auVar9._4_4_ = uVar17;\n      auVar9._0_4_ = uVar15;\n      auVar9._8_4_ = uVar17;\n      auVar9._12_4_ = (int)((auVar2._8_8_ >> 0x20) * (uVar8 >> 0x20));\n      uVar8 = auVar9._8_8_;\n      uVar7 = CONCAT44((int)uVar10,uVar15);\n    } while (pauVar3 != param_1 + (param_2 >> 2));\n    uVar4 = param_2 & 0xfffffffc;\n    uVar8 = ((uVar16 & 0xffffffff) * (uVar8 & 0xffffffff) & 0xffffffff) *\n            ((uVar10 & 0xffffffff) * (uVar8 >> 0x20) & 0xffffffff);\n    uVar7 = uVar8 & 0xffffffff;\n    uVar6 = (uint)uVar8;\n    iVar11 = iVar11 + iVar13 + iVar12 + iVar14;\n    if ((param_2 & 3) == 0) goto LAB_00101233;\n  }\n  lVar5 = (long)(int)uVar4;\n  do {\n    lVar1 = lVar5 * 4;\n    lVar5 = lVar5 + 1;\n    uVar6 = (int)uVar7 * *(int *)(*param_1 + lVar1);\n    uVar7 = (ulong)uVar6;\n    iVar11 = iVar11 + *(int *)(*param_1 + lVar1);\n  } while ((int)lVar5 < (int)param_2);\nLAB_00101233:\n  *param_3 = iVar11;\n  param_3[1] = uVar6;\n  return;\n}"
    },
    {
        "task_id": 9,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2)\n\n{\n  void *pvVar1;\n  int local_18;\n  int local_14;\n  \n  if (param_2 < 1) {\n    pvVar1 = (void *)0x0;\n  }\n  else {\n    pvVar1 = malloc((long)param_2 << 2);\n    if (pvVar1 == (void *)0x0) {\n      pvVar1 = (void *)0x0;\n    }\n    else {\n      local_18 = *param_1;\n      for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n        if (local_18 < param_1[local_14]) {\n          local_18 = param_1[local_14];\n        }\n        *(int *)((long)local_14 * 4 + (long)pvVar1) = local_18;\n      }\n    }\n  }\n  return pvVar1;\n}"
    },
    {
        "task_id": 9,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2)\n\n{\n  void *pvVar1;\n  int iVar2;\n  ulong uVar3;\n  bool bVar4;\n  \n  if (0 < param_2) {\n    pvVar1 = malloc((long)param_2 << 2);\n    if (pvVar1 != (void *)0x0) {\n      iVar2 = *param_1;\n      uVar3 = 0;\n      do {\n        if (iVar2 < param_1[uVar3]) {\n          iVar2 = param_1[uVar3];\n        }\n        *(int *)((long)pvVar1 + uVar3 * 4) = iVar2;\n        bVar4 = uVar3 != param_2 - 1;\n        uVar3 = uVar3 + 1;\n      } while (bVar4);\n    }\n    return pvVar1;\n  }\n  return (void *)0x0;\n}"
    },
    {
        "task_id": 9,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2)\n\n{\n  void *pvVar1;\n  int iVar2;\n  long lVar3;\n  int iVar4;\n  \n  if (param_2 < 1) {\n    return (void *)0x0;\n  }\n  pvVar1 = malloc((long)param_2 << 2);\n  if (pvVar1 != (void *)0x0) {\n    iVar2 = *param_1;\n    lVar3 = 0;\n    iVar4 = iVar2;\n    while( true ) {\n      if (iVar2 < iVar4) {\n        iVar2 = iVar4;\n      }\n      *(int *)((long)pvVar1 + lVar3) = iVar2;\n      if (lVar3 == (ulong)(param_2 - 1) << 2) break;\n      iVar4 = *(int *)((long)param_1 + lVar3 + 4);\n      lVar3 = lVar3 + 4;\n    }\n    return pvVar1;\n  }\n  return (void *)0x0;\n}"
    },
    {
        "task_id": 9,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2)\n\n{\n  void *pvVar1;\n  int iVar2;\n  ulong uVar3;\n  bool bVar4;\n  \n  if (param_2 < 1) {\n    return (void *)0x0;\n  }\n  pvVar1 = malloc((long)param_2 << 2);\n  if (pvVar1 != (void *)0x0) {\n    iVar2 = *param_1;\n    uVar3 = 0;\n    do {\n      if (iVar2 < param_1[uVar3]) {\n        iVar2 = param_1[uVar3];\n      }\n      *(int *)((long)pvVar1 + uVar3 * 4) = iVar2;\n      bVar4 = param_2 - 1 != uVar3;\n      uVar3 = uVar3 + 1;\n    } while (bVar4);\n    return pvVar1;\n  }\n  return (void *)0x0;\n}"
    },
    {
        "task_id": 10,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  bool bVar1;\n  int iVar2;\n  size_t sVar3;\n  char *__dest;\n  int local_20;\n  int local_1c;\n  \n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  __dest = (char *)malloc((long)(iVar2 * 2 + 1));\n  if (__dest == (char *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    for (local_20 = 0; local_20 < iVar2; local_20 = local_20 + 1) {\n      bVar1 = true;\n      for (local_1c = 0; local_1c < (iVar2 - local_20) / 2; local_1c = local_1c + 1) {\n        if (param_1[local_1c + local_20] != param_1[(iVar2 + -1) - local_1c]) {\n          bVar1 = false;\n          break;\n        }\n      }\n      if (bVar1) {\n        strncpy(__dest,param_1,(long)iVar2);\n        for (local_1c = 0; local_1c < local_20; local_1c = local_1c + 1) {\n          __dest[local_1c + iVar2] = param_1[(long)(local_20 - local_1c) + -1];\n        }\n        __dest[local_20 + iVar2] = '\\0';\n        return __dest;\n      }\n    }\n    strncpy(__dest,param_1,(long)iVar2);\n    for (local_1c = 0; local_1c < iVar2; local_1c = local_1c + 1) {\n      __dest[local_1c + iVar2] = param_1[(long)(iVar2 - local_1c) + -1];\n    }\n    __dest[iVar2 * 2] = '\\0';\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 10,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  char cVar1;\n  uint uVar2;\n  uint uVar3;\n  char *pcVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  uint uVar8;\n  uint uVar9;\n  size_t __n;\n  \n  lVar5 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  uVar2 = ~(uint)lVar5 - 1;\n  pcVar4 = (char *)malloc((long)(int)(uVar2 * 2 + 1));\n  if (pcVar4 != (char *)0x0) {\n    if ((int)uVar2 < 1) {\n      strncpy(pcVar4,param_1,(long)(int)uVar2);\n    }\n    else {\n      uVar3 = ~(uint)lVar5 - 2;\n      uVar8 = 0;\n      pcVar7 = param_1;\n      do {\n        uVar9 = uVar3;\n        if (uVar8 == uVar3) {\nLAB_001012c8:\n          strncpy(pcVar4,param_1,(long)(int)uVar2);\n          if (0 < (int)uVar9) {\n            pcVar6 = param_1 + (long)(int)uVar9 + -1;\n            pcVar7 = pcVar4 + (int)uVar2;\n            do {\n              *pcVar7 = *pcVar6;\n              pcVar6 = pcVar6 + -1;\n              pcVar7 = pcVar7 + 1;\n            } while (pcVar6 != param_1 + (((long)(int)uVar9 + -2) - (ulong)(uVar9 - 1)));\n          }\n          pcVar4[(int)(uVar9 + uVar2)] = '\\0';\n          return pcVar4;\n        }\n        pcVar6 = param_1 + (long)(int)uVar2 + -1;\n        lVar5 = 0;\n        while (pcVar7[lVar5] == *pcVar6) {\n          lVar5 = lVar5 + 1;\n          pcVar6 = pcVar6 + -1;\n          uVar9 = uVar8;\n          if ((int)(uVar2 - uVar8) / 2 <= (int)lVar5) goto LAB_001012c8;\n        }\n        uVar8 = uVar8 + 1;\n        pcVar7 = pcVar7 + 1;\n      } while (uVar2 != uVar8);\n      __n = (size_t)(int)uVar8;\n      strncpy(pcVar4,param_1,__n);\n      pcVar6 = param_1 + (__n - 1);\n      pcVar7 = pcVar4 + __n;\n      do {\n        *pcVar7 = *pcVar6;\n        pcVar6 = pcVar6 + -1;\n        pcVar7 = pcVar7 + 1;\n      } while (pcVar6 != param_1 + ((__n - 2) - (ulong)uVar3));\n    }\n    pcVar4[(int)(uVar2 * 2)] = '\\0';\n  }\n  return pcVar4;\n}"
    },
    {
        "task_id": 10,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  size_t sVar3;\n  char *__dest;\n  char *pcVar4;\n  int iVar5;\n  char *pcVar6;\n  char *pcVar7;\n  int iVar8;\n  \n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  __dest = (char *)malloc((long)(iVar2 * 2 + 1));\n  if (__dest != (char *)0x0) {\n    sVar3 = (size_t)iVar2;\n    if (iVar2 < 1) {\n      __dest = strncpy(__dest,param_1,sVar3);\nLAB_001014bb:\n      __dest[iVar2 * 2] = '\\0';\n    }\n    else {\n      iVar8 = 0;\n      pcVar4 = param_1;\n      iVar5 = iVar2;\n      while (iVar5 >> 1 != 0) {\n        pcVar7 = pcVar4 + 1;\n        pcVar6 = param_1 + (iVar2 + -1);\n        while (*pcVar4 == *pcVar6) {\n          pcVar4 = pcVar4 + 1;\n          pcVar6 = pcVar6 + -1;\n          if (pcVar4 == pcVar7 + ((iVar5 >> 1) - 1)) goto LAB_00101410;\n        }\n        iVar8 = iVar8 + 1;\n        if (iVar2 == iVar8) {\n          __dest = strncpy(__dest,param_1,sVar3);\n          pcVar4 = param_1 + (sVar3 - 1);\n          pcVar7 = __dest + sVar3;\n          do {\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + -1;\n            *pcVar7 = cVar1;\n            pcVar7 = pcVar7 + 1;\n          } while (param_1 + ((sVar3 - 2) - (ulong)(iVar2 - 1)) != pcVar4);\n          goto LAB_001014bb;\n        }\n        pcVar4 = pcVar7;\n        iVar5 = iVar2 - iVar8;\n      }\nLAB_00101410:\n      __dest = strncpy(__dest,param_1,sVar3);\n      if (iVar8 != 0) {\n        pcVar4 = param_1 + (long)iVar8 + -1;\n        pcVar7 = __dest + sVar3;\n        do {\n          cVar1 = *pcVar4;\n          pcVar4 = pcVar4 + -1;\n          *pcVar7 = cVar1;\n          pcVar7 = pcVar7 + 1;\n        } while (pcVar4 != param_1 + (((long)iVar8 + -2) - (ulong)(iVar8 - 1)));\n      }\n      __dest[iVar8 + iVar2] = '\\0';\n    }\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 10,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  size_t sVar3;\n  char *__dest;\n  char *pcVar4;\n  int iVar5;\n  char *pcVar6;\n  char *pcVar7;\n  int iVar8;\n  \n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  __dest = (char *)malloc((long)(iVar2 * 2 + 1));\n  if (__dest != (char *)0x0) {\n    sVar3 = (size_t)iVar2;\n    if (iVar2 < 1) {\n      __dest = strncpy(__dest,param_1,sVar3);\nLAB_001014bb:\n      __dest[iVar2 * 2] = '\\0';\n    }\n    else {\n      iVar8 = 0;\n      pcVar4 = param_1;\n      iVar5 = iVar2;\n      while (iVar5 >> 1 != 0) {\n        pcVar7 = pcVar4 + 1;\n        pcVar6 = param_1 + (iVar2 + -1);\n        while (*pcVar4 == *pcVar6) {\n          pcVar4 = pcVar4 + 1;\n          pcVar6 = pcVar6 + -1;\n          if (pcVar4 == pcVar7 + ((iVar5 >> 1) - 1)) goto LAB_00101410;\n        }\n        iVar8 = iVar8 + 1;\n        if (iVar2 == iVar8) {\n          __dest = strncpy(__dest,param_1,sVar3);\n          pcVar4 = param_1 + (sVar3 - 1);\n          pcVar7 = __dest + sVar3;\n          do {\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + -1;\n            *pcVar7 = cVar1;\n            pcVar7 = pcVar7 + 1;\n          } while (param_1 + ((sVar3 - 2) - (ulong)(iVar2 - 1)) != pcVar4);\n          goto LAB_001014bb;\n        }\n        pcVar4 = pcVar7;\n        iVar5 = iVar2 - iVar8;\n      }\nLAB_00101410:\n      __dest = strncpy(__dest,param_1,sVar3);\n      if (iVar8 != 0) {\n        pcVar4 = param_1 + (long)iVar8 + -1;\n        pcVar7 = __dest + sVar3;\n        do {\n          cVar1 = *pcVar4;\n          pcVar4 = pcVar4 + -1;\n          *pcVar7 = cVar1;\n          pcVar7 = pcVar7 + 1;\n        } while (pcVar4 != param_1 + (((long)iVar8 + -2) - (ulong)(iVar8 - 1)));\n      }\n      __dest[iVar8 + iVar2] = '\\0';\n    }\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 11,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  size_t sVar3;\n  void *pvVar4;\n  undefined uVar5;\n  int local_20;\n  \n  sVar2 = strlen(param_1);\n  sVar3 = strlen(param_2);\n  iVar1 = (int)sVar2;\n  if ((int)sVar3 <= (int)sVar2) {\n    iVar1 = (int)sVar3;\n  }\n  pvVar4 = malloc((long)(iVar1 + 1));\n  if (pvVar4 == (void *)0x0) {\n    pvVar4 = (void *)0x0;\n  }\n  else {\n    for (local_20 = 0; local_20 < iVar1; local_20 = local_20 + 1) {\n      if (param_1[local_20] == param_2[local_20]) {\n        uVar5 = 0x30;\n      }\n      else {\n        uVar5 = 0x31;\n      }\n      *(undefined *)((long)pvVar4 + (long)local_20) = uVar5;\n    }\n    *(undefined *)((long)pvVar4 + (long)iVar1) = 0;\n  }\n  return pvVar4;\n}"
    },
    {
        "task_id": 11,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  char cVar2;\n  void *pvVar3;\n  long lVar4;\n  ulong uVar5;\n  int iVar6;\n  char *pcVar7;\n  bool bVar8;\n  \n  lVar4 = -1;\n  pcVar7 = param_1;\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    cVar2 = *pcVar7;\n    pcVar7 = pcVar7 + 1;\n  } while (cVar2 != '\\0');\n  iVar1 = ~(uint)lVar4 - 1;\n  lVar4 = -1;\n  pcVar7 = param_2;\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    cVar2 = *pcVar7;\n    pcVar7 = pcVar7 + 1;\n  } while (cVar2 != '\\0');\n  iVar6 = ~(uint)lVar4 - 1;\n  if (iVar1 <= iVar6) {\n    iVar6 = iVar1;\n  }\n  pvVar3 = malloc((long)(iVar6 + 1));\n  if (pvVar3 != (void *)0x0) {\n    if (0 < iVar6) {\n      uVar5 = 0;\n      do {\n        *(char *)((long)pvVar3 + uVar5) = (param_1[uVar5] != param_2[uVar5]) + '0';\n        bVar8 = uVar5 != iVar6 - 1;\n        uVar5 = uVar5 + 1;\n      } while (bVar8);\n    }\n    *(undefined *)((long)pvVar3 + (long)iVar6) = 0;\n  }\n  return;\n}"
    },
    {
        "task_id": 11,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  size_t sVar3;\n  void *pvVar4;\n  ulong uVar5;\n  bool bVar6;\n  \n  sVar2 = strlen(param_1);\n  sVar3 = strlen(param_2);\n  iVar1 = (int)sVar2;\n  if ((int)sVar3 < (int)sVar2) {\n    iVar1 = (int)sVar3;\n  }\n  pvVar4 = malloc((long)(iVar1 + 1));\n  if (pvVar4 != (void *)0x0) {\n    if (0 < iVar1) {\n      uVar5 = 0;\n      do {\n        *(char *)((long)pvVar4 + uVar5) = (param_1[uVar5] != param_2[uVar5]) + '0';\n        bVar6 = uVar5 != iVar1 - 1;\n        uVar5 = uVar5 + 1;\n      } while (bVar6);\n    }\n    *(undefined *)((long)pvVar4 + (long)iVar1) = 0;\n  }\n  return;\n}"
    },
    {
        "task_id": 11,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2)\n\n{\n  char *pcVar1;\n  byte *pbVar2;\n  char *pcVar3;\n  uint uVar4;\n  char cVar5;\n  char cVar6;\n  char cVar7;\n  char cVar8;\n  char cVar9;\n  char cVar10;\n  char cVar11;\n  char cVar12;\n  char cVar13;\n  char cVar14;\n  char cVar15;\n  char cVar16;\n  char cVar17;\n  char cVar18;\n  char cVar19;\n  char cVar20;\n  char cVar21;\n  char cVar22;\n  char cVar23;\n  char cVar24;\n  char cVar25;\n  char cVar26;\n  char cVar27;\n  char cVar28;\n  char cVar29;\n  char cVar30;\n  char cVar31;\n  char cVar32;\n  char cVar33;\n  char cVar34;\n  byte bVar35;\n  byte bVar36;\n  byte bVar37;\n  byte bVar38;\n  byte bVar39;\n  byte bVar40;\n  byte bVar41;\n  byte bVar42;\n  byte bVar43;\n  byte bVar44;\n  byte bVar45;\n  byte bVar46;\n  byte bVar47;\n  byte bVar48;\n  byte bVar49;\n  byte bVar50;\n  byte bVar51;\n  byte bVar52;\n  byte bVar53;\n  byte bVar54;\n  byte bVar55;\n  byte bVar56;\n  byte bVar57;\n  byte bVar58;\n  byte bVar59;\n  byte bVar60;\n  byte bVar61;\n  byte bVar62;\n  byte bVar63;\n  byte bVar64;\n  byte bVar65;\n  byte bVar66;\n  size_t sVar67;\n  size_t sVar68;\n  void *pvVar69;\n  uint uVar70;\n  long lVar71;\n  \n  sVar67 = strlen(param_1);\n  sVar68 = strlen(param_2);\n  if ((int)sVar68 < (int)sVar67) {\n    sVar67 = sVar68;\n  }\n  uVar4 = (uint)sVar67;\n  pvVar69 = malloc((long)(int)(uVar4 + 1));\n  bVar66 = UNK_001020bf;\n  bVar65 = UNK_001020be;\n  bVar64 = UNK_001020bd;\n  bVar63 = UNK_001020bc;\n  bVar62 = UNK_001020bb;\n  bVar61 = UNK_001020ba;\n  bVar60 = UNK_001020b9;\n  bVar59 = UNK_001020b8;\n  bVar58 = UNK_001020b7;\n  bVar57 = UNK_001020b6;\n  bVar56 = UNK_001020b5;\n  bVar55 = UNK_001020b4;\n  bVar54 = UNK_001020b3;\n  bVar53 = UNK_001020b2;\n  bVar52 = UNK_001020b1;\n  bVar51 = DAT_001020b0;\n  bVar50 = UNK_001020af;\n  bVar49 = UNK_001020ae;\n  bVar48 = UNK_001020ad;\n  bVar47 = UNK_001020ac;\n  bVar46 = UNK_001020ab;\n  bVar45 = UNK_001020aa;\n  bVar44 = UNK_001020a9;\n  bVar43 = UNK_001020a8;\n  bVar42 = UNK_001020a7;\n  bVar41 = UNK_001020a6;\n  bVar40 = UNK_001020a5;\n  bVar39 = UNK_001020a4;\n  bVar38 = UNK_001020a3;\n  bVar37 = UNK_001020a2;\n  bVar36 = UNK_001020a1;\n  bVar35 = DAT_001020a0;\n  if (pvVar69 == (void *)0x0) {\n    return;\n  }\n  if (0 < (int)uVar4) {\n    if (uVar4 - 1 < 0xf) {\n      uVar70 = 0;\n    }\n    else {\n      lVar71 = 0;\n      do {\n        pcVar1 = param_1 + lVar71;\n        cVar5 = pcVar1[1];\n        cVar6 = pcVar1[2];\n        cVar7 = pcVar1[3];\n        cVar8 = pcVar1[4];\n        cVar9 = pcVar1[5];\n        cVar10 = pcVar1[6];\n        cVar11 = pcVar1[7];\n        cVar12 = pcVar1[8];\n        cVar13 = pcVar1[9];\n        cVar14 = pcVar1[10];\n        cVar15 = pcVar1[0xb];\n        cVar16 = pcVar1[0xc];\n        cVar17 = pcVar1[0xd];\n        cVar18 = pcVar1[0xe];\n        cVar19 = pcVar1[0xf];\n        pcVar3 = param_2 + lVar71;\n        cVar20 = pcVar3[1];\n        cVar21 = pcVar3[2];\n        cVar22 = pcVar3[3];\n        cVar23 = pcVar3[4];\n        cVar24 = pcVar3[5];\n        cVar25 = pcVar3[6];\n        cVar26 = pcVar3[7];\n        cVar27 = pcVar3[8];\n        cVar28 = pcVar3[9];\n        cVar29 = pcVar3[10];\n        cVar30 = pcVar3[0xb];\n        cVar31 = pcVar3[0xc];\n        cVar32 = pcVar3[0xd];\n        cVar33 = pcVar3[0xe];\n        cVar34 = pcVar3[0xf];\n        pbVar2 = (byte *)((long)pvVar69 + lVar71);\n        *pbVar2 = ~-(*pcVar1 == *pcVar3) & bVar51 | bVar35 & -(*pcVar1 == *pcVar3);\n        pbVar2[1] = ~-(cVar5 == cVar20) & bVar52 | bVar36 & -(cVar5 == cVar20);\n        pbVar2[2] = ~-(cVar6 == cVar21) & bVar53 | bVar37 & -(cVar6 == cVar21);\n        pbVar2[3] = ~-(cVar7 == cVar22) & bVar54 | bVar38 & -(cVar7 == cVar22);\n        pbVar2[4] = ~-(cVar8 == cVar23) & bVar55 | bVar39 & -(cVar8 == cVar23);\n        pbVar2[5] = ~-(cVar9 == cVar24) & bVar56 | bVar40 & -(cVar9 == cVar24);\n        pbVar2[6] = ~-(cVar10 == cVar25) & bVar57 | bVar41 & -(cVar10 == cVar25);\n        pbVar2[7] = ~-(cVar11 == cVar26) & bVar58 | bVar42 & -(cVar11 == cVar26);\n        pbVar2[8] = ~-(cVar12 == cVar27) & bVar59 | bVar43 & -(cVar12 == cVar27);\n        pbVar2[9] = ~-(cVar13 == cVar28) & bVar60 | bVar44 & -(cVar13 == cVar28);\n        pbVar2[10] = ~-(cVar14 == cVar29) & bVar61 | bVar45 & -(cVar14 == cVar29);\n        pbVar2[0xb] = ~-(cVar15 == cVar30) & bVar62 | bVar46 & -(cVar15 == cVar30);\n        pbVar2[0xc] = ~-(cVar16 == cVar31) & bVar63 | bVar47 & -(cVar16 == cVar31);\n        pbVar2[0xd] = ~-(cVar17 == cVar32) & bVar64 | bVar48 & -(cVar17 == cVar32);\n        pbVar2[0xe] = ~-(cVar18 == cVar33) & bVar65 | bVar49 & -(cVar18 == cVar33);\n        pbVar2[0xf] = ~-(cVar19 == cVar34) & bVar66 | bVar50 & -(cVar19 == cVar34);\n        lVar71 = lVar71 + 0x10;\n      } while (lVar71 != (sVar67 >> 4 & 0xfffffff) << 4);\n      uVar70 = uVar4 & 0xfffffff0;\n      if ((sVar67 & 0xf) == 0) goto LAB_00101550;\n    }\n    lVar71 = (long)(int)uVar70;\n    *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n    if ((int)(uVar70 + 1) < (int)uVar4) {\n      lVar71 = (long)(int)(uVar70 + 1);\n      *(char *)((long)pvVar69 + lVar71) = (param_2[lVar71] != param_1[lVar71]) + '0';\n      if ((int)(uVar70 + 2) < (int)uVar4) {\n        lVar71 = (long)(int)(uVar70 + 2);\n        *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n        if ((int)(uVar70 + 3) < (int)uVar4) {\n          lVar71 = (long)(int)(uVar70 + 3);\n          *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n          if ((int)(uVar70 + 4) < (int)uVar4) {\n            lVar71 = (long)(int)(uVar70 + 4);\n            *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n            if ((int)(uVar70 + 5) < (int)uVar4) {\n              lVar71 = (long)(int)(uVar70 + 5);\n              *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n              if ((int)(uVar70 + 6) < (int)uVar4) {\n                lVar71 = (long)(int)(uVar70 + 6);\n                *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n                if ((int)(uVar70 + 7) < (int)uVar4) {\n                  lVar71 = (long)(int)(uVar70 + 7);\n                  *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n                  if ((int)(uVar70 + 8) < (int)uVar4) {\n                    lVar71 = (long)(int)(uVar70 + 8);\n                    *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0';\n                    if ((int)(uVar70 + 9) < (int)uVar4) {\n                      lVar71 = (long)(int)(uVar70 + 9);\n                      *(char *)((long)pvVar69 + lVar71) = (param_1[lVar71] != param_2[lVar71]) + '0'\n                      ;\n                      if ((int)(uVar70 + 10) < (int)uVar4) {\n                        lVar71 = (long)(int)(uVar70 + 10);\n                        *(char *)((long)pvVar69 + lVar71) =\n                             (param_1[lVar71] != param_2[lVar71]) + '0';\n                        if ((int)(uVar70 + 0xb) < (int)uVar4) {\n                          lVar71 = (long)(int)(uVar70 + 0xb);\n                          *(char *)((long)pvVar69 + lVar71) =\n                               (param_1[lVar71] != param_2[lVar71]) + '0';\n                          if ((int)(uVar70 + 0xc) < (int)uVar4) {\n                            lVar71 = (long)(int)(uVar70 + 0xc);\n                            *(char *)((long)pvVar69 + lVar71) =\n                                 (param_1[lVar71] != param_2[lVar71]) + '0';\n                            if ((int)(uVar70 + 0xd) < (int)uVar4) {\n                              lVar71 = (long)(int)(uVar70 + 0xd);\n                              *(char *)((long)pvVar69 + lVar71) =\n                                   (param_1[lVar71] != param_2[lVar71]) + '0';\n                              if ((int)(uVar70 + 0xe) < (int)uVar4) {\n                                lVar71 = (long)(int)(uVar70 + 0xe);\n                                *(char *)((long)pvVar69 + lVar71) =\n                                     (param_1[lVar71] != param_2[lVar71]) + '0';\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_00101550:\n  *(undefined *)((long)pvVar69 + (long)(int)uVar4) = 0;\n  return;\n}"
    },
    {
        "task_id": 12,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(long param_1,int param_2)\n\n{\n  size_t sVar1;\n  int local_1c;\n  int local_18;\n  undefined *local_10;\n  \n  local_10 = &DAT_00102008;\n  local_1c = 0;\n  for (local_18 = 0; local_18 < param_2; local_18 = local_18 + 1) {\n    sVar1 = strlen(*(char **)(param_1 + (long)local_18 * 8));\n    if (local_1c < (int)sVar1) {\n      local_10 = *(undefined **)(param_1 + (long)local_18 * 8);\n      local_1c = (int)sVar1;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 12,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char cVar2;\n  int iVar3;\n  long lVar4;\n  char *pcVar5;\n  int iVar6;\n  char *pcVar7;\n  \n  pcVar7 = \"\";\n  if (0 < param_2) {\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar6 = 0;\n    do {\n      lVar4 = -1;\n      pcVar5 = *param_1;\n      do {\n        if (lVar4 == 0) break;\n        lVar4 = lVar4 + -1;\n        cVar2 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n      } while (cVar2 != '\\0');\n      iVar3 = ~(uint)lVar4 - 1;\n      if (iVar6 < iVar3) {\n        pcVar7 = *param_1;\n        iVar6 = iVar3;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  return pcVar7;\n}"
    },
    {
        "task_id": 12,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__s;\n  size_t sVar2;\n  int iVar3;\n  char *pcVar4;\n  \n  pcVar4 = \"\";\n  if (0 < param_2) {\n    iVar3 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s = *param_1;\n      sVar2 = strlen(__s);\n      if (iVar3 < (int)sVar2) {\n        pcVar4 = __s;\n        iVar3 = (int)sVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  return pcVar4;\n}"
    },
    {
        "task_id": 12,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__s;\n  size_t sVar2;\n  int iVar3;\n  char *pcVar4;\n  \n  pcVar4 = \"\";\n  if (0 < param_2) {\n    iVar3 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s = *param_1;\n      sVar2 = strlen(__s);\n      if (iVar3 < (int)sVar2) {\n        pcVar4 = __s;\n        iVar3 = (int)sVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  return pcVar4;\n}"
    },
    {
        "task_id": 13,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  int local_20;\n  int local_1c;\n  \n  local_20 = param_2;\n  local_1c = param_1;\n  while (local_20 != 0) {\n    iVar1 = local_1c % local_20;\n    local_1c = local_20;\n    local_20 = iVar1;\n  }\n  return local_1c;\n}"
    },
    {
        "task_id": 13,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = param_1;\n  if (param_2 != 0) {\n    do {\n      param_1 = param_2;\n      param_2 = iVar1 % param_1;\n      iVar1 = param_1;\n    } while (param_2 != 0);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 13,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  \n  if (param_2 != 0) {\n    do {\n      iVar1 = param_2;\n      param_2 = param_1 % iVar1;\n      param_1 = iVar1;\n    } while (param_2 != 0);\n    return iVar1;\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 13,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  \n  if (param_2 != 0) {\n    do {\n      iVar1 = param_2;\n      param_2 = param_1 % iVar1;\n      param_1 = iVar1;\n    } while (param_2 != 0);\n    return iVar1;\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 14,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  void *pvVar3;\n  void *pvVar4;\n  int local_38;\n  char *local_30;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  pvVar3 = malloc((long)iVar1 << 3);\n  local_30 = (char *)malloc((long)(iVar1 + 1));\n  *local_30 = '\\0';\n  for (local_38 = 0; local_38 < iVar1; local_38 = local_38 + 1) {\n    sVar2 = strlen(local_30);\n    local_30 = (char *)realloc(local_30,sVar2 + 2);\n    local_30[sVar2] = param_1[local_38];\n    local_30[sVar2 + 1] = '\\0';\n    sVar2 = strlen(local_30);\n    pvVar4 = malloc(sVar2 + 1);\n    *(void **)((long)local_38 * 8 + (long)pvVar3) = pvVar4;\n    strcpy(*(char **)((long)pvVar3 + (long)local_38 * 8),local_30);\n  }\n  free(local_30);\n  *param_2 = iVar1;\n  return pvVar3;\n}"
    },
    {
        "task_id": 14,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  uint uVar2;\n  void *pvVar3;\n  char *pcVar4;\n  char *pcVar5;\n  long lVar6;\n  ulong uVar7;\n  ulong uVar8;\n  int iVar9;\n  bool bVar10;\n  byte bVar11;\n  \n  bVar11 = 0;\n  lVar6 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar6 == 0) break;\n    lVar6 = lVar6 + -1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  uVar2 = ~(uint)lVar6;\n  iVar9 = uVar2 - 1;\n  pvVar3 = malloc((long)iVar9 << 3);\n  pcVar4 = (char *)malloc((long)(int)uVar2);\n  *pcVar4 = '\\0';\n  if (0 < iVar9) {\n    uVar8 = 0;\n    do {\n      uVar7 = 0xffffffffffffffff;\n      pcVar5 = pcVar4;\n      do {\n        if (uVar7 == 0) break;\n        uVar7 = uVar7 - 1;\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + (ulong)bVar11 * -2 + 1;\n      } while (cVar1 != '\\0');\n      uVar7 = ~uVar7;\n      pcVar4 = (char *)realloc(pcVar4,uVar7 + 1);\n      pcVar4[uVar7 - 1] = param_1[uVar8];\n      pcVar4[uVar7] = '\\0';\n      uVar7 = 0xffffffffffffffff;\n      pcVar5 = pcVar4;\n      do {\n        if (uVar7 == 0) break;\n        uVar7 = uVar7 - 1;\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + (ulong)bVar11 * -2 + 1;\n      } while (cVar1 != '\\0');\n      pcVar5 = (char *)malloc(~uVar7);\n      *(char **)((long)pvVar3 + uVar8 * 8) = pcVar5;\n      strcpy(pcVar5,pcVar4);\n      bVar10 = uVar8 != uVar2 - 2;\n      uVar8 = uVar8 + 1;\n    } while (bVar10);\n  }\n  free(pcVar4);\n  *param_2 = iVar9;\n  return pvVar3;\n}"
    },
    {
        "task_id": 14,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  void *pvVar6;\n  uint *__ptr;\n  void *__dest;\n  uint *puVar7;\n  uint *puVar8;\n  ulong uVar9;\n  undefined *puVar10;\n  bool bVar11;\n  \n  sVar5 = strlen(param_1);\n  iVar2 = (int)sVar5;\n  pvVar6 = malloc((long)iVar2 << 3);\n  __ptr = (uint *)malloc((long)(iVar2 + 1));\n  *(undefined *)__ptr = 0;\n  if (0 < iVar2) {\n    puVar8 = __ptr;\n    uVar9 = 0;\n    do {\n      do {\n        puVar7 = puVar8;\n        uVar3 = *puVar7 + 0xfefefeff & ~*puVar7;\n        uVar4 = uVar3 & 0x80808080;\n        puVar8 = puVar7 + 1;\n      } while (uVar4 == 0);\n      bVar11 = (uVar3 & 0x8080) == 0;\n      if (bVar11) {\n        uVar4 = uVar4 >> 0x10;\n      }\n      if (bVar11) {\n        puVar8 = (uint *)((long)puVar7 + 6);\n      }\n      puVar10 = (undefined *)\n                ((long)puVar8 + ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)__ptr));\n      __ptr = (uint *)realloc(__ptr,(size_t)(puVar10 + 2));\n      cVar1 = param_1[uVar9];\n      *(undefined *)((long)__ptr + (long)(puVar10 + 1)) = 0;\n      *(char *)((long)__ptr + (long)puVar10) = cVar1;\n      puVar8 = __ptr;\n      do {\n        puVar7 = puVar8;\n        uVar3 = *puVar7 + 0xfefefeff & ~*puVar7;\n        uVar4 = uVar3 & 0x80808080;\n        puVar8 = puVar7 + 1;\n      } while (uVar4 == 0);\n      bVar11 = (uVar3 & 0x8080) == 0;\n      if (bVar11) {\n        uVar4 = uVar4 >> 0x10;\n      }\n      if (bVar11) {\n        puVar8 = (uint *)((long)puVar7 + 6);\n      }\n      puVar10 = (undefined *)\n                ((long)puVar8 + (-(long)__ptr - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) + -2);\n      __dest = malloc((size_t)puVar10);\n      *(void **)((long)pvVar6 + uVar9 * 8) = __dest;\n      memcpy(__dest,__ptr,(size_t)puVar10);\n      bVar11 = uVar9 != iVar2 - 1;\n      puVar8 = __ptr;\n      uVar9 = uVar9 + 1;\n    } while (bVar11);\n  }\n  free(__ptr);\n  *param_2 = iVar2;\n  return pvVar6;\n}"
    },
    {
        "task_id": 14,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  void *pvVar6;\n  uint *__ptr;\n  void *__dest;\n  uint *puVar7;\n  uint *puVar8;\n  ulong uVar9;\n  undefined *puVar10;\n  bool bVar11;\n  \n  sVar5 = strlen(param_1);\n  iVar2 = (int)sVar5;\n  pvVar6 = malloc((long)iVar2 << 3);\n  __ptr = (uint *)malloc((long)(iVar2 + 1));\n  *(undefined *)__ptr = 0;\n  if (0 < iVar2) {\n    puVar8 = __ptr;\n    uVar9 = 0;\n    do {\n      do {\n        puVar7 = puVar8;\n        uVar3 = *puVar7 + 0xfefefeff & ~*puVar7;\n        uVar4 = uVar3 & 0x80808080;\n        puVar8 = puVar7 + 1;\n      } while (uVar4 == 0);\n      bVar11 = (uVar3 & 0x8080) == 0;\n      if (bVar11) {\n        uVar4 = uVar4 >> 0x10;\n      }\n      if (bVar11) {\n        puVar8 = (uint *)((long)puVar7 + 6);\n      }\n      puVar10 = (undefined *)\n                ((long)puVar8 + ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)__ptr));\n      __ptr = (uint *)realloc(__ptr,(size_t)(puVar10 + 2));\n      cVar1 = param_1[uVar9];\n      *(undefined *)((long)__ptr + (long)(puVar10 + 1)) = 0;\n      *(char *)((long)__ptr + (long)puVar10) = cVar1;\n      puVar8 = __ptr;\n      do {\n        puVar7 = puVar8;\n        uVar3 = *puVar7 + 0xfefefeff & ~*puVar7;\n        uVar4 = uVar3 & 0x80808080;\n        puVar8 = puVar7 + 1;\n      } while (uVar4 == 0);\n      bVar11 = (uVar3 & 0x8080) == 0;\n      if (bVar11) {\n        uVar4 = uVar4 >> 0x10;\n      }\n      if (bVar11) {\n        puVar8 = (uint *)((long)puVar7 + 6);\n      }\n      puVar10 = (undefined *)\n                ((long)puVar8 + (-(long)__ptr - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) + -2);\n      __dest = malloc((size_t)puVar10);\n      *(void **)((long)pvVar6 + uVar9 * 8) = __dest;\n      memcpy(__dest,__ptr,(size_t)puVar10);\n      bVar11 = uVar9 != iVar2 - 1;\n      puVar8 = __ptr;\n      uVar9 = uVar9 + 1;\n    } while (bVar11);\n  }\n  free(__ptr);\n  *param_2 = iVar2;\n  return pvVar6;\n}"
    },
    {
        "task_id": 15,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(int param_1)\n\n{\n  int iVar1;\n  char *__s;\n  int local_24;\n  uint local_20;\n  uint local_1c;\n  char *local_18;\n  \n  local_24 = 2;\n  for (local_20 = 1; (int)local_20 <= param_1; local_20 = local_20 + 1) {\n    iVar1 = snprintf((char *)0x0,0,\" %d\",(ulong)local_20);\n    local_24 = local_24 + iVar1;\n  }\n  __s = (char *)malloc((long)local_24);\n  if (__s == (char *)0x0) {\n    __s = (char *)0x0;\n  }\n  else {\n    iVar1 = sprintf(__s,\"0\");\n    local_18 = __s + iVar1;\n    for (local_1c = 1; (int)local_1c <= param_1; local_1c = local_1c + 1) {\n      iVar1 = sprintf(local_18,\" %d\",(ulong)local_1c);\n      local_18 = local_18 + iVar1;\n    }\n  }\n  return __s;\n}"
    },
    {
        "task_id": 15,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(int param_1)\n\n{\n  int iVar1;\n  undefined2 *puVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  \n  if (param_1 < 1) {\n    puVar2 = (undefined2 *)malloc(2);\n    if (puVar2 != (undefined2 *)0x0) {\n      *puVar2 = 0x30;\n    }\n  }\n  else {\n    iVar3 = 1;\n    iVar4 = 2;\n    do {\n      iVar1 = __snprintf_chk(0,0,1,0xffffffffffffffff,&DAT_00102004,iVar3);\n      iVar4 = iVar4 + iVar1;\n      iVar3 = iVar3 + 1;\n    } while (iVar3 != param_1 + 1);\n    puVar2 = (undefined2 *)malloc((long)iVar4);\n    if (puVar2 != (undefined2 *)0x0) {\n      *puVar2 = 0x30;\n      lVar5 = (long)puVar2 + 1;\n      iVar3 = 1;\n      do {\n        iVar4 = __sprintf_chk(lVar5,1,0xffffffffffffffff,&DAT_00102004,iVar3);\n        lVar5 = lVar5 + iVar4;\n        iVar3 = iVar3 + 1;\n      } while (iVar3 <= param_1);\n    }\n  }\n  return puVar2;\n}"
    },
    {
        "task_id": 15,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(int param_1)\n\n{\n  int iVar1;\n  undefined2 *puVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  bool bVar6;\n  \n  if (param_1 < 1) {\n    puVar2 = (undefined2 *)malloc(2);\n    if (puVar2 != (undefined2 *)0x0) {\n      *puVar2 = 0x30;\n      return puVar2;\n    }\n  }\n  else {\n    iVar4 = 2;\n    iVar1 = 1;\n    do {\n      iVar3 = iVar1;\n      iVar1 = __snprintf_chk(0,0,1,0xffffffffffffffff,&DAT_00102004,iVar3);\n      iVar4 = iVar4 + iVar1;\n      iVar1 = iVar3 + 1;\n    } while (iVar3 + 1 != param_1 + 1);\n    puVar2 = (undefined2 *)malloc((long)iVar4);\n    if (puVar2 != (undefined2 *)0x0) {\n      lVar5 = (long)puVar2 + 1;\n      *puVar2 = 0x30;\n      iVar1 = 1;\n      do {\n        iVar4 = __sprintf_chk(lVar5,1,0xffffffffffffffff,&DAT_00102004,iVar1);\n        lVar5 = lVar5 + iVar4;\n        bVar6 = iVar3 != iVar1;\n        iVar1 = iVar1 + 1;\n      } while (bVar6);\n      return puVar2;\n    }\n  }\n  return (undefined2 *)0x0;\n}"
    },
    {
        "task_id": 15,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(int param_1)\n\n{\n  int iVar1;\n  undefined2 *puVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  bool bVar6;\n  \n  if (param_1 < 1) {\n    puVar2 = (undefined2 *)malloc(2);\n    if (puVar2 != (undefined2 *)0x0) {\n      *puVar2 = 0x30;\n      return puVar2;\n    }\n  }\n  else {\n    iVar4 = 2;\n    iVar1 = 1;\n    do {\n      iVar3 = iVar1;\n      iVar1 = __snprintf_chk(0,0,1,0xffffffffffffffff,&DAT_00102004,iVar3);\n      iVar4 = iVar4 + iVar1;\n      iVar1 = iVar3 + 1;\n    } while (iVar3 + 1 != param_1 + 1);\n    puVar2 = (undefined2 *)malloc((long)iVar4);\n    if (puVar2 != (undefined2 *)0x0) {\n      lVar5 = (long)puVar2 + 1;\n      *puVar2 = 0x30;\n      iVar1 = 1;\n      do {\n        iVar4 = __sprintf_chk(lVar5,1,0xffffffffffffffff,&DAT_00102004,iVar1);\n        lVar5 = lVar5 + iVar4;\n        bVar6 = iVar3 != iVar1;\n        iVar1 = iVar1 + 1;\n      } while (bVar6);\n      return puVar2;\n    }\n  }\n  return (undefined2 *)0x0;\n}"
    },
    {
        "task_id": 16,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1)\n\n{\n  byte bVar1;\n  int iVar2;\n  ushort **ppuVar3;\n  long lVar4;\n  undefined8 *puVar5;\n  long in_FS_OFFSET;\n  int local_420;\n  int local_41c;\n  undefined8 local_418 [129];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_420 = 0;\n  puVar5 = local_418;\n  for (lVar4 = 0x80; lVar4 != 0; lVar4 = lVar4 + -1) {\n    *puVar5 = 0;\n    puVar5 = puVar5 + 1;\n  }\n  for (local_41c = 0; *(char *)(param_1 + local_41c) != '\\0'; local_41c = local_41c + 1) {\n    iVar2 = tolower((uint)*(byte *)(param_1 + local_41c));\n    bVar1 = (byte)iVar2;\n    if (*(int *)((long)local_418 + (long)(int)(char)bVar1 * 4) == 0) {\n      ppuVar3 = __ctype_b_loc();\n      if (((*ppuVar3)[bVar1] & 0x400) != 0) {\n        *(undefined4 *)((long)local_418 + (long)(int)(char)bVar1 * 4) = 1;\n        local_420 = local_420 + 1;\n      }\n    }\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_420;\n}"
    },
    {
        "task_id": 16,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  uint uVar1;\n  __int32_t *p_Var2;\n  __int32_t **pp_Var3;\n  ushort **ppuVar4;\n  long lVar5;\n  byte bVar6;\n  char cVar7;\n  byte *pbVar8;\n  undefined8 *puVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  undefined8 auStack_438 [129];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar9 = auStack_438;\n  for (lVar5 = 0x80; lVar5 != 0; lVar5 = lVar5 + -1) {\n    *puVar9 = 0;\n    puVar9 = puVar9 + 1;\n  }\n  bVar6 = *param_1;\n  if (bVar6 == 0) {\n    iVar10 = 0;\n  }\n  else {\n    pp_Var3 = __ctype_tolower_loc();\n    p_Var2 = *pp_Var3;\n    iVar10 = 0;\n    pbVar8 = param_1 + 1;\n    do {\n      uVar1 = p_Var2[bVar6];\n      cVar7 = (char)uVar1;\n      if (*(int *)((long)auStack_438 + (long)cVar7 * 4) == 0) {\n        ppuVar4 = __ctype_b_loc();\n        if ((*(byte *)((long)*ppuVar4 + (ulong)(uVar1 & 0xff) * 2 + 1) & 4) != 0) {\n          *(undefined4 *)((long)auStack_438 + (long)(int)cVar7 * 4) = 1;\n          iVar10 = iVar10 + 1;\n        }\n      }\n      bVar6 = *pbVar8;\n      pbVar8 = pbVar8 + 1;\n    } while (bVar6 != 0);\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 16,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  byte bVar1;\n  uint uVar2;\n  __int32_t *p_Var3;\n  __int32_t **pp_Var4;\n  ushort **ppuVar5;\n  long lVar6;\n  undefined8 *puVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  undefined8 auStack_438 [129];\n  long local_30;\n  \n  bVar1 = *param_1;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar7 = auStack_438;\n  for (lVar6 = 0x80; lVar6 != 0; lVar6 = lVar6 + -1) {\n    *puVar7 = 0;\n    puVar7 = puVar7 + 1;\n  }\n  if (bVar1 == 0) {\n    iVar8 = 0;\n  }\n  else {\n    pp_Var4 = __ctype_tolower_loc();\n    param_1 = param_1 + 1;\n    iVar8 = 0;\n    p_Var3 = *pp_Var4;\n    do {\n      uVar2 = p_Var3[bVar1];\n      lVar6 = (long)(char)uVar2;\n      if (*(int *)((long)auStack_438 + lVar6 * 4) == 0) {\n        ppuVar5 = __ctype_b_loc();\n        if ((*(byte *)((long)*ppuVar5 + (ulong)(uVar2 & 0xff) * 2 + 1) & 4) != 0) {\n          *(undefined4 *)((long)auStack_438 + lVar6 * 4) = 1;\n          iVar8 = iVar8 + 1;\n        }\n      }\n      bVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (bVar1 != 0);\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar8;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 16,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  byte bVar1;\n  uint uVar2;\n  __int32_t *p_Var3;\n  __int32_t **pp_Var4;\n  ushort **ppuVar5;\n  long lVar6;\n  undefined8 *puVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  undefined8 auStack_438 [129];\n  long local_30;\n  \n  bVar1 = *param_1;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar7 = auStack_438;\n  for (lVar6 = 0x80; lVar6 != 0; lVar6 = lVar6 + -1) {\n    *puVar7 = 0;\n    puVar7 = puVar7 + 1;\n  }\n  if (bVar1 == 0) {\n    iVar8 = 0;\n  }\n  else {\n    pp_Var4 = __ctype_tolower_loc();\n    param_1 = param_1 + 1;\n    iVar8 = 0;\n    p_Var3 = *pp_Var4;\n    do {\n      uVar2 = p_Var3[bVar1];\n      lVar6 = (long)(char)uVar2;\n      if (*(int *)((long)auStack_438 + lVar6 * 4) == 0) {\n        ppuVar5 = __ctype_b_loc();\n        if ((*(byte *)((long)*ppuVar5 + (ulong)(uVar2 & 0xff) * 2 + 1) & 4) != 0) {\n          *(undefined4 *)((long)auStack_438 + lVar6 * 4) = 1;\n          iVar8 = iVar8 + 1;\n        }\n      }\n      bVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (bVar1 != 0);\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar8;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 17,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  size_t sVar3;\n  char *__dest;\n  size_t sVar4;\n  ulong uVar5;\n  char *pcVar6;\n  long in_FS_OFFSET;\n  byte bVar7;\n  int local_40;\n  int local_3c;\n  int local_38;\n  void *local_30;\n  undefined2 local_13;\n  undefined local_11;\n  long local_10;\n  \n  bVar7 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_30 = (void *)0x0;\n  local_40 = 0;\n  local_3c = 0;\n  local_13 = 0;\n  local_11 = 0;\n  sVar3 = strlen(param_1);\n  __dest = (char *)malloc((long)((int)sVar3 + 2));\n  strcpy(__dest,param_1);\n  uVar5 = 0xffffffffffffffff;\n  pcVar6 = __dest;\n  do {\n    if (uVar5 == 0) break;\n    uVar5 = uVar5 - 1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + (ulong)bVar7 * -2 + 1;\n  } while (cVar1 != '\\0');\n  *(undefined2 *)(__dest + (~uVar5 - 1)) = 0x20;\n  for (local_38 = 0; local_38 < (int)sVar3 + 1; local_38 = local_38 + 1) {\n    if (__dest[local_38] == ' ') {\n      iVar2 = strcmp((char *)&local_13,\"o\");\n      if (iVar2 == 0) {\n        if (local_40 == local_3c) {\n          if (local_3c < 1) {\n            local_3c = 4;\n          }\n          else {\n            local_3c = local_3c * 2;\n          }\n          local_30 = realloc(local_30,(long)local_3c * 4);\n        }\n        *(undefined4 *)((long)local_30 + (long)local_40 * 4) = 4;\n        local_40 = local_40 + 1;\n      }\n      iVar2 = strcmp((char *)&local_13,\"o|\");\n      if (iVar2 == 0) {\n        if (local_40 == local_3c) {\n          if (local_3c < 1) {\n            local_3c = 4;\n          }\n          else {\n            local_3c = local_3c * 2;\n          }\n          local_30 = realloc(local_30,(long)local_3c * 4);\n        }\n        *(undefined4 *)((long)local_30 + (long)local_40 * 4) = 2;\n        local_40 = local_40 + 1;\n      }\n      iVar2 = strcmp((char *)&local_13,\".|\");\n      if (iVar2 == 0) {\n        if (local_40 == local_3c) {\n          if (local_3c < 1) {\n            local_3c = 4;\n          }\n          else {\n            local_3c = local_3c * 2;\n          }\n          local_30 = realloc(local_30,(long)local_3c * 4);\n        }\n        *(undefined4 *)((long)local_30 + (long)local_40 * 4) = 1;\n        local_40 = local_40 + 1;\n      }\n      local_13 = local_13 & 0xff00;\n    }\n    else {\n      sVar4 = strlen((char *)&local_13);\n      if (sVar4 < 2) {\n        *(char *)((long)&local_13 + sVar4) = __dest[local_38];\n        *(undefined *)((long)&local_13 + sVar4 + 1) = 0;\n      }\n    }\n  }\n  free(__dest);\n  *param_2 = local_40;\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_30;\n}"
    },
    {
        "task_id": 17,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,uint *param_2)\n\n{\n  ulong uVar1;\n  char cVar2;\n  byte bVar3;\n  byte bVar4;\n  uint uVar5;\n  byte *__dest;\n  ulong uVar6;\n  long lVar7;\n  byte *pbVar8;\n  uint uVar9;\n  undefined2 *puVar10;\n  size_t sVar11;\n  char *pcVar12;\n  byte *pbVar13;\n  uint uVar14;\n  void *__ptr;\n  long in_FS_OFFSET;\n  undefined uVar15;\n  undefined uVar16;\n  bool bVar17;\n  undefined uVar18;\n  bool bVar19;\n  byte bVar20;\n  byte bStack_44;\n  undefined2 local_43;\n  undefined local_41;\n  long local_40;\n  \n  bVar20 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_43 = 0;\n  local_41 = 0;\n  uVar6 = 0xffffffffffffffff;\n  pcVar12 = param_1;\n  do {\n    if (uVar6 == 0) break;\n    uVar6 = uVar6 - 1;\n    cVar2 = *pcVar12;\n    pcVar12 = pcVar12 + 1;\n  } while (cVar2 != '\\0');\n  uVar1 = ~uVar6 - 1;\n  __dest = (byte *)malloc((long)((int)~uVar6 + 1));\n  strcpy((char *)__dest,param_1);\n  uVar6 = 0xffffffffffffffff;\n  pbVar8 = __dest;\n  do {\n    if (uVar6 == 0) break;\n    uVar6 = uVar6 - 1;\n    bVar3 = *pbVar8;\n    pbVar8 = pbVar8 + (ulong)bVar20 * -2 + 1;\n  } while (bVar3 != 0);\n  *(undefined2 *)(__dest + (~uVar6 - 1)) = 0x20;\n  if ((int)uVar1 + 1 < 1) {\n    uVar9 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    uVar14 = 0;\n    uVar9 = 0;\n    __ptr = (void *)0x0;\n    pbVar8 = __dest;\n    do {\n      bVar3 = *pbVar8;\n      bVar17 = bVar3 < 0x20;\n      bVar19 = bVar3 == 0x20;\n      if (bVar19) {\n        lVar7 = 2;\n        puVar10 = &local_43;\n        pbVar13 = &DAT_0010203c;\n        do {\n          if (lVar7 == 0) break;\n          lVar7 = lVar7 + -1;\n          bVar17 = *(byte *)puVar10 < *pbVar13;\n          bVar19 = *(byte *)puVar10 == *pbVar13;\n          puVar10 = (undefined2 *)((long)puVar10 + (ulong)bVar20 * -2 + 1);\n          pbVar13 = pbVar13 + (ulong)bVar20 * -2 + 1;\n        } while (bVar19);\n        uVar15 = 0;\n        uVar18 = (!bVar17 && !bVar19) == bVar17;\n        if ((bool)uVar18) {\n          uVar15 = uVar9 < uVar14;\n          uVar18 = uVar9 == uVar14;\n          if ((bool)uVar18) {\n            uVar5 = uVar14 * 2;\n            bVar17 = 0 < (int)uVar14;\n            uVar14 = 4;\n            if (bVar17) {\n              uVar14 = uVar5;\n            }\n            sVar11 = (long)(int)uVar14 << 2;\n            uVar15 = (long)(int)uVar14 << 1 < 0;\n            uVar18 = sVar11 == 0;\n            __ptr = realloc(__ptr,sVar11);\n          }\n          *(undefined4 *)((long)__ptr + (long)(int)uVar9 * 4) = 4;\n          uVar9 = uVar9 + 1;\n        }\n        lVar7 = 3;\n        puVar10 = &local_43;\n        pbVar13 = &DAT_00102051;\n        do {\n          if (lVar7 == 0) break;\n          lVar7 = lVar7 + -1;\n          uVar15 = *(byte *)puVar10 < *pbVar13;\n          uVar18 = *(byte *)puVar10 == *pbVar13;\n          puVar10 = (undefined2 *)((long)puVar10 + (ulong)bVar20 * -2 + 1);\n          pbVar13 = pbVar13 + (ulong)bVar20 * -2 + 1;\n        } while ((bool)uVar18);\n        uVar16 = 0;\n        uVar18 = (!(bool)uVar15 && !(bool)uVar18) == (bool)uVar15;\n        if ((bool)uVar18) {\n          uVar16 = uVar9 < uVar14;\n          uVar18 = uVar9 == uVar14;\n          if ((bool)uVar18) {\n            uVar5 = uVar14 * 2;\n            bVar17 = 0 < (int)uVar14;\n            uVar14 = 4;\n            if (bVar17) {\n              uVar14 = uVar5;\n            }\n            sVar11 = (long)(int)uVar14 << 2;\n            uVar16 = (long)(int)uVar14 << 1 < 0;\n            uVar18 = sVar11 == 0;\n            __ptr = realloc(__ptr,sVar11);\n          }\n          *(undefined4 *)((long)__ptr + (long)(int)uVar9 * 4) = 2;\n          uVar9 = uVar9 + 1;\n        }\n        lVar7 = 3;\n        puVar10 = &local_43;\n        pbVar13 = &DAT_00102027;\n        do {\n          if (lVar7 == 0) break;\n          lVar7 = lVar7 + -1;\n          uVar16 = *(byte *)puVar10 < *pbVar13;\n          uVar18 = *(byte *)puVar10 == *pbVar13;\n          puVar10 = (undefined2 *)((long)puVar10 + (ulong)bVar20 * -2 + 1);\n          pbVar13 = pbVar13 + (ulong)bVar20 * -2 + 1;\n        } while ((bool)uVar18);\n        if ((!(bool)uVar16 && !(bool)uVar18) == (bool)uVar16) {\n          if (uVar9 == uVar14) {\n            uVar5 = uVar14 * 2;\n            bVar17 = 0 < (int)uVar14;\n            uVar14 = 4;\n            if (bVar17) {\n              uVar14 = uVar5;\n            }\n            __ptr = realloc(__ptr,(long)(int)uVar14 << 2);\n          }\n          *(undefined4 *)((long)__ptr + (long)(int)uVar9 * 4) = 1;\n          uVar9 = uVar9 + 1;\n        }\n        local_43 = local_43 & 0xff00;\n      }\n      else {\n        uVar6 = 0xffffffffffffffff;\n        puVar10 = &local_43;\n        do {\n          if (uVar6 == 0) break;\n          uVar6 = uVar6 - 1;\n          bVar4 = *(byte *)puVar10;\n          puVar10 = (undefined2 *)((long)puVar10 + (ulong)bVar20 * -2 + 1);\n        } while (bVar4 != 0);\n        uVar6 = ~uVar6;\n        if (uVar6 - 1 < 2) {\n          (&bStack_44)[uVar6] = bVar3;\n          *(undefined *)((long)&local_43 + uVar6) = 0;\n        }\n      }\n      pbVar8 = pbVar8 + 1;\n    } while (pbVar8 != __dest + (uVar1 & 0xffffffff) + 1);\n  }\n  free(__dest);\n  *param_2 = uVar9;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return __ptr;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 17,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  size_t __n;\n  char *__dest;\n  long lVar2;\n  void *__ptr;\n  char *pcVar3;\n  size_t sVar4;\n  int iVar5;\n  long in_FS_OFFSET;\n  int local_5c;\n  char local_43 [3];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_43[2] = '\\0';\n  local_43[0] = '\\0';\n  local_43[1] = '\\0';\n  __n = strlen(param_1);\n  __dest = (char *)malloc((long)((int)__n + 2));\n  memcpy(__dest,param_1,__n);\n  *(undefined2 *)(__dest + __n) = 0x20;\n  if ((int)__n + 1 < 1) {\n    iVar5 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    local_5c = 0;\n    iVar5 = 0;\n    __ptr = (void *)0x0;\n    pcVar3 = __dest;\n    do {\n      while (cVar1 = *pcVar3, cVar1 == ' ') {\n        if ((local_43[0] == 'o') && (local_43[1] == '\\0')) {\n          if (local_5c == iVar5) {\n            if (local_5c == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = local_5c * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 4;\n        }\n        if (((local_43[0] == 'o') && (local_43[1] == '|')) && (local_43[2] == '\\0')) {\n          if (iVar5 == local_5c) {\n            if (iVar5 == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = iVar5 * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 2;\n        }\n        if (((local_43[0] == '.') && (local_43[1] == '|')) && (local_43[2] == '\\0')) {\n          if (iVar5 == local_5c) {\n            if (iVar5 == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = iVar5 * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 1;\n        }\n        pcVar3 = pcVar3 + 1;\n        local_43[0] = '\\0';\n        if (pcVar3 == __dest + (__n & 0xffffffff) + 1) goto LAB_00101614;\n      }\n      sVar4 = strlen(local_43);\n      if (sVar4 != 2) {\n        local_43[sVar4] = cVar1;\n        local_43[sVar4 + 1] = '\\0';\n      }\n      pcVar3 = pcVar3 + 1;\n    } while (pcVar3 != __dest + (__n & 0xffffffff) + 1);\n  }\nLAB_00101614:\n  free(__dest);\n  *param_2 = iVar5;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return __ptr;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 17,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  size_t __n;\n  char *__dest;\n  long lVar2;\n  void *__ptr;\n  char *pcVar3;\n  size_t sVar4;\n  int iVar5;\n  long in_FS_OFFSET;\n  int local_5c;\n  char local_43 [3];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_43[2] = '\\0';\n  local_43[0] = '\\0';\n  local_43[1] = '\\0';\n  __n = strlen(param_1);\n  __dest = (char *)malloc((long)((int)__n + 2));\n  memcpy(__dest,param_1,__n);\n  *(undefined2 *)(__dest + __n) = 0x20;\n  if ((int)__n + 1 < 1) {\n    iVar5 = 0;\n    __ptr = (void *)0x0;\n  }\n  else {\n    local_5c = 0;\n    iVar5 = 0;\n    __ptr = (void *)0x0;\n    pcVar3 = __dest;\n    do {\n      while (cVar1 = *pcVar3, cVar1 == ' ') {\n        if ((local_43[0] == 'o') && (local_43[1] == '\\0')) {\n          if (local_5c == iVar5) {\n            if (local_5c == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = local_5c * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 4;\n        }\n        if (((local_43[0] == 'o') && (local_43[1] == '|')) && (local_43[2] == '\\0')) {\n          if (iVar5 == local_5c) {\n            if (iVar5 == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = iVar5 * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 2;\n        }\n        if (((local_43[0] == '.') && (local_43[1] == '|')) && (local_43[2] == '\\0')) {\n          if (iVar5 == local_5c) {\n            if (iVar5 == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = iVar5 * 2;\n              sVar4 = (long)local_5c << 2;\n            }\n            __ptr = realloc(__ptr,sVar4);\n          }\n          lVar2 = (long)iVar5;\n          iVar5 = iVar5 + 1;\n          *(undefined4 *)((long)__ptr + lVar2 * 4) = 1;\n        }\n        pcVar3 = pcVar3 + 1;\n        local_43[0] = '\\0';\n        if (__dest + (__n & 0xffffffff) + 1 == pcVar3) goto LAB_001015f4;\n      }\n      sVar4 = strlen(local_43);\n      if (sVar4 != 2) {\n        local_43[sVar4] = cVar1;\n        local_43[sVar4 + 1] = '\\0';\n      }\n      pcVar3 = pcVar3 + 1;\n    } while (__dest + (__n & 0xffffffff) + 1 != pcVar3);\n  }\nLAB_001015f4:\n  free(__dest);\n  *param_2 = iVar5;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return __ptr;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 18,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  size_t sVar3;\n  int local_18;\n  int local_14;\n  \n  local_18 = 0;\n  sVar2 = strlen(param_1);\n  sVar3 = strlen(param_2);\n  if ((int)sVar2 == 0) {\n    local_18 = 0;\n  }\n  else {\n    for (local_14 = 0; local_14 <= (int)sVar2 - (int)sVar3; local_14 = local_14 + 1) {\n      iVar1 = strncmp(param_1 + local_14,param_2,(long)(int)sVar3);\n      if (iVar1 == 0) {\n        local_18 = local_18 + 1;\n      }\n    }\n  }\n  return local_18;\n}"
    },
    {
        "task_id": 18,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  ulong uVar4;\n  long lVar5;\n  uint uVar6;\n  char *pcVar7;\n  \n  uVar4 = 0xffffffffffffffff;\n  pcVar7 = param_1;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *pcVar7;\n    pcVar7 = pcVar7 + 1;\n  } while (cVar1 != '\\0');\n  iVar2 = (int)(~uVar4 - 1);\n  uVar4 = ~uVar4 - 1 & 0xffffffff;\n  if (iVar2 != 0) {\n    lVar5 = -1;\n    pcVar7 = param_2;\n    do {\n      if (lVar5 == 0) break;\n      lVar5 = lVar5 + -1;\n      cVar1 = *pcVar7;\n      pcVar7 = pcVar7 + 1;\n    } while (cVar1 != '\\0');\n    iVar3 = ~(uint)lVar5 - 1;\n    uVar6 = iVar2 - iVar3;\n    if ((int)uVar6 < 0) {\n      uVar4 = 0;\n    }\n    else {\n      pcVar7 = param_1 + (ulong)uVar6 + 1;\n      uVar4 = 0;\n      do {\n        iVar2 = strncmp(param_1,param_2,(long)iVar3);\n        uVar4 = (ulong)((int)uVar4 + (uint)(iVar2 == 0));\n        param_1 = param_1 + 1;\n      } while (param_1 != pcVar7);\n    }\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 18,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1,char *param_2)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  size_t sVar3;\n  int iVar4;\n  ulong uVar5;\n  \n  sVar2 = strlen(param_1);\n  uVar5 = sVar2 & 0xffffffff;\n  if ((int)sVar2 != 0) {\n    sVar3 = strlen(param_2);\n    iVar4 = (int)sVar2 - (int)sVar3;\n    if (iVar4 < 0) {\n      uVar5 = 0;\n    }\n    else {\n      uVar5 = 0;\n      pcVar1 = param_1 + (long)iVar4 + 1;\n      do {\n        iVar4 = strncmp(param_1,param_2,(long)(int)sVar3);\n        uVar5 = (ulong)((int)uVar5 + (uint)(iVar4 == 0));\n        param_1 = param_1 + 1;\n      } while (param_1 != pcVar1);\n    }\n  }\n  return uVar5;\n}"
    },
    {
        "task_id": 18,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1,char *param_2)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  size_t sVar3;\n  int iVar4;\n  ulong uVar5;\n  \n  sVar2 = strlen(param_1);\n  uVar5 = sVar2 & 0xffffffff;\n  if ((int)sVar2 != 0) {\n    sVar3 = strlen(param_2);\n    iVar4 = (int)sVar2 - (int)sVar3;\n    if (iVar4 < 0) {\n      uVar5 = 0;\n    }\n    else {\n      uVar5 = 0;\n      pcVar1 = param_1 + (long)iVar4 + 1;\n      do {\n        iVar4 = strncmp(param_1,param_2,(long)(int)sVar3);\n        uVar5 = (ulong)((int)uVar5 + (uint)(iVar4 == 0));\n        param_1 = param_1 + 1;\n      } while (param_1 != pcVar1);\n    }\n  }\n  return uVar5;\n}"
    },
    {
        "task_id": 19,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long in_FS_OFFSET;\n  int local_a8;\n  int local_a4;\n  int local_a0;\n  int local_9c;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined8 local_88;\n  undefined8 local_80;\n  undefined8 local_78;\n  char *local_68 [10];\n  char local_16 [6];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_98 = 0;\n  local_90 = 0;\n  local_88 = 0;\n  local_80 = 0;\n  local_78 = 0;\n  local_68[0] = \"zero\";\n  local_68[1] = &DAT_0010200d;\n  local_68[2] = &DAT_00102011;\n  local_68[3] = \"three\";\n  local_68[4] = &DAT_0010201b;\n  local_68[5] = &DAT_00102020;\n  local_68[6] = &DAT_00102025;\n  local_68[7] = \"seven\";\n  local_68[8] = \"eight\";\n  local_68[9] = &DAT_00102035;\n  local_a8 = 0;\n  cVar1 = *param_1;\n  do {\n    if (cVar1 == '\\0') {\n      for (local_a4 = 0; local_a4 < 10; local_a4 = local_a4 + 1) {\n        for (local_a0 = 0; local_a0 < *(int *)((long)&local_98 + (long)local_a4 * 4);\n            local_a0 = local_a0 + 1) {\n          for (local_9c = 0; local_68[local_a4][local_9c] != '\\0'; local_9c = local_9c + 1) {\n            out_2502[local_a8] = local_68[local_a4][local_9c];\n            local_a8 = local_a8 + 1;\n          }\n          out_2502[local_a8] = 0x20;\n          local_a8 = local_a8 + 1;\n        }\n      }\n      if (local_a8 < 1) {\n        out_2502[0] = 0;\n      }\n      else {\n        out_2502[local_a8 + -1] = 0;\n      }\n      if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return out_2502;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    for (local_a4 = 0; (param_1[local_a4] != ' ' && (param_1[local_a4] != '\\0'));\n        local_a4 = local_a4 + 1) {\n      local_16[local_a4] = param_1[local_a4];\n    }\n    local_16[local_a4] = '\\0';\n    for (local_a0 = 0; local_a0 < 10; local_a0 = local_a0 + 1) {\n      iVar2 = strcmp(local_16,local_68[local_a0]);\n      if (iVar2 == 0) {\n        *(int *)((long)&local_98 + (long)local_a0 * 4) =\n             *(int *)((long)&local_98 + (long)local_a0 * 4) + 1;\n        break;\n      }\n    }\n    param_1 = param_1 + (long)local_a4 + 1;\n    cVar1 = param_1[-1];\n  } while( true );\n}"
    },
    {
        "task_id": 19,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(byte *param_1)\n\n{\n  int *piVar1;\n  char cVar2;\n  char cVar3;\n  int iVar4;\n  char *pcVar5;\n  int iVar6;\n  int iVar7;\n  byte bVar8;\n  long lVar9;\n  int iVar10;\n  long lVar11;\n  long in_FS_OFFSET;\n  undefined8 local_c8;\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  char *local_98 [10];\n  byte local_47 [7];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_c8 = 0;\n  local_c0 = 0;\n  local_b8 = 0;\n  local_b0 = 0;\n  local_a8 = 0;\n  local_98[0] = \"zero\";\n  local_98[1] = &DAT_00102009;\n  local_98[2] = &DAT_0010200d;\n  local_98[3] = \"three\";\n  local_98[4] = &DAT_00102017;\n  local_98[5] = &DAT_0010201c;\n  local_98[6] = &DAT_00102021;\n  local_98[7] = \"seven\";\n  local_98[8] = \"eight\";\n  local_98[9] = \"nine\";\n  if (*param_1 != 0) {\n    do {\n      bVar8 = *param_1;\n      if ((bVar8 & 0xdf) == 0) {\n        iVar6 = 0;\n        lVar11 = 0;\n      }\n      else {\n        lVar9 = 1;\n        do {\n          lVar11 = lVar9;\n          local_47[lVar11] = bVar8;\n          iVar6 = (int)lVar11;\n          bVar8 = param_1[lVar11];\n          lVar9 = lVar11 + 1;\n        } while ((bVar8 & 0xdf) != 0);\n      }\n      local_47[(long)iVar6 + 1] = 0;\n      lVar9 = 0;\n      do {\n        iVar6 = strcmp((char *)(local_47 + 1),local_98[lVar9]);\n        if (iVar6 == 0) {\n          piVar1 = (int *)((long)&local_c8 + (long)(int)lVar9 * 4);\n          *piVar1 = *piVar1 + 1;\n          break;\n        }\n        lVar9 = lVar9 + 1;\n      } while (lVar9 != 10);\n      param_1 = param_1 + lVar11 + 1;\n    } while (param_1[-1] != 0);\n  }\n  lVar11 = 0;\n  iVar6 = 0;\n  do {\n    iVar4 = *(int *)((long)&local_c8 + lVar11 * 4);\n    if (0 < iVar4) {\n      pcVar5 = local_98[lVar11];\n      cVar3 = *pcVar5;\n      iVar10 = 0;\n      do {\n        lVar9 = (long)(iVar6 + 1);\n        cVar2 = cVar3;\n        iVar7 = iVar6;\n        while (cVar2 != '\\0') {\n          (&DAT_0010403f)[lVar9] = cVar2;\n          iVar7 = (int)lVar9;\n          lVar9 = lVar9 + 1;\n          cVar2 = pcVar5[lVar9 + (-1 - (long)iVar6)];\n        }\n        iVar6 = iVar7 + 1;\n        (&out_2763)[iVar7] = 0x20;\n        iVar10 = iVar10 + 1;\n      } while (iVar10 != iVar4);\n    }\n    lVar11 = lVar11 + 1;\n  } while (lVar11 != 10);\n  if (iVar6 < 1) {\n    out_2763 = 0;\n  }\n  else {\n    (&out_2763)[iVar6 + -1] = 0;\n  }\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return &out_2763;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 19,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(byte *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  long lVar4;\n  byte bVar5;\n  char cVar6;\n  int iVar7;\n  char *pcVar8;\n  long lVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  char *local_d0;\n  undefined local_c8 [4];\n  int aiStack_c4 [3];\n  undefined local_b8 [16];\n  undefined8 local_a8;\n  char *local_98 [10];\n  byte local_47 [7];\n  long local_40;\n  \n  local_c8 = (undefined  [4])0x0;\n  bVar5 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_98[0] = \"zero\";\n  local_98[1] = &DAT_00102009;\n  local_98[2] = &DAT_0010200d;\n  local_98[3] = \"three\";\n  local_98[4] = &DAT_00102017;\n  local_98[5] = &DAT_0010201c;\n  local_98[6] = &DAT_00102021;\n  local_98[7] = \"seven\";\n  local_98[8] = \"eight\";\n  local_a8 = 0;\n  local_98[9] = \"nine\";\n  _local_c8 = (undefined  [16])0x0;\n  local_b8 = (undefined  [16])0x0;\n  if (bVar5 == 0) {\nLAB_0010145c:\n    iVar7 = 0;\n    lVar3 = 0;\n    iVar2 = (int)local_c8;\n    while( true ) {\n      if (0 < iVar2) {\n        pcVar8 = *(char **)((long)local_98 + lVar3 * 2);\n        iVar10 = 0;\n        cVar1 = *pcVar8;\n        do {\n          if (cVar1 != '\\0') {\n            lVar9 = (long)iVar7;\n            lVar4 = (long)(iVar7 + 1);\n            cVar6 = cVar1;\n            do {\n              (&DAT_0010403f)[lVar4] = cVar6;\n              iVar7 = (int)lVar4;\n              lVar4 = lVar4 + 1;\n              cVar6 = pcVar8[lVar4 + (-1 - lVar9)];\n            } while (cVar6 != '\\0');\n          }\n          iVar10 = iVar10 + 1;\n          (&out_2763)[iVar7] = 0x20;\n          iVar7 = iVar7 + 1;\n        } while (iVar10 != iVar2);\n      }\n      if (lVar3 + 4 == 0x28) break;\n      iVar2 = *(int *)(local_c8 + lVar3 + 4);\n      lVar3 = lVar3 + 4;\n    }\n    if (iVar7 == 0) {\n      out_2763 = 0;\n    }\n    else {\n      (&out_2763)[iVar7 + -1] = 0;\n    }\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return &out_2763;\n    }\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  local_d0 = \"zero\";\n  if ((bVar5 & 0xdf) == 0) goto LAB_0010143f;\nLAB_001013d8:\n  lVar3 = 1;\n  do {\n    local_47[lVar3] = bVar5;\n    bVar5 = param_1[lVar3];\n    lVar4 = (long)(int)lVar3;\n    lVar3 = lVar3 + 1;\n  } while ((bVar5 & 0xdf) != 0);\n  do {\n    local_47[lVar4 + 1] = 0;\n    lVar4 = 0;\n    pcVar8 = local_d0;\n    while( true ) {\n      iVar2 = strcmp((char *)(local_47 + 1),pcVar8);\n      if (iVar2 == 0) break;\n      lVar4 = lVar4 + 1;\n      if (lVar4 == 10) {\n        bVar5 = param_1[lVar3 + -1];\n        goto joined_r0x00101455;\n      }\n      pcVar8 = local_98[lVar4];\n    }\n    *(int *)(local_c8 + (long)(int)lVar4 * 4) = *(int *)(local_c8 + (long)(int)lVar4 * 4) + 1;\n    bVar5 = param_1[lVar3 + -1];\njoined_r0x00101455:\n    if (bVar5 == 0) {\n      goto LAB_0010145c;\n    }\n    param_1 = param_1 + lVar3;\n    bVar5 = *param_1;\n    if ((bVar5 & 0xdf) != 0) goto LAB_001013d8;\nLAB_0010143f:\n    lVar3 = 1;\n    lVar4 = 0;\n  } while( true );\n}"
    },
    {
        "task_id": 19,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(byte *param_1)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  char cVar4;\n  int iVar5;\n  char *pcVar6;\n  int iVar7;\n  char cVar8;\n  long lVar9;\n  long lVar10;\n  int iVar11;\n  long lVar12;\n  long in_FS_OFFSET;\n  undefined local_c8 [8];\n  undefined8 uStack_c0;\n  undefined local_b8 [4];\n  undefined auStack_b4 [4];\n  undefined8 uStack_b0;\n  undefined8 local_a8;\n  char *local_98 [10];\n  byte local_46 [6];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  _local_c8 = (undefined  [16])0x0;\n  _local_b8 = (undefined  [16])0x0;\n  local_a8 = 0;\n  local_98[0] = \"zero\";\n  local_98[1] = &DAT_00102009;\n  local_98[2] = &DAT_0010200d;\n  local_98[3] = \"three\";\n  local_98[4] = &DAT_00102017;\n  local_98[5] = &DAT_0010201c;\n  bVar1 = *param_1;\n  local_98[6] = &DAT_00102021;\n  local_98[7] = \"seven\";\n  local_98[8] = \"eight\";\n  local_98[9] = \"nine\";\n  if (bVar1 == 0) {\nLAB_001015e4:\n    lVar9 = 0;\n    iVar7 = 0;\n    do {\n      iVar5 = *(int *)(local_c8 + lVar9 * 4);\n      if (0 < iVar5) {\n        pcVar6 = local_98[lVar9];\n        iVar11 = 0;\n        cVar4 = *pcVar6;\n        do {\n          if (cVar4 != '\\0') {\n            lVar10 = (long)iVar7;\n            lVar12 = (long)(iVar7 + 1);\n            cVar8 = cVar4;\n            do {\n              (&DAT_0010403f)[lVar12] = cVar8;\n              iVar7 = (int)lVar12;\n              lVar12 = lVar12 + 1;\n              cVar8 = pcVar6[lVar12 + (-1 - lVar10)];\n            } while (cVar8 != '\\0');\n          }\n          iVar11 = iVar11 + 1;\n          (&out_2763)[iVar7] = 0x20;\n          iVar7 = iVar7 + 1;\n        } while (iVar5 != iVar11);\n      }\n      lVar9 = lVar9 + 1;\n    } while (lVar9 != 10);\n    if (iVar7 == 0) {\n      out_2763 = 0;\n    }\n    else {\n      (&out_2763)[iVar7 + -1] = 0;\n    }\n    if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    return &out_2763;\n  }\n  do {\n    if ((bVar1 & 0xdf) == 0) {\n      lVar12 = 1;\n      lVar9 = 0;\n    }\n    else {\n      bVar2 = param_1[1];\n      if ((bVar2 & 0xdf) == 0) {\n        lVar9 = 1;\n        lVar12 = 1;\n      }\n      else {\n        bVar3 = param_1[2];\n        local_46[1] = bVar2;\n        if ((bVar3 & 0xdf) == 0) {\n          lVar9 = 2;\n          lVar12 = 2;\n        }\n        else {\n          bVar2 = param_1[3];\n          local_46[2] = bVar3;\n          if ((bVar2 & 0xdf) == 0) {\n            lVar9 = 3;\n            lVar12 = 3;\n          }\n          else {\n            bVar3 = param_1[4];\n            local_46[3] = bVar2;\n            if ((bVar3 & 0xdf) == 0) {\n              lVar9 = 4;\n              lVar12 = 4;\n            }\n            else {\n              local_46[4] = bVar3;\n              if ((param_1[5] & 0xdf) == 0) {\n                lVar9 = 5;\n                lVar12 = 5;\n              }\n              else {\n                lVar12 = 6;\n                lVar9 = 6;\n                local_46[5] = param_1[5];\n              }\n            }\n          }\n        }\n      }\n      lVar12 = lVar12 + 1;\n      local_46[0] = bVar1;\n    }\n    local_46[lVar9] = 0;\n    iVar7 = strcmp((char *)local_46,\"zero\");\n    if (iVar7 == 0) {\nLAB_001015d4:\n      *(int *)(local_c8 + (long)iVar7 * 4) = *(int *)(local_c8 + (long)iVar7 * 4) + 1;\nLAB_001015db:\n      bVar1 = param_1[lVar12 + -1];\n    }\n    else {\n      iVar7 = strcmp((char *)local_46,\"one\");\n      if (iVar7 == 0) {\n        local_c8._4_4_ = local_c8._4_4_ + 1;\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"two\");\n      if (iVar7 == 0) {\n        uStack_c0._0_4_ = (int)uStack_c0 + 1;\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"three\");\n      if (iVar7 == 0) {\n        uStack_c0._4_4_ = uStack_c0._4_4_ + 1;\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"four\");\n      if (iVar7 == 0) {\n        local_b8 = (undefined  [4])((int)local_b8 + 1);\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"five\");\n      if (iVar7 == 0) {\n        auStack_b4 = (undefined  [4])((int)auStack_b4 + 1);\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"six\");\n      if (iVar7 == 0) {\n        uStack_b0._0_4_ = (int)uStack_b0 + 1;\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"seven\");\n      if (iVar7 == 0) {\n        uStack_b0._4_4_ = uStack_b0._4_4_ + 1;\n        goto LAB_001015db;\n      }\n      iVar7 = strcmp((char *)local_46,\"eight\");\n      if (iVar7 == 0) {\n        iVar7 = 8;\n        goto LAB_001015d4;\n      }\n      iVar7 = strcmp((char *)local_46,\"nine\");\n      if (iVar7 == 0) {\n        local_a8 = CONCAT44(local_a8._4_4_ + 1,(undefined4)local_a8);\n        goto LAB_001015db;\n      }\n      bVar1 = param_1[lVar12 + -1];\n    }\n    if (bVar1 == 0) goto LAB_001015e4;\n    param_1 = param_1 + lVar12;\n    bVar1 = *param_1;\n  } while( true );\n}"
    },
    {
        "task_id": 20,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,float *param_3)\n\n{\n  float fVar1;\n  float local_1c;\n  int local_18;\n  int local_14;\n  \n  local_1c = DAT_001020c0;\n  *param_3 = *param_1;\n  param_3[1] = param_1[1];\n  for (local_18 = 0; local_14 = local_18, local_18 < param_2; local_18 = local_18 + 1) {\n    while (local_14 = local_14 + 1, local_14 < param_2) {\n      fVar1 = (float)((uint)(param_1[local_18] - param_1[local_14]) & DAT_001020d0);\n      if (fVar1 < local_1c) {\n        *param_3 = param_1[local_18];\n        param_3[1] = param_1[local_14];\n        local_1c = fVar1;\n      }\n    }\n  }\n  if (param_3[1] < *param_3) {\n    fVar1 = *param_3;\n    *param_3 = param_3[1];\n    param_3[1] = fVar1;\n  }\n  return;\n}"
    },
    {
        "task_id": 20,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,float *param_3)\n\n{\n  uint uVar1;\n  long lVar2;\n  float *pfVar3;\n  long lVar4;\n  float fVar5;\n  float fVar6;\n  \n  *param_3 = *param_1;\n  param_3[1] = param_1[1];\n  uVar1 = DAT_001020e0;\n  if (0 < param_2) {\n    pfVar3 = param_1;\n    fVar6 = DAT_001020b4;\n    for (lVar4 = 1; lVar2 = lVar4, lVar4 != (ulong)(param_2 - 1) + 1; lVar4 = lVar4 + 1) {\n      do {\n        fVar5 = (float)((uint)(*pfVar3 - param_1[lVar2]) & uVar1);\n        if (fVar5 < fVar6) {\n          *param_3 = *pfVar3;\n          param_3[1] = param_1[lVar2];\n          fVar6 = fVar5;\n        }\n        lVar2 = lVar2 + 1;\n      } while ((int)lVar2 < param_2);\n      pfVar3 = pfVar3 + 1;\n    }\n  }\n  fVar6 = *param_3;\n  if (param_3[1] < fVar6) {\n    *param_3 = param_3[1];\n    param_3[1] = fVar6;\n  }\n  return;\n}"
    },
    {
        "task_id": 20,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,float *param_3)\n\n{\n  uint uVar1;\n  float *pfVar2;\n  long lVar3;\n  long lVar4;\n  long lVar5;\n  float fVar6;\n  float fVar7;\n  \n  fVar7 = *param_1;\n  *param_3 = fVar7;\n  fVar6 = param_1[1];\n  param_3[1] = fVar6;\n  uVar1 = DAT_001020e0;\n  if (0 < param_2) {\n    lVar3 = 1;\n    lVar5 = (ulong)(param_2 - 1) + 1;\n    fVar7 = DAT_001020b4;\n    lVar4 = lVar3;\n    pfVar2 = param_1;\n    if (lVar5 != 1) {\n      do {\n        do {\n          fVar6 = (float)((uint)(*pfVar2 - param_1[lVar3]) & uVar1);\n          if (fVar6 < fVar7) {\n            *param_3 = *pfVar2;\n            param_3[1] = param_1[lVar3];\n            fVar7 = fVar6;\n          }\n          lVar3 = lVar3 + 1;\n        } while ((int)lVar3 < param_2);\n        lVar3 = lVar4 + 1;\n        pfVar2 = pfVar2 + 1;\n        lVar4 = lVar3;\n      } while (lVar5 != lVar3);\n    }\n    fVar7 = *param_3;\n    fVar6 = param_3[1];\n  }\n  if (fVar6 < fVar7) {\n    *param_3 = fVar6;\n    param_3[1] = fVar7;\n  }\n  return;\n}"
    },
    {
        "task_id": 20,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,float *param_3)\n\n{\n  uint uVar1;\n  float *pfVar2;\n  long lVar3;\n  long lVar4;\n  float fVar5;\n  float fVar6;\n  \n  fVar6 = *param_1;\n  *param_3 = fVar6;\n  fVar5 = param_1[1];\n  param_3[1] = fVar5;\n  uVar1 = DAT_001020e0;\n  if (0 < param_2) {\n    if (param_2 != 1) {\n      lVar3 = 1;\n      fVar6 = DAT_001020b4;\n      lVar4 = lVar3;\n      pfVar2 = param_1;\n      do {\n        do {\n          fVar5 = (float)((uint)(*pfVar2 - param_1[lVar3]) & uVar1);\n          if (fVar5 < fVar6) {\n            *param_3 = *pfVar2;\n            param_3[1] = param_1[lVar3];\n            fVar6 = fVar5;\n          }\n          lVar3 = lVar3 + 1;\n        } while ((int)lVar3 < param_2);\n        lVar3 = lVar4 + 1;\n        pfVar2 = pfVar2 + 1;\n        lVar4 = lVar3;\n      } while ((ulong)(param_2 - 2) + 2 != lVar3);\n    }\n    fVar6 = *param_3;\n    fVar5 = param_3[1];\n  }\n  if (fVar5 < fVar6) {\n    *param_3 = fVar5;\n    param_3[1] = fVar6;\n  }\n  return;\n}"
    },
    {
        "task_id": 21,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2)\n\n{\n  float local_18;\n  float local_14;\n  int local_10;\n  int local_c;\n  \n  local_18 = *param_1;\n  local_14 = *param_1;\n  for (local_10 = 1; local_10 < param_2; local_10 = local_10 + 1) {\n    if (param_1[local_10] < local_18) {\n      local_18 = param_1[local_10];\n    }\n    if (local_14 < param_1[local_10]) {\n      local_14 = param_1[local_10];\n    }\n  }\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    param_1[local_c] = (param_1[local_c] - local_18) / (local_14 - local_18);\n  }\n  return;\n}"
    },
    {
        "task_id": 21,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2)\n\n{\n  float fVar1;\n  float fVar2;\n  float *pfVar3;\n  long lVar4;\n  float fVar5;\n  float fVar6;\n  \n  fVar5 = *param_1;\n  if (1 < param_2) {\n    pfVar3 = param_1 + 1;\n    fVar6 = fVar5;\n    do {\n      fVar1 = *pfVar3;\n      fVar2 = fVar1;\n      if (fVar6 <= fVar1) {\n        fVar2 = fVar6;\n      }\n      fVar6 = fVar2;\n      if (fVar1 <= fVar5) {\n        fVar1 = fVar5;\n      }\n      fVar5 = fVar1;\n      pfVar3 = pfVar3 + 1;\n    } while (pfVar3 != param_1 + (ulong)(param_2 - 2) + 2);\n    lVar4 = 0;\n    do {\n      param_1[lVar4] = (param_1[lVar4] - fVar6) / (fVar5 - fVar6);\n      lVar4 = lVar4 + 1;\n    } while ((int)lVar4 < param_2);\n    return;\n  }\n  if (param_2 == 1) {\n    *param_1 = (*param_1 - fVar5) / (fVar5 - fVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 21,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2)\n\n{\n  float fVar1;\n  float fVar2;\n  float *pfVar3;\n  long lVar4;\n  float fVar5;\n  float fVar6;\n  float fVar7;\n  \n  fVar5 = *param_1;\n  fVar6 = fVar5;\n  fVar7 = fVar5;\n  if (param_2 < 2) {\n    if (param_2 != 1) {\n      return;\n    }\n  }\n  else {\n    pfVar3 = param_1 + 1;\n    do {\n      fVar1 = *pfVar3;\n      pfVar3 = pfVar3 + 1;\n      fVar2 = fVar1;\n      if (fVar1 <= fVar6) {\n        fVar2 = fVar6;\n      }\n      fVar6 = fVar2;\n      if (fVar7 <= fVar1) {\n        fVar1 = fVar7;\n      }\n      fVar7 = fVar1;\n    } while (pfVar3 != param_1 + (ulong)(param_2 - 2) + 2);\n  }\n  lVar4 = 0;\n  while( true ) {\n    param_1[lVar4] = (fVar5 - fVar7) / (fVar6 - fVar7);\n    lVar4 = lVar4 + 1;\n    if (param_2 <= (int)lVar4) break;\n    fVar5 = param_1[lVar4];\n  }\n  return;\n}"
    },
    {
        "task_id": 21,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined (*param_1) [16],uint param_2)\n\n{\n  float fVar1;\n  float fVar2;\n  int iVar3;\n  float *pfVar4;\n  undefined (*pauVar5) [16];\n  undefined (*pauVar6) [16];\n  uint uVar7;\n  undefined auVar8 [16];\n  undefined auVar9 [16];\n  float fVar10;\n  float fVar11;\n  \n  fVar10 = *(float *)*param_1;\n  if ((int)param_2 < 2) {\n    if (param_2 != 1) {\n      return;\n    }\n    *(float *)*param_1 = (fVar10 - fVar10) / (fVar10 - fVar10);\n    return;\n  }\n  pfVar4 = (float *)(*param_1 + 4);\n  fVar11 = fVar10;\n  do {\n    fVar1 = *pfVar4;\n    pfVar4 = pfVar4 + 1;\n    fVar2 = fVar1;\n    if (fVar1 <= fVar11) {\n      fVar2 = fVar11;\n    }\n    fVar11 = fVar2;\n    if (fVar10 <= fVar1) {\n      fVar1 = fVar10;\n    }\n    fVar10 = fVar1;\n  } while (pfVar4 != (float *)(*param_1 + (ulong)(param_2 - 2) * 4 + 8));\n  fVar11 = fVar11 - fVar10;\n  uVar7 = 1;\n  if (0 < (int)param_2) {\n    uVar7 = param_2;\n  }\n  if ((int)param_2 < 4) {\n    iVar3 = 1;\n    *(float *)*param_1 = (*(float *)*param_1 - fVar10) / fVar11;\n  }\n  else {\n    pauVar5 = param_1;\n    do {\n      pauVar6 = pauVar5 + 1;\n      auVar8._0_4_ = *(float *)*pauVar5 - fVar10;\n      auVar8._4_4_ = *(float *)(*pauVar5 + 4) - fVar10;\n      auVar8._8_4_ = *(float *)(*pauVar5 + 8) - fVar10;\n      auVar8._12_4_ = *(float *)(*pauVar5 + 0xc) - fVar10;\n      auVar9._4_4_ = fVar11;\n      auVar9._0_4_ = fVar11;\n      auVar9._8_4_ = fVar11;\n      auVar9._12_4_ = fVar11;\n      auVar9 = divps(auVar8,auVar9);\n      *pauVar5 = auVar9;\n      pauVar5 = pauVar6;\n    } while (pauVar6 != param_1 + (uVar7 >> 2));\n    if ((uVar7 & 3) == 0) {\n      return;\n    }\n    iVar3 = (uVar7 & 0xfffffffc) + 1;\n    *(float *)(*param_1 + (long)(int)(uVar7 & 0xfffffffc) * 4) =\n         (*(float *)(*param_1 + (long)(int)(uVar7 & 0xfffffffc) * 4) - fVar10) / fVar11;\n    if ((int)param_2 <= iVar3) {\n      return;\n    }\n  }\n  *(float *)(*param_1 + (long)iVar3 * 4) =\n       (*(float *)(*param_1 + (long)iVar3 * 4) - fVar10) / fVar11;\n  if ((int)param_2 <= iVar3 + 1) {\n    return;\n  }\n  *(float *)(*param_1 + (long)(iVar3 + 1) * 4) =\n       (*(float *)(*param_1 + (long)(iVar3 + 1) * 4) - fVar10) / fVar11;\n  return;\n}"
    },
    {
        "task_id": 22,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1,int *param_2)\n\n{\n  ushort **ppuVar1;\n  long lVar2;\n  long in_FS_OFFSET;\n  int local_28;\n  char *local_20;\n  char *local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_28 = 0;\n  local_18 = param_1;\n  while (*local_18 != '\\0') {\n    while (((*local_18 != '\\0' && (ppuVar1 = __ctype_b_loc(), ((*ppuVar1)[*local_18] & 0x800) == 0))\n           && (*local_18 != '-'))) {\n      local_18 = local_18 + 1;\n    }\n    if (*local_18 == '\\0') break;\n    lVar2 = strtol(local_18,&local_20,10);\n    if ((local_18 == local_20) || ((*local_20 != ',' && (*local_20 != '\\0')))) {\n      for (; (*local_20 != '\\0' && (*local_20 != ',')); local_20 = local_20 + 1) {\n      }\n    }\n    else {\n      *(int *)(out_3117 + (long)local_28 * 4) = (int)lVar2;\n      local_28 = local_28 + 1;\n    }\n    local_18 = local_20;\n  }\n  *param_2 = local_28;\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return out_3117;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 22,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined4 * func0(char *param_1,int *param_2)\n\n{\n  ushort **ppuVar1;\n  long lVar2;\n  char cVar3;\n  int iVar4;\n  long in_FS_OFFSET;\n  char *local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  cVar3 = *param_1;\n  iVar4 = 0;\n  if (cVar3 != '\\0') {\n    ppuVar1 = __ctype_b_loc();\n    iVar4 = 0;\n    do {\n      if (((*(byte *)((long)*ppuVar1 + (long)cVar3 * 2 + 1) & 8) == 0) && (cVar3 != '-')) {\n        cVar3 = param_1[1];\n        param_1 = param_1 + 1;\n      }\n      else {\n        if (cVar3 == '\\0') break;\n        lVar2 = strtol(param_1,&local_48,10);\n        if (local_48 == param_1) {\n          cVar3 = *param_1;\n          if (cVar3 != '\\0') goto joined_r0x001012aa;\n        }\n        else if ((*local_48 == ',') || (*local_48 == '\\0')) {\n          (&out_3498)[iVar4] = (int)lVar2;\n          iVar4 = iVar4 + 1;\n        }\n        else {\n          do {\n            local_48 = local_48 + 1;\n            cVar3 = *local_48;\n            if (cVar3 == '\\0') break;\njoined_r0x001012aa:\n          } while (cVar3 != ',');\n        }\n        cVar3 = *local_48;\n        param_1 = local_48;\n      }\n    } while (cVar3 != '\\0');\n  }\n  *param_2 = iVar4;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return &out_3498;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 22,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined4 * func0(char *param_1,int *param_2)\n\n{\n  ushort **ppuVar1;\n  long lVar2;\n  ushort *puVar3;\n  long lVar4;\n  char cVar5;\n  int iVar6;\n  long in_FS_OFFSET;\n  char *local_48;\n  long local_40;\n  \n  iVar6 = 0;\n  cVar5 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (cVar5 != '\\0') {\n    iVar6 = 0;\n    ppuVar1 = __ctype_b_loc();\n    puVar3 = *ppuVar1;\n    do {\n      while (((*(byte *)((long)puVar3 + (long)cVar5 * 2 + 1) & 8) != 0 || (cVar5 == '-'))) {\n        lVar2 = strtol(param_1,&local_48,10);\n        if (local_48 == param_1) {\n          cVar5 = *param_1;\n          if ((cVar5 != ',') && (cVar5 != '\\0')) goto LAB_00101445;\n        }\n        else if ((*local_48 == ',') || (*local_48 == '\\0')) {\n          lVar4 = (long)iVar6;\n          iVar6 = iVar6 + 1;\n          (&out_3498)[lVar4] = (int)lVar2;\n          cVar5 = *local_48;\n          param_1 = local_48;\n        }\n        else {\nLAB_00101445:\n          do {\n            param_1 = local_48 + 1;\n            cVar5 = *param_1;\n            local_48 = param_1;\n            if (cVar5 == '\\0') goto LAB_00101458;\n          } while (cVar5 != ',');\n        }\n        if (cVar5 == '\\0') goto LAB_00101458;\n        puVar3 = *ppuVar1;\n      }\n      cVar5 = param_1[1];\n      param_1 = param_1 + 1;\n    } while (cVar5 != '\\0');\n  }\nLAB_00101458:\n  *param_2 = iVar6;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return &out_3498;\n}"
    },
    {
        "task_id": 22,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined4 * func0(char *param_1,int *param_2)\n\n{\n  ushort **ppuVar1;\n  long lVar2;\n  ushort *puVar3;\n  long lVar4;\n  char cVar5;\n  int iVar6;\n  long in_FS_OFFSET;\n  char *local_48;\n  long local_40;\n  \n  iVar6 = 0;\n  cVar5 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (cVar5 != '\\0') {\n    iVar6 = 0;\n    ppuVar1 = __ctype_b_loc();\n    puVar3 = *ppuVar1;\n    do {\n      while (((*(byte *)((long)puVar3 + (long)cVar5 * 2 + 1) & 8) != 0 || (cVar5 == '-'))) {\n        lVar2 = strtol(param_1,&local_48,10);\n        if (local_48 == param_1) {\n          cVar5 = *param_1;\n          if ((cVar5 != ',') && (cVar5 != '\\0')) goto LAB_00101445;\n        }\n        else if ((*local_48 == ',') || (*local_48 == '\\0')) {\n          lVar4 = (long)iVar6;\n          iVar6 = iVar6 + 1;\n          (&out_3498)[lVar4] = (int)lVar2;\n          cVar5 = *local_48;\n          param_1 = local_48;\n        }\n        else {\nLAB_00101445:\n          do {\n            param_1 = local_48 + 1;\n            cVar5 = *param_1;\n            local_48 = param_1;\n            if (cVar5 == '\\0') goto LAB_00101458;\n          } while (cVar5 != ',');\n        }\n        if (cVar5 == '\\0') goto LAB_00101458;\n        puVar3 = *ppuVar1;\n      }\n      cVar5 = param_1[1];\n      param_1 = param_1 + 1;\n    } while (cVar5 != '\\0');\n  }\nLAB_00101458:\n  *param_2 = iVar6;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return &out_3498;\n}"
    },
    {
        "task_id": 23,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1)\n\n{\n  int local_c;\n  \n  for (local_c = 0; *(char *)(param_1 + local_c) != '\\0'; local_c = local_c + 1) {\n  }\n  return local_c;\n}"
    },
    {
        "task_id": 23,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  char *pcVar1;\n  ulong uVar2;\n  ulong uVar3;\n  \n  if (*param_1 == '\\0') {\n    uVar3 = 0;\n  }\n  else {\n    uVar2 = 1;\n    do {\n      uVar3 = uVar2 & 0xffffffff;\n      pcVar1 = param_1 + uVar2;\n      uVar2 = uVar2 + 1;\n    } while (*pcVar1 != '\\0');\n  }\n  return uVar3;\n}"
    },
    {
        "task_id": 23,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  char *pcVar1;\n  ulong uVar2;\n  ulong uVar3;\n  \n  if (*param_1 != '\\0') {\n    uVar2 = 1;\n    do {\n      uVar3 = uVar2 & 0xffffffff;\n      pcVar1 = param_1 + uVar2;\n      uVar2 = uVar2 + 1;\n    } while (*pcVar1 != '\\0');\n    return uVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 23,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  char *pcVar1;\n  ulong uVar2;\n  ulong uVar3;\n  \n  if (*param_1 != '\\0') {\n    uVar2 = 1;\n    do {\n      uVar3 = uVar2 & 0xffffffff;\n      pcVar1 = param_1 + uVar2;\n      uVar2 = uVar2 + 1;\n    } while (*pcVar1 != '\\0');\n    return uVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 24,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(int param_1,undefined8 param_2,ulong param_3)\n\n{\n  ulong uVar1;\n  undefined auVar2 [16];\n  int local_c;\n  \n  local_c = 2;\n  do {\n    if (param_1 < local_c * local_c) {\n      uVar1 = 1;\nLAB_00101187:\n      auVar2._8_8_ = param_3;\n      auVar2._0_8_ = uVar1;\n      return auVar2;\n    }\n    param_3 = (long)param_1 % (long)local_c & 0xffffffff;\n    if ((int)((long)param_1 % (long)local_c) == 0) {\n      uVar1 = (long)param_1 / (long)local_c & 0xffffffff;\n      param_3 = (long)param_1 % (long)local_c & 0xffffffff;\n      goto LAB_00101187;\n    }\n    local_c = local_c + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 24,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(uint param_1,undefined8 param_2,ulong param_3)\n\n{\n  int iVar1;\n  undefined auVar2 [16];\n  undefined auVar3 [16];\n  undefined auVar4 [16];\n  \n  if ((int)param_1 < 4) {\n    auVar4._8_8_ = param_3;\n    auVar4._0_8_ = 1;\n    return auVar4;\n  }\n  if ((param_1 & 1) == 0) {\n    iVar1 = 2;\n  }\n  else {\n    iVar1 = 2;\n    do {\n      iVar1 = iVar1 + 1;\n      if ((int)param_1 < iVar1 * iVar1) {\n        auVar3._8_8_ = param_3;\n        auVar3._0_8_ = 1;\n        return auVar3;\n      }\n      param_3 = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n    } while ((int)((long)(int)param_1 % (long)iVar1) != 0);\n  }\n  auVar2._0_8_ = (long)(int)param_1 / (long)iVar1 & 0xffffffff;\n  auVar2._8_8_ = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n  return auVar2;\n}"
    },
    {
        "task_id": 24,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(uint param_1,undefined8 param_2,ulong param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined auVar3 [16];\n  undefined auVar4 [16];\n  \n  if (3 < (int)param_1) {\n    iVar1 = 2;\n    uVar2 = param_1 & 1;\n    while( true ) {\n      if (uVar2 == 0) {\n        auVar4._0_8_ = (long)(int)param_1 / (long)iVar1 & 0xffffffff;\n        auVar4._8_8_ = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n        return auVar4;\n      }\n      iVar1 = iVar1 + 1;\n      if ((int)param_1 < iVar1 * iVar1) break;\n      param_3 = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n      uVar2 = (uint)((long)(int)param_1 % (long)iVar1);\n    }\n  }\n  auVar3._8_8_ = param_3;\n  auVar3._0_8_ = 1;\n  return auVar3;\n}"
    },
    {
        "task_id": 24,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(uint param_1,undefined8 param_2,ulong param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined auVar3 [16];\n  undefined auVar4 [16];\n  \n  if (3 < (int)param_1) {\n    iVar1 = 2;\n    uVar2 = param_1 & 1;\n    while( true ) {\n      if (uVar2 == 0) {\n        auVar4._0_8_ = (long)(int)param_1 / (long)iVar1 & 0xffffffff;\n        auVar4._8_8_ = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n        return auVar4;\n      }\n      iVar1 = iVar1 + 1;\n      if ((int)param_1 < iVar1 * iVar1) break;\n      param_3 = (long)(int)param_1 % (long)iVar1 & 0xffffffff;\n      uVar2 = (uint)((long)(int)param_1 % (long)iVar1);\n    }\n  }\n  auVar3._8_8_ = param_3;\n  auVar3._0_8_ = 1;\n  return auVar3;\n}"
    },
    {
        "task_id": 25,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1,int *param_2)\n\n{\n  int iVar1;\n  void *pvVar2;\n  int local_1c;\n  int local_14;\n  \n  pvVar2 = malloc(0x100);\n  *param_2 = 0;\n  local_1c = param_1;\n  for (local_14 = 2; local_14 * local_14 <= local_1c; local_14 = local_14 + 1) {\n    while (local_1c % local_14 == 0) {\n      local_1c = local_1c / local_14;\n      iVar1 = *param_2;\n      *param_2 = iVar1 + 1;\n      *(int *)((long)iVar1 * 4 + (long)pvVar2) = local_14;\n    }\n  }\n  if (1 < local_1c) {\n    iVar1 = *param_2;\n    *param_2 = iVar1 + 1;\n    *(int *)((long)iVar1 * 4 + (long)pvVar2) = local_1c;\n  }\n  return pvVar2;\n}"
    },
    {
        "task_id": 25,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1,int *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  long lVar5;\n  \n  pvVar3 = malloc(0x100);\n  *param_2 = 0;\n  iVar4 = 2;\n  if (3 < param_1) {\n    do {\n      if (param_1 % iVar4 == 0) {\n        lVar2 = (long)(*param_2 + 1);\n        do {\n          lVar5 = lVar2;\n          lVar1 = (long)param_1;\n          param_1 = (int)(lVar1 / (long)iVar4);\n          *(int *)((long)pvVar3 + lVar5 * 4 + -4) = iVar4;\n          lVar2 = lVar5 + 1;\n        } while ((int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                             lVar1 / (long)iVar4 & 0xffffffffU) % (long)iVar4) == 0);\n        *param_2 = (int)lVar5;\n      }\n      iVar4 = iVar4 + 1;\n    } while (iVar4 * iVar4 <= param_1);\n  }\n  if (1 < param_1) {\n    iVar4 = *param_2;\n    *param_2 = iVar4 + 1;\n    *(int *)((long)pvVar3 + (long)iVar4 * 4) = param_1;\n  }\n  return pvVar3;\n}"
    },
    {
        "task_id": 25,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1,int *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  long lVar5;\n  \n  pvVar3 = malloc(0x100);\n  *param_2 = 0;\n  iVar4 = 2;\n  if (3 < param_1) {\n    do {\n      if (param_1 % iVar4 == 0) {\n        lVar2 = (long)(*param_2 + 1);\n        do {\n          lVar5 = lVar2;\n          *(int *)((long)pvVar3 + lVar5 * 4 + -4) = iVar4;\n          lVar1 = (long)param_1;\n          param_1 = (int)(lVar1 / (long)iVar4);\n          lVar2 = lVar5 + 1;\n        } while ((int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                             lVar1 / (long)iVar4 & 0xffffffffU) % (long)iVar4) == 0);\n        *param_2 = (int)lVar5;\n      }\n      iVar4 = iVar4 + 1;\n    } while (iVar4 * iVar4 <= param_1);\n  }\n  if (1 < param_1) {\n    iVar4 = *param_2;\n    *(int *)((long)pvVar3 + (long)iVar4 * 4) = param_1;\n    *param_2 = iVar4 + 1;\n  }\n  return pvVar3;\n}"
    },
    {
        "task_id": 25,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1,int *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  long lVar5;\n  \n  pvVar3 = malloc(0x100);\n  *param_2 = 0;\n  iVar4 = 2;\n  if (3 < param_1) {\n    do {\n      if (param_1 % iVar4 == 0) {\n        lVar2 = (long)(*param_2 + 1);\n        do {\n          lVar5 = lVar2;\n          *(int *)((long)pvVar3 + lVar5 * 4 + -4) = iVar4;\n          lVar1 = (long)param_1;\n          param_1 = (int)(lVar1 / (long)iVar4);\n          lVar2 = lVar5 + 1;\n        } while ((int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                             lVar1 / (long)iVar4 & 0xffffffffU) % (long)iVar4) == 0);\n        *param_2 = (int)lVar5;\n      }\n      iVar4 = iVar4 + 1;\n    } while (iVar4 * iVar4 <= param_1);\n  }\n  if (1 < param_1) {\n    iVar4 = *param_2;\n    *(int *)((long)pvVar3 + (long)iVar4 * 4) = param_1;\n    *param_2 = iVar4 + 1;\n  }\n  return pvVar3;\n}"
    },
    {
        "task_id": 26,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,int *param_3)\n\n{\n  int iVar1;\n  bool bVar2;\n  void *pvVar3;\n  void *__ptr;\n  void *__ptr_00;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_40;\n  int local_38;\n  int local_34;\n  int local_2c;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  __ptr = calloc((long)param_2,4);\n  __ptr_00 = calloc((long)param_2,4);\n  local_54 = 0;\n  local_50 = 0;\n  local_4c = 0;\n  for (local_48 = 0; local_48 < param_2; local_48 = local_48 + 1) {\n    iVar1 = *(int *)(param_1 + (long)local_48 * 4);\n    bVar2 = false;\n    for (local_40 = 0; local_40 < local_50; local_40 = local_40 + 1) {\n      if (iVar1 == *(int *)((long)__ptr_00 + (long)local_40 * 4)) {\n        bVar2 = true;\n        break;\n      }\n    }\n    if (!bVar2) {\n      bVar2 = false;\n      for (local_38 = 0; local_38 < local_54; local_38 = local_38 + 1) {\n        if (iVar1 == *(int *)((long)__ptr + (long)local_38 * 4)) {\n          bVar2 = true;\n          break;\n        }\n      }\n      if (bVar2) {\n        *(int *)((long)local_50 * 4 + (long)__ptr_00) = iVar1;\n        local_50 = local_50 + 1;\n      }\n      else {\n        *(int *)((long)local_54 * 4 + (long)__ptr) = iVar1;\n        local_54 = local_54 + 1;\n      }\n    }\n  }\n  local_34 = 0;\n  do {\n    if (param_2 <= local_34) {\n      *param_3 = local_4c;\n      free(__ptr);\n      free(__ptr_00);\n      return pvVar3;\n    }\n    iVar1 = *(int *)(param_1 + (long)local_34 * 4);\n    bVar2 = false;\n    for (local_2c = 0; local_2c < local_50; local_2c = local_2c + 1) {\n      if (iVar1 == *(int *)((long)__ptr_00 + (long)local_2c * 4)) {\n        bVar2 = true;\n        break;\n      }\n    }\n    if (!bVar2) {\n      *(int *)((long)local_4c * 4 + (long)pvVar3) = iVar1;\n      local_4c = local_4c + 1;\n    }\n    local_34 = local_34 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 26,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  void *pvVar3;\n  int *__ptr;\n  int *__ptr_00;\n  int *piVar4;\n  int *piVar5;\n  size_t __nmemb;\n  int iVar6;\n  int iVar7;\n  \n  __nmemb = (size_t)param_2;\n  pvVar3 = malloc(__nmemb * 4);\n  __ptr = (int *)calloc(__nmemb,4);\n  __ptr_00 = (int *)calloc(__nmemb,4);\n  if (param_2 < 1) {\n    iVar7 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar6 = 0;\n    iVar7 = 0;\n    piVar4 = param_1;\n    do {\n      iVar2 = *piVar4;\n      if (0 < iVar6) {\n        piVar5 = __ptr_00;\n        do {\n          if (*piVar5 == iVar2) goto LAB_001012c5;\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr_00 + (ulong)(iVar6 - 1) + 1);\n      }\n      if (0 < iVar7) {\n        piVar5 = __ptr;\n        do {\n          if (*piVar5 == iVar2) {\n            __ptr_00[iVar6] = iVar2;\n            iVar6 = iVar6 + 1;\n            goto LAB_001012c5;\n          }\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr + (ulong)(iVar7 - 1) + 1);\n      }\n      __ptr[iVar7] = iVar2;\n      iVar7 = iVar7 + 1;\nLAB_001012c5:\n      piVar4 = piVar4 + 1;\n    } while (piVar4 != piVar1);\n    iVar7 = 0;\n    do {\n      piVar4 = __ptr_00;\n      if (0 < iVar6) {\n        do {\n          if (*piVar4 == *param_1) goto LAB_0010128c;\n          piVar4 = piVar4 + 1;\n        } while (__ptr_00 + (ulong)(iVar6 - 1) + 1 != piVar4);\n      }\n      *(int *)((long)pvVar3 + (long)iVar7 * 4) = *param_1;\n      iVar7 = iVar7 + 1;\nLAB_0010128c:\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  *param_3 = iVar7;\n  free(__ptr);\n  free(__ptr_00);\n  return pvVar3;\n}"
    },
    {
        "task_id": 26,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  void *pvVar3;\n  int *__ptr;\n  int *__ptr_00;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  size_t __nmemb;\n  \n  __nmemb = (size_t)param_2;\n  pvVar3 = malloc(__nmemb * 4);\n  __ptr = (int *)calloc(__nmemb,4);\n  __ptr_00 = (int *)calloc(__nmemb,4);\n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar7 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar8 = 0;\n    piVar4 = param_1;\n    do {\n      iVar2 = *piVar4;\n      if (iVar7 != 0) {\n        piVar5 = __ptr_00;\n        do {\n          if (*piVar5 == iVar2) goto joined_r0x00101507;\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr_00 + (ulong)(iVar7 - 1) + 1);\n      }\n      if (iVar8 != 0) {\n        piVar5 = __ptr;\n        do {\n          if (*piVar5 == iVar2) {\n            lVar6 = (long)iVar7;\n            iVar7 = iVar7 + 1;\n            __ptr_00[lVar6] = iVar2;\n            goto joined_r0x00101507;\n          }\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr + (ulong)(iVar8 - 1) + 1);\n      }\n      lVar6 = (long)iVar8;\n      iVar8 = iVar8 + 1;\n      __ptr[lVar6] = iVar2;\njoined_r0x00101507:\n      piVar4 = piVar4 + 1;\n    } while (piVar4 != piVar1);\n    iVar8 = 0;\n    do {\n      piVar4 = __ptr_00;\n      if (iVar7 != 0) {\n        do {\n          if (*piVar4 == *param_1) goto joined_r0x001014a4;\n          piVar4 = piVar4 + 1;\n        } while (__ptr_00 + (ulong)(iVar7 - 1) + 1 != piVar4);\n      }\n      lVar6 = (long)iVar8;\n      iVar8 = iVar8 + 1;\n      *(int *)((long)pvVar3 + lVar6 * 4) = *param_1;\njoined_r0x001014a4:\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  *param_3 = iVar8;\n  free(__ptr);\n  free(__ptr_00);\n  return pvVar3;\n}"
    },
    {
        "task_id": 26,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  void *pvVar3;\n  int *__ptr;\n  int *__ptr_00;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  size_t __nmemb;\n  \n  __nmemb = (size_t)param_2;\n  pvVar3 = malloc(__nmemb * 4);\n  __ptr = (int *)calloc(__nmemb,4);\n  __ptr_00 = (int *)calloc(__nmemb,4);\n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar7 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar8 = 0;\n    piVar4 = param_1;\n    do {\n      iVar2 = *piVar4;\n      if (iVar7 != 0) {\n        piVar5 = __ptr_00;\n        do {\n          if (*piVar5 == iVar2) goto joined_r0x001014e7;\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr_00 + (ulong)(iVar7 - 1) + 1);\n      }\n      if (iVar8 != 0) {\n        piVar5 = __ptr;\n        do {\n          if (*piVar5 == iVar2) {\n            lVar6 = (long)iVar7;\n            iVar7 = iVar7 + 1;\n            __ptr_00[lVar6] = iVar2;\n            goto joined_r0x001014e7;\n          }\n          piVar5 = piVar5 + 1;\n        } while (piVar5 != __ptr + (ulong)(iVar8 - 1) + 1);\n      }\n      lVar6 = (long)iVar8;\n      iVar8 = iVar8 + 1;\n      __ptr[lVar6] = iVar2;\njoined_r0x001014e7:\n      piVar4 = piVar4 + 1;\n    } while (piVar4 != piVar1);\n    iVar8 = 0;\n    do {\n      piVar4 = __ptr_00;\n      if (iVar7 != 0) {\n        do {\n          if (*piVar4 == *param_1) goto joined_r0x00101484;\n          piVar4 = piVar4 + 1;\n        } while (__ptr_00 + (ulong)(iVar7 - 1) + 1 != piVar4);\n      }\n      lVar6 = (long)iVar8;\n      iVar8 = iVar8 + 1;\n      *(int *)((long)pvVar3 + lVar6 * 4) = *param_1;\njoined_r0x00101484:\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  *param_3 = iVar8;\n  free(__ptr);\n  free(__ptr_00);\n  return pvVar3;\n}"
    },
    {
        "task_id": 27,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  size_t sVar1;\n  char local_11;\n  int local_10;\n  \n  sVar1 = strlen(param_1);\n  for (local_10 = 0; local_10 < (int)sVar1; local_10 = local_10 + 1) {\n    local_11 = param_1[local_10];\n    if ((local_11 < 'a') || ('z' < local_11)) {\n      if (('@' < local_11) && (local_11 < '[')) {\n        local_11 = local_11 + ' ';\n      }\n    }\n    else {\n      local_11 = local_11 + -0x20;\n    }\n    *(char *)(local_10 + param_2) = local_11;\n  }\n  *(undefined *)(param_2 + (int)sVar1) = 0;\n  return;\n}"
    },
    {
        "task_id": 27,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  char cVar1;\n  long lVar2;\n  ulong uVar3;\n  char *pcVar4;\n  int iVar5;\n  bool bVar6;\n  \n  lVar2 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar2 == 0) break;\n    lVar2 = lVar2 + -1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  iVar5 = ~(uint)lVar2 - 1;\n  if (0 < iVar5) {\n    uVar3 = 0;\n    do {\n      cVar1 = param_1[uVar3];\n      if ((byte)(cVar1 + 0x9fU) < 0x1a) {\n        cVar1 = cVar1 + -0x20;\n      }\n      else if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        cVar1 = cVar1 + ' ';\n      }\n      *(char *)(param_2 + uVar3) = cVar1;\n      bVar6 = uVar3 != ~(uint)lVar2 - 2;\n      uVar3 = uVar3 + 1;\n    } while (bVar6);\n  }\n  *(undefined *)(param_2 + iVar5) = 0;\n  return;\n}"
    },
    {
        "task_id": 27,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char cVar3;\n  ulong uVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (0 < iVar1) {\n    uVar4 = 0;\n    while( true ) {\n      cVar3 = param_1[uVar4];\n      if ((byte)(cVar3 + 0x9fU) < 0x1a) {\n        *(char *)(param_2 + uVar4) = cVar3 + -0x20;\n      }\n      else {\n        if ((byte)(cVar3 + 0xbfU) < 0x1a) {\n          cVar3 = cVar3 + ' ';\n        }\n        *(char *)(param_2 + uVar4) = cVar3;\n      }\n      if (iVar1 - 1 == uVar4) break;\n      uVar4 = uVar4 + 1;\n    }\n  }\n  *(undefined *)(param_2 + iVar1) = 0;\n  return;\n}"
    },
    {
        "task_id": 27,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte bVar3;\n  byte bVar4;\n  byte bVar5;\n  byte bVar6;\n  byte bVar7;\n  byte bVar8;\n  byte bVar9;\n  byte bVar10;\n  byte bVar11;\n  byte bVar12;\n  byte bVar13;\n  byte bVar14;\n  byte bVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  char cVar19;\n  char cVar20;\n  char cVar21;\n  char cVar22;\n  char cVar23;\n  char cVar24;\n  char cVar25;\n  char cVar26;\n  char cVar27;\n  char cVar28;\n  char cVar29;\n  char cVar30;\n  char cVar31;\n  char cVar32;\n  char cVar33;\n  char cVar34;\n  char cVar35;\n  char cVar36;\n  char cVar37;\n  char cVar38;\n  char cVar39;\n  char cVar40;\n  char cVar41;\n  char cVar42;\n  char cVar43;\n  char cVar44;\n  char cVar45;\n  char cVar46;\n  char cVar47;\n  char cVar48;\n  char cVar49;\n  char cVar50;\n  char cVar51;\n  char cVar52;\n  char cVar53;\n  char cVar54;\n  char cVar55;\n  char cVar56;\n  char cVar57;\n  char cVar58;\n  char cVar59;\n  char cVar60;\n  char cVar61;\n  char cVar62;\n  char cVar63;\n  char cVar64;\n  char cVar65;\n  undefined auVar66 [16];\n  char cVar67;\n  char cVar68;\n  char cVar69;\n  char cVar70;\n  char cVar71;\n  char cVar72;\n  char cVar73;\n  char cVar74;\n  char cVar75;\n  char cVar76;\n  char cVar77;\n  char cVar78;\n  char cVar79;\n  char cVar80;\n  char cVar81;\n  char cVar82;\n  uint uVar83;\n  size_t sVar84;\n  ulong uVar85;\n  uint uVar86;\n  int iVar87;\n  long lVar88;\n  char cVar89;\n  bool bVar90;\n  byte bVar91;\n  byte bVar92;\n  byte bVar93;\n  byte bVar94;\n  byte bVar95;\n  byte bVar96;\n  byte bVar97;\n  byte bVar98;\n  byte bVar99;\n  byte bVar100;\n  byte bVar101;\n  byte bVar102;\n  byte bVar103;\n  byte bVar104;\n  byte bVar105;\n  byte bVar106;\n  byte bVar107;\n  byte bVar109;\n  byte bVar110;\n  byte bVar111;\n  byte bVar112;\n  byte bVar113;\n  byte bVar114;\n  byte bVar115;\n  byte bVar116;\n  byte bVar117;\n  byte bVar118;\n  byte bVar119;\n  byte bVar120;\n  byte bVar121;\n  byte bVar122;\n  undefined auVar108 [16];\n  byte bVar123;\n  byte bVar124;\n  byte bVar126;\n  byte bVar127;\n  byte bVar128;\n  byte bVar129;\n  byte bVar130;\n  byte bVar131;\n  byte bVar132;\n  byte bVar133;\n  byte bVar134;\n  byte bVar135;\n  byte bVar136;\n  byte bVar137;\n  byte bVar138;\n  byte bVar139;\n  undefined auVar125 [16];\n  byte bVar140;\n  \n  sVar84 = strlen(param_1);\n  cVar82 = UNK_0010215f;\n  cVar81 = UNK_0010215e;\n  cVar80 = UNK_0010215d;\n  cVar79 = UNK_0010215c;\n  cVar78 = UNK_0010215b;\n  cVar77 = UNK_0010215a;\n  cVar76 = UNK_00102159;\n  cVar75 = UNK_00102158;\n  cVar74 = UNK_00102157;\n  cVar73 = UNK_00102156;\n  cVar72 = UNK_00102155;\n  cVar71 = UNK_00102154;\n  cVar70 = UNK_00102153;\n  cVar69 = UNK_00102152;\n  cVar68 = UNK_00102151;\n  cVar67 = DAT_00102150;\n  auVar66 = _DAT_00102140;\n  cVar65 = UNK_0010213f;\n  cVar64 = UNK_0010213e;\n  cVar63 = UNK_0010213d;\n  cVar62 = UNK_0010213c;\n  cVar61 = UNK_0010213b;\n  cVar60 = UNK_0010213a;\n  cVar59 = UNK_00102139;\n  cVar58 = UNK_00102138;\n  cVar57 = UNK_00102137;\n  cVar56 = UNK_00102136;\n  cVar55 = UNK_00102135;\n  cVar54 = UNK_00102134;\n  cVar53 = UNK_00102133;\n  cVar52 = UNK_00102132;\n  cVar51 = UNK_00102131;\n  cVar50 = DAT_00102130;\n  cVar49 = UNK_0010212f;\n  cVar48 = UNK_0010212e;\n  cVar47 = UNK_0010212d;\n  cVar46 = UNK_0010212c;\n  cVar45 = UNK_0010212b;\n  cVar44 = UNK_0010212a;\n  cVar43 = UNK_00102129;\n  cVar42 = UNK_00102128;\n  cVar41 = UNK_00102127;\n  cVar40 = UNK_00102126;\n  cVar39 = UNK_00102125;\n  cVar38 = UNK_00102124;\n  cVar37 = UNK_00102123;\n  cVar36 = UNK_00102122;\n  cVar35 = UNK_00102121;\n  cVar34 = DAT_00102120;\n  cVar33 = UNK_0010211f;\n  cVar32 = UNK_0010211e;\n  cVar31 = UNK_0010211d;\n  cVar30 = UNK_0010211c;\n  cVar29 = UNK_0010211b;\n  cVar28 = UNK_0010211a;\n  cVar27 = UNK_00102119;\n  cVar26 = UNK_00102118;\n  cVar25 = UNK_00102117;\n  cVar24 = UNK_00102116;\n  cVar23 = UNK_00102115;\n  cVar22 = UNK_00102114;\n  cVar21 = UNK_00102113;\n  cVar20 = UNK_00102112;\n  cVar19 = UNK_00102111;\n  cVar89 = DAT_00102110;\n  uVar83 = (uint)sVar84;\n  if (0 < (int)uVar83) {\n    if ((param_1 + (0xf - param_2) < (char *)0x1f) || (uVar83 - 1 < 0xf)) {\n      uVar85 = 0;\n      do {\n        cVar89 = param_1[uVar85];\n        if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n          cVar89 = cVar89 + -0x20;\n        }\n        else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n          cVar89 = cVar89 + ' ';\n        }\n        *(char *)(param_2 + uVar85) = cVar89;\n        bVar90 = uVar85 != uVar83 - 1;\n        uVar85 = uVar85 + 1;\n      } while (bVar90);\n    }\n    else {\n      lVar88 = 0;\n      do {\n        pbVar2 = (byte *)(param_1 + lVar88);\n        bVar3 = *pbVar2;\n        bVar4 = pbVar2[1];\n        bVar5 = pbVar2[2];\n        bVar6 = pbVar2[3];\n        bVar7 = pbVar2[4];\n        bVar8 = pbVar2[5];\n        bVar9 = pbVar2[6];\n        bVar10 = pbVar2[7];\n        bVar11 = pbVar2[8];\n        bVar12 = pbVar2[9];\n        bVar13 = pbVar2[10];\n        bVar14 = pbVar2[0xb];\n        bVar15 = pbVar2[0xc];\n        bVar16 = pbVar2[0xd];\n        bVar17 = pbVar2[0xe];\n        bVar18 = pbVar2[0xf];\n        auVar108[0] = bVar3 + cVar34;\n        auVar108[1] = bVar4 + cVar35;\n        auVar108[2] = bVar5 + cVar36;\n        auVar108[3] = bVar6 + cVar37;\n        auVar108[4] = bVar7 + cVar38;\n        auVar108[5] = bVar8 + cVar39;\n        auVar108[6] = bVar9 + cVar40;\n        auVar108[7] = bVar10 + cVar41;\n        auVar108[8] = bVar11 + cVar42;\n        auVar108[9] = bVar12 + cVar43;\n        auVar108[10] = bVar13 + cVar44;\n        auVar108[11] = bVar14 + cVar45;\n        auVar108[12] = bVar15 + cVar46;\n        auVar108[13] = bVar16 + cVar47;\n        auVar108[14] = bVar17 + cVar48;\n        auVar108[15] = bVar18 + cVar49;\n        auVar125[0] = bVar3 + cVar89;\n        auVar125[1] = bVar4 + cVar19;\n        auVar125[2] = bVar5 + cVar20;\n        auVar125[3] = bVar6 + cVar21;\n        auVar125[4] = bVar7 + cVar22;\n        auVar125[5] = bVar8 + cVar23;\n        auVar125[6] = bVar9 + cVar24;\n        auVar125[7] = bVar10 + cVar25;\n        auVar125[8] = bVar11 + cVar26;\n        auVar125[9] = bVar12 + cVar27;\n        auVar125[10] = bVar13 + cVar28;\n        auVar125[11] = bVar14 + cVar29;\n        auVar125[12] = bVar15 + cVar30;\n        auVar125[13] = bVar16 + cVar31;\n        auVar125[14] = bVar17 + cVar32;\n        auVar125[15] = bVar18 + cVar33;\n        auVar125 = psubusb(auVar125,auVar66);\n        bVar124 = -(auVar125[0] == '\\0');\n        bVar126 = -(auVar125[1] == '\\0');\n        bVar127 = -(auVar125[2] == '\\0');\n        bVar128 = -(auVar125[3] == '\\0');\n        bVar129 = -(auVar125[4] == '\\0');\n        bVar130 = -(auVar125[5] == '\\0');\n        bVar131 = -(auVar125[6] == '\\0');\n        bVar132 = -(auVar125[7] == '\\0');\n        bVar133 = -(auVar125[8] == '\\0');\n        bVar134 = -(auVar125[9] == '\\0');\n        bVar135 = -(auVar125[10] == '\\0');\n        bVar136 = -(auVar125[11] == '\\0');\n        bVar137 = -(auVar125[12] == '\\0');\n        bVar138 = -(auVar125[13] == '\\0');\n        bVar139 = -(auVar125[14] == '\\0');\n        bVar140 = -(auVar125[15] == '\\0');\n        auVar125 = psubusb(auVar108,auVar66);\n        bVar91 = auVar66[0];\n        bVar92 = auVar66[1];\n        bVar93 = auVar66[2];\n        bVar94 = auVar66[3];\n        bVar95 = auVar66[4];\n        bVar96 = auVar66[5];\n        bVar97 = auVar66[6];\n        bVar98 = auVar66[7];\n        bVar99 = auVar66[8];\n        bVar100 = auVar66[9];\n        bVar101 = auVar66[10];\n        bVar102 = auVar66[11];\n        bVar103 = auVar66[12];\n        bVar104 = auVar66[13];\n        bVar105 = auVar66[14];\n        bVar106 = auVar66[15];\n        bVar107 = -(auVar108[0] ==\n                   (byte)((bVar91 < auVar108[0]) * bVar91 | (bVar91 >= auVar108[0]) * auVar108[0]))\n                  & -(bVar124 == 0);\n        bVar109 = -(auVar108[1] ==\n                   (byte)((bVar92 < auVar108[1]) * bVar92 | (bVar92 >= auVar108[1]) * auVar108[1]))\n                  & -(bVar126 == 0);\n        bVar110 = -(auVar108[2] ==\n                   (byte)((bVar93 < auVar108[2]) * bVar93 | (bVar93 >= auVar108[2]) * auVar108[2]))\n                  & -(bVar127 == 0);\n        bVar111 = -(auVar108[3] ==\n                   (byte)((bVar94 < auVar108[3]) * bVar94 | (bVar94 >= auVar108[3]) * auVar108[3]))\n                  & -(bVar128 == 0);\n        bVar112 = -(auVar108[4] ==\n                   (byte)((bVar95 < auVar108[4]) * bVar95 | (bVar95 >= auVar108[4]) * auVar108[4]))\n                  & -(bVar129 == 0);\n        bVar113 = -(auVar108[5] ==\n                   (byte)((bVar96 < auVar108[5]) * bVar96 | (bVar96 >= auVar108[5]) * auVar108[5]))\n                  & -(bVar130 == 0);\n        bVar114 = -(auVar108[6] ==\n                   (byte)((bVar97 < auVar108[6]) * bVar97 | (bVar97 >= auVar108[6]) * auVar108[6]))\n                  & -(bVar131 == 0);\n        bVar115 = -(auVar108[7] ==\n                   (byte)((bVar98 < auVar108[7]) * bVar98 | (bVar98 >= auVar108[7]) * auVar108[7]))\n                  & -(bVar132 == 0);\n        bVar116 = -(auVar108[8] ==\n                   (byte)((bVar99 < auVar108[8]) * bVar99 | (bVar99 >= auVar108[8]) * auVar108[8]))\n                  & -(bVar133 == 0);\n        bVar117 = -(auVar108[9] ==\n                   (byte)((bVar100 < auVar108[9]) * bVar100 | (bVar100 >= auVar108[9]) * auVar108[9]\n                         )) & -(bVar134 == 0);\n        bVar118 = -(auVar108[10] ==\n                   (byte)((bVar101 < auVar108[10]) * bVar101 |\n                         (bVar101 >= auVar108[10]) * auVar108[10])) & -(bVar135 == 0);\n        bVar119 = -(auVar108[11] ==\n                   (byte)((bVar102 < auVar108[11]) * bVar102 |\n                         (bVar102 >= auVar108[11]) * auVar108[11])) & -(bVar136 == 0);\n        bVar120 = -(auVar108[12] ==\n                   (byte)((bVar103 < auVar108[12]) * bVar103 |\n                         (bVar103 >= auVar108[12]) * auVar108[12])) & -(bVar137 == 0);\n        bVar121 = -(auVar108[13] ==\n                   (byte)((bVar104 < auVar108[13]) * bVar104 |\n                         (bVar104 >= auVar108[13]) * auVar108[13])) & -(bVar138 == 0);\n        bVar122 = -(auVar108[14] ==\n                   (byte)((bVar105 < auVar108[14]) * bVar105 |\n                         (bVar105 >= auVar108[14]) * auVar108[14])) & -(bVar139 == 0);\n        bVar123 = -(auVar108[15] ==\n                   (byte)((bVar106 < auVar108[15]) * bVar106 |\n                         (bVar106 >= auVar108[15]) * auVar108[15])) & -(bVar140 == 0);\n        bVar91 = -(auVar125[0] != '\\0') & -(bVar124 == 0);\n        bVar92 = -(auVar125[1] != '\\0') & -(bVar126 == 0);\n        bVar93 = -(auVar125[2] != '\\0') & -(bVar127 == 0);\n        bVar94 = -(auVar125[3] != '\\0') & -(bVar128 == 0);\n        bVar95 = -(auVar125[4] != '\\0') & -(bVar129 == 0);\n        bVar96 = -(auVar125[5] != '\\0') & -(bVar130 == 0);\n        bVar97 = -(auVar125[6] != '\\0') & -(bVar131 == 0);\n        bVar98 = -(auVar125[7] != '\\0') & -(bVar132 == 0);\n        bVar99 = -(auVar125[8] != '\\0') & -(bVar133 == 0);\n        bVar100 = -(auVar125[9] != '\\0') & -(bVar134 == 0);\n        bVar101 = -(auVar125[10] != '\\0') & -(bVar135 == 0);\n        bVar102 = -(auVar125[11] != '\\0') & -(bVar136 == 0);\n        bVar103 = -(auVar125[12] != '\\0') & -(bVar137 == 0);\n        bVar104 = -(auVar125[13] != '\\0') & -(bVar138 == 0);\n        bVar105 = -(auVar125[14] != '\\0') & -(bVar139 == 0);\n        bVar106 = -(auVar125[15] != '\\0') & -(bVar140 == 0);\n        pbVar2 = (byte *)(param_2 + lVar88);\n        *pbVar2 = bVar3 & bVar91 |\n                  ~bVar91 & (~bVar107 & (~bVar124 & bVar3 + cVar50 | bVar3 + cVar67 & bVar124) |\n                            bVar3 + cVar50 & bVar107);\n        pbVar2[1] = bVar4 & bVar92 |\n                    ~bVar92 & (~bVar109 & (~bVar126 & bVar4 + cVar51 | bVar4 + cVar68 & bVar126) |\n                              bVar4 + cVar51 & bVar109);\n        pbVar2[2] = bVar5 & bVar93 |\n                    ~bVar93 & (~bVar110 & (~bVar127 & bVar5 + cVar52 | bVar5 + cVar69 & bVar127) |\n                              bVar5 + cVar52 & bVar110);\n        pbVar2[3] = bVar6 & bVar94 |\n                    ~bVar94 & (~bVar111 & (~bVar128 & bVar6 + cVar53 | bVar6 + cVar70 & bVar128) |\n                              bVar6 + cVar53 & bVar111);\n        pbVar2[4] = bVar7 & bVar95 |\n                    ~bVar95 & (~bVar112 & (~bVar129 & bVar7 + cVar54 | bVar7 + cVar71 & bVar129) |\n                              bVar7 + cVar54 & bVar112);\n        pbVar2[5] = bVar8 & bVar96 |\n                    ~bVar96 & (~bVar113 & (~bVar130 & bVar8 + cVar55 | bVar8 + cVar72 & bVar130) |\n                              bVar8 + cVar55 & bVar113);\n        pbVar2[6] = bVar9 & bVar97 |\n                    ~bVar97 & (~bVar114 & (~bVar131 & bVar9 + cVar56 | bVar9 + cVar73 & bVar131) |\n                              bVar9 + cVar56 & bVar114);\n        pbVar2[7] = bVar10 & bVar98 |\n                    ~bVar98 & (~bVar115 & (~bVar132 & bVar10 + cVar57 | bVar10 + cVar74 & bVar132) |\n                              bVar10 + cVar57 & bVar115);\n        pbVar2[8] = bVar11 & bVar99 |\n                    ~bVar99 & (~bVar116 & (~bVar133 & bVar11 + cVar58 | bVar11 + cVar75 & bVar133) |\n                              bVar11 + cVar58 & bVar116);\n        pbVar2[9] = bVar12 & bVar100 |\n                    ~bVar100 &\n                    (~bVar117 & (~bVar134 & bVar12 + cVar59 | bVar12 + cVar76 & bVar134) |\n                    bVar12 + cVar59 & bVar117);\n        pbVar2[10] = bVar13 & bVar101 |\n                     ~bVar101 &\n                     (~bVar118 & (~bVar135 & bVar13 + cVar60 | bVar13 + cVar77 & bVar135) |\n                     bVar13 + cVar60 & bVar118);\n        pbVar2[0xb] = bVar14 & bVar102 |\n                      ~bVar102 &\n                      (~bVar119 & (~bVar136 & bVar14 + cVar61 | bVar14 + cVar78 & bVar136) |\n                      bVar14 + cVar61 & bVar119);\n        pbVar2[0xc] = bVar15 & bVar103 |\n                      ~bVar103 &\n                      (~bVar120 & (~bVar137 & bVar15 + cVar62 | bVar15 + cVar79 & bVar137) |\n                      bVar15 + cVar62 & bVar120);\n        pbVar2[0xd] = bVar16 & bVar104 |\n                      ~bVar104 &\n                      (~bVar121 & (~bVar138 & bVar16 + cVar63 | bVar16 + cVar80 & bVar138) |\n                      bVar16 + cVar63 & bVar121);\n        pbVar2[0xe] = bVar17 & bVar105 |\n                      ~bVar105 &\n                      (~bVar122 & (~bVar139 & bVar17 + cVar64 | bVar17 + cVar81 & bVar139) |\n                      bVar17 + cVar64 & bVar122);\n        pbVar2[0xf] = bVar18 & bVar106 |\n                      ~bVar106 &\n                      (~bVar123 & (~bVar140 & bVar18 + cVar65 | bVar18 + cVar82 & bVar140) |\n                      bVar18 + cVar65 & bVar123);\n        lVar88 = lVar88 + 0x10;\n      } while (lVar88 != (sVar84 >> 4 & 0xfffffff) << 4);\n      uVar86 = uVar83 & 0xfffffff0;\n      if ((sVar84 & 0xf) != 0) {\n        cVar89 = param_1[(int)uVar86];\n        if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n          cVar89 = cVar89 + -0x20;\n        }\n        else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n          cVar89 = cVar89 + ' ';\n        }\n        *(char *)(param_2 + (int)uVar86) = cVar89;\n        iVar1 = uVar86 + 1;\n        if (iVar1 < (int)uVar83) {\n          cVar89 = param_1[iVar1];\n          if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n            cVar89 = cVar89 + -0x20;\n          }\n          else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n            cVar89 = cVar89 + ' ';\n          }\n          *(char *)(param_2 + iVar1) = cVar89;\n          iVar1 = uVar86 + 2;\n          if (iVar1 < (int)uVar83) {\n            cVar89 = param_1[iVar1];\n            if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n              cVar89 = cVar89 + -0x20;\n            }\n            else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n              cVar89 = cVar89 + ' ';\n            }\n            *(char *)(param_2 + iVar1) = cVar89;\n            iVar1 = uVar86 + 3;\n            if (iVar1 < (int)uVar83) {\n              cVar89 = param_1[iVar1];\n              if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                cVar89 = cVar89 + -0x20;\n              }\n              else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                cVar89 = cVar89 + ' ';\n              }\n              *(char *)(param_2 + iVar1) = cVar89;\n              iVar1 = uVar86 + 4;\n              if (iVar1 < (int)uVar83) {\n                cVar89 = param_1[iVar1];\n                if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                  cVar89 = cVar89 + -0x20;\n                }\n                else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                  cVar89 = cVar89 + ' ';\n                }\n                *(char *)(param_2 + iVar1) = cVar89;\n                iVar1 = uVar86 + 5;\n                if (iVar1 < (int)uVar83) {\n                  cVar89 = param_1[iVar1];\n                  if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                    cVar89 = cVar89 + -0x20;\n                  }\n                  else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                    cVar89 = cVar89 + ' ';\n                  }\n                  *(char *)(param_2 + iVar1) = cVar89;\n                  iVar1 = uVar86 + 6;\n                  if (iVar1 < (int)uVar83) {\n                    cVar89 = param_1[iVar1];\n                    if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                      cVar89 = cVar89 + -0x20;\n                    }\n                    else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                      cVar89 = cVar89 + ' ';\n                    }\n                    *(char *)(param_2 + iVar1) = cVar89;\n                    iVar1 = uVar86 + 7;\n                    if (iVar1 < (int)uVar83) {\n                      cVar89 = param_1[iVar1];\n                      if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                        cVar89 = cVar89 + -0x20;\n                      }\n                      else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                        cVar89 = cVar89 + ' ';\n                      }\n                      *(char *)(param_2 + iVar1) = cVar89;\n                      iVar1 = uVar86 + 8;\n                      if (iVar1 < (int)uVar83) {\n                        cVar89 = param_1[iVar1];\n                        if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                          cVar89 = cVar89 + -0x20;\n                        }\n                        else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                          cVar89 = cVar89 + ' ';\n                        }\n                        *(char *)(param_2 + iVar1) = cVar89;\n                        iVar1 = uVar86 + 9;\n                        if (iVar1 < (int)uVar83) {\n                          cVar89 = param_1[iVar1];\n                          if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                            cVar89 = cVar89 + -0x20;\n                          }\n                          else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                            cVar89 = cVar89 + ' ';\n                          }\n                          *(char *)(param_2 + iVar1) = cVar89;\n                          iVar1 = uVar86 + 10;\n                          if (iVar1 < (int)uVar83) {\n                            cVar89 = param_1[iVar1];\n                            if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                              cVar89 = cVar89 + -0x20;\n                            }\n                            else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                              cVar89 = cVar89 + ' ';\n                            }\n                            *(char *)(param_2 + iVar1) = cVar89;\n                            iVar1 = uVar86 + 0xb;\n                            if (iVar1 < (int)uVar83) {\n                              cVar89 = param_1[iVar1];\n                              if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                                cVar89 = cVar89 + -0x20;\n                              }\n                              else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                                cVar89 = cVar89 + ' ';\n                              }\n                              *(char *)(param_2 + iVar1) = cVar89;\n                              iVar1 = uVar86 + 0xc;\n                              if (iVar1 < (int)uVar83) {\n                                cVar89 = param_1[iVar1];\n                                if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                                  cVar89 = cVar89 + -0x20;\n                                }\n                                else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                                  cVar89 = cVar89 + ' ';\n                                }\n                                *(char *)(param_2 + iVar1) = cVar89;\n                                iVar1 = uVar86 + 0xd;\n                                if (iVar1 < (int)uVar83) {\n                                  cVar89 = param_1[iVar1];\n                                  if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                                    cVar89 = cVar89 + -0x20;\n                                  }\n                                  else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                                    cVar89 = cVar89 + ' ';\n                                  }\n                                  iVar87 = uVar86 + 0xe;\n                                  *(char *)(param_2 + iVar1) = cVar89;\n                                  if (iVar87 < (int)uVar83) {\n                                    cVar89 = param_1[iVar87];\n                                    if ((byte)(cVar89 + 0x9fU) < 0x1a) {\n                                      cVar89 = cVar89 + -0x20;\n                                    }\n                                    else if ((byte)(cVar89 + 0xbfU) < 0x1a) {\n                                      cVar89 = cVar89 + ' ';\n                                    }\n                                    *(char *)(param_2 + iVar87) = cVar89;\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  *(undefined *)(param_2 + (int)uVar83) = 0;\n  return;\n}"
    },
    {
        "task_id": 28,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(long param_1,int param_2)\n\n{\n  size_t sVar1;\n  char *__dest;\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  local_1c = 0;\n  for (local_18 = 0; local_18 < param_2; local_18 = local_18 + 1) {\n    sVar1 = strlen(*(char **)(param_1 + (long)local_18 * 8));\n    local_1c = local_1c + (int)sVar1;\n  }\n  __dest = (char *)malloc((long)(local_1c + 1));\n  if (__dest == (char *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    *__dest = '\\0';\n    for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n      strcat(__dest,*(char **)(param_1 + (long)local_14 * 8));\n    }\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 28,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char cVar1;\n  char *pcVar2;\n  long lVar3;\n  char **ppcVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    pcVar2 = (char *)malloc(1);\n    if (pcVar2 != (char *)0x0) {\n      *pcVar2 = '\\0';\n    }\n  }\n  else {\n    iVar5 = 0;\n    ppcVar4 = param_1;\n    do {\n      lVar3 = -1;\n      pcVar2 = *ppcVar4;\n      do {\n        if (lVar3 == 0) break;\n        lVar3 = lVar3 + -1;\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n      } while (cVar1 != '\\0');\n      iVar5 = iVar5 + -1 + ~(uint)lVar3;\n      ppcVar4 = ppcVar4 + 1;\n    } while (ppcVar4 != param_1 + (ulong)(param_2 - 1) + 1);\n    pcVar2 = (char *)malloc((long)(iVar5 + 1));\n    if (pcVar2 != (char *)0x0) {\n      *pcVar2 = '\\0';\n      lVar3 = 0;\n      do {\n        strcat(pcVar2,param_1[lVar3]);\n        lVar3 = lVar3 + 1;\n      } while ((int)lVar3 < param_2);\n    }\n  }\n  return pcVar2;\n}"
    },
    {
        "task_id": 28,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__src;\n  size_t sVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    pcVar3 = (char *)malloc(1);\n    if (pcVar3 != (char *)0x0) {\n      *pcVar3 = '\\0';\n      return pcVar3;\n    }\n  }\n  else {\n    iVar5 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    ppcVar4 = param_1;\n    do {\n      pcVar3 = *ppcVar4;\n      ppcVar4 = ppcVar4 + 1;\n      sVar2 = strlen(pcVar3);\n      iVar5 = iVar5 + (int)sVar2;\n    } while (ppcVar4 != ppcVar1);\n    pcVar3 = (char *)malloc((long)(iVar5 + 1));\n    if (pcVar3 != (char *)0x0) {\n      *pcVar3 = '\\0';\n      do {\n        __src = *param_1;\n        param_1 = param_1 + 1;\n        pcVar3 = strcat(pcVar3,__src);\n      } while (param_1 != ppcVar1);\n      return pcVar3;\n    }\n  }\n  return (char *)0x0;\n}"
    },
    {
        "task_id": 28,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__src;\n  size_t sVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    pcVar3 = (char *)malloc(1);\n    if (pcVar3 != (char *)0x0) {\n      *pcVar3 = '\\0';\n      return pcVar3;\n    }\n  }\n  else {\n    iVar5 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    ppcVar4 = param_1;\n    do {\n      pcVar3 = *ppcVar4;\n      ppcVar4 = ppcVar4 + 1;\n      sVar2 = strlen(pcVar3);\n      iVar5 = iVar5 + (int)sVar2;\n    } while (ppcVar1 != ppcVar4);\n    pcVar3 = (char *)malloc((long)(iVar5 + 1));\n    if (pcVar3 != (char *)0x0) {\n      *pcVar3 = '\\0';\n      do {\n        __src = *param_1;\n        param_1 = param_1 + 1;\n        pcVar3 = strcat(pcVar3,__src);\n      } while (ppcVar1 != param_1);\n      return pcVar3;\n    }\n  }\n  return (char *)0x0;\n}"
    },
    {
        "task_id": 29,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2,char *param_3,void **param_4)\n\n{\n  int iVar1;\n  size_t sVar2;\n  void *pvVar3;\n  int local_14;\n  int local_10;\n  \n  sVar2 = strlen(param_3);\n  pvVar3 = malloc((long)param_2 << 3);\n  *param_4 = pvVar3;\n  local_14 = 0;\n  for (local_10 = 0; local_10 < param_2; local_10 = local_10 + 1) {\n    iVar1 = strncmp(*(char **)(param_1 + (long)local_10 * 8),param_3,(long)(int)sVar2);\n    if (iVar1 == 0) {\n      *(undefined8 *)((long)*param_4 + (long)local_14 * 8) =\n           *(undefined8 *)((long)local_10 * 8 + param_1);\n      local_14 = local_14 + 1;\n    }\n  }\n  return local_14;\n}"
    },
    {
        "task_id": 29,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char **param_1,int param_2,char *param_3,void **param_4)\n\n{\n  char **ppcVar1;\n  char cVar2;\n  int iVar3;\n  void *pvVar4;\n  long lVar5;\n  char *pcVar6;\n  int iVar7;\n  \n  lVar5 = -1;\n  pcVar6 = param_3;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    cVar2 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar2 != '\\0');\n  pvVar4 = malloc((long)param_2 << 3);\n  *param_4 = pvVar4;\n  if (param_2 < 1) {\n    iVar7 = 0;\n  }\n  else {\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar7 = 0;\n    do {\n      pcVar6 = *param_1;\n      iVar3 = strncmp(pcVar6,param_3,(long)(int)(~(uint)lVar5 - 1));\n      if (iVar3 == 0) {\n        *(char **)((long)*param_4 + (long)iVar7 * 8) = pcVar6;\n        iVar7 = iVar7 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  return iVar7;\n}"
    },
    {
        "task_id": 29,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char **param_1,int param_2,char *param_3,void **param_4)\n\n{\n  char **ppcVar1;\n  char *__s1;\n  int iVar2;\n  size_t sVar3;\n  void *pvVar4;\n  long lVar5;\n  int iVar6;\n  \n  sVar3 = strlen(param_3);\n  pvVar4 = malloc((long)param_2 << 3);\n  *param_4 = pvVar4;\n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    iVar6 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s1 = *param_1;\n      iVar2 = strncmp(__s1,param_3,(long)(int)sVar3);\n      if (iVar2 == 0) {\n        lVar5 = (long)iVar6;\n        iVar6 = iVar6 + 1;\n        *(char **)((long)pvVar4 + lVar5 * 8) = __s1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  return iVar6;\n}"
    },
    {
        "task_id": 29,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char **param_1,int param_2,char *param_3,void **param_4)\n\n{\n  char **ppcVar1;\n  char *__s1;\n  int iVar2;\n  size_t sVar3;\n  void *pvVar4;\n  long lVar5;\n  int iVar6;\n  \n  sVar3 = strlen(param_3);\n  pvVar4 = malloc((long)param_2 << 3);\n  *param_4 = pvVar4;\n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    iVar6 = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s1 = *param_1;\n      iVar2 = strncmp(__s1,param_3,(long)(int)sVar3);\n      if (iVar2 == 0) {\n        lVar5 = (long)iVar6;\n        iVar6 = iVar6 + 1;\n        *(char **)((long)pvVar4 + lVar5 * 8) = __s1;\n      }\n      param_1 = param_1 + 1;\n    } while (ppcVar1 != param_1);\n  }\n  return iVar6;\n}"
    },
    {
        "task_id": 30,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,int *param_3)\n\n{\n  int iVar1;\n  void *pvVar2;\n  int local_14;\n  \n  pvVar2 = malloc((long)param_2 << 2);\n  *param_3 = 0;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    if (0.0 < *(float *)(param_1 + (long)local_14 * 4)) {\n      iVar1 = *param_3;\n      *param_3 = iVar1 + 1;\n      *(undefined4 *)((long)pvVar2 + (long)iVar1 * 4) =\n           *(undefined4 *)((long)local_14 * 4 + param_1);\n    }\n  }\n  return pvVar2;\n}"
    },
    {
        "task_id": 30,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,int *param_3)\n\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  *param_3 = 0;\n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (0.0 < *param_1) {\n        iVar2 = *param_3;\n        *param_3 = iVar2 + 1;\n        *(float *)((long)pvVar3 + (long)iVar2 * 4) = *param_1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 30,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,int *param_3)\n\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  *param_3 = 0;\n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (0.0 < *param_1) {\n        iVar2 = *param_3;\n        *(float *)((long)pvVar3 + (long)iVar2 * 4) = *param_1;\n        *param_3 = iVar2 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 30,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(float *param_1,int param_2,int *param_3)\n\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  *param_3 = 0;\n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (0.0 < *param_1) {\n        iVar2 = *param_3;\n        *(float *)((long)pvVar3 + (long)iVar2 * 4) = *param_1;\n        *param_3 = iVar2 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (pfVar1 != param_1);\n  }\n  return;\n}"
    },
    {
        "task_id": 31,
        "type": "O0",
        "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1)\n\n{\n  undefined8 uVar1;\n  long local_10;\n  \n  if (param_1 < 2) {\n    uVar1 = 0;\n  }\n  else {\n    for (local_10 = 2; local_10 * local_10 <= param_1; local_10 = local_10 + 1) {\n      if (param_1 % local_10 == 0) {\n        return 0;\n      }\n    }\n    uVar1 = 1;\n  }\n  return uVar1;\n}"
    },
    {
        "task_id": 31,
        "type": "O1",
        "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(ulong param_1)\n\n{\n  undefined auVar1 [16];\n  long lVar2;\n  \n  if (1 < (long)param_1) {\n    if ((long)param_1 < 4) {\n      return 1;\n    }\n    if ((param_1 & 1) == 0) {\n      return 0;\n    }\n    lVar2 = 2;\n    do {\n      lVar2 = lVar2 + 1;\n      if (lVar2 * lVar2 - param_1 != 0 && (long)param_1 <= lVar2 * lVar2) {\n        return 1;\n      }\n      auVar1._8_8_ = (long)(int7)(param_1 >> 8) >> 0x37;\n      auVar1._0_8_ = param_1;\n    } while (SUB168(auVar1 % SEXT816(lVar2),0) != 0);\n  }\n  return 0;\n}"
    },
    {
        "task_id": 31,
        "type": "O2",
        "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(ulong param_1)\n\n{\n  undefined auVar1 [16];\n  long lVar2;\n  \n  if ((long)param_1 < 4) {\n    return 1;\n  }\n  if ((param_1 & 1) != 0) {\n    lVar2 = 2;\n    do {\n      lVar2 = lVar2 + 1;\n      if ((long)param_1 < lVar2 * lVar2) {\n        return 1;\n      }\n      auVar1._8_8_ = (long)(int7)(param_1 >> 8) >> 0x37;\n      auVar1._0_8_ = param_1;\n    } while (SUB168(auVar1 % SEXT816(lVar2),0) != 0);\n  }\n  return 0;\n}\n\n// Function: func0\nundefined8 func0(long param_1)\n\n{\n  undefined8 uVar1;\n  \n  if (1 < param_1) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 31,
        "type": "O3",
        "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(ulong param_1)\n\n{\n  undefined auVar1 [16];\n  long lVar2;\n  \n  if ((long)param_1 < 4) {\n    return 1;\n  }\n  if ((param_1 & 1) != 0) {\n    lVar2 = 2;\n    do {\n      lVar2 = lVar2 + 1;\n      if ((long)param_1 < lVar2 * lVar2) {\n        return 1;\n      }\n      auVar1._8_8_ = (long)(int7)(param_1 >> 8) >> 0x37;\n      auVar1._0_8_ = param_1;\n    } while (SUB168(auVar1 % SEXT816(lVar2),0) != 0);\n  }\n  return 0;\n}\n\n// Function: func0\nundefined8 func0(ulong param_1)\n\n{\n  undefined auVar1 [16];\n  long lVar2;\n  \n  if (1 < (long)param_1) {\n    if ((long)param_1 < 4) {\n      return 1;\n    }\n    if ((param_1 & 1) != 0) {\n      lVar2 = 2;\n      do {\n        lVar2 = lVar2 + 1;\n        if ((long)param_1 < lVar2 * lVar2) {\n          return 1;\n        }\n        auVar1._8_8_ = (long)(int7)(param_1 >> 8) >> 0x37;\n        auVar1._0_8_ = param_1;\n      } while (SUB168(auVar1 % SEXT816(lVar2),0) != 0);\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 32,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "double func0(double *param_1,int param_2)\n\n{\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  double local_28;\n  double local_20;\n  double local_18;\n  double local_10;\n  \n  local_28 = 0.0;\n  local_20 = *param_1;\n  for (local_38 = 1; local_38 < param_2; local_38 = local_38 + 1) {\n    local_10 = DAT_00102070;\n    for (local_34 = 0; local_34 < local_38; local_34 = local_34 + 1) {\n      local_10 = local_10 * 0.0;\n    }\n    local_20 = param_1[local_38] * local_10 + local_20;\n  }\n  while (_DAT_00102090 < (double)((ulong)local_20 & DAT_00102080)) {\n    local_18 = 0.0;\n    for (local_38 = 1; local_38 < param_2; local_38 = local_38 + 1) {\n      local_10 = DAT_00102070;\n      for (local_30 = 1; local_30 < local_38; local_30 = local_30 + 1) {\n        local_10 = local_10 * local_28;\n      }\n      local_18 = param_1[local_38] * (double)local_38 * local_10 + local_18;\n    }\n    local_28 = local_28 - local_20 / local_18;\n    local_20 = *param_1;\n    for (local_38 = 1; local_38 < param_2; local_38 = local_38 + 1) {\n      local_10 = DAT_00102070;\n      for (local_2c = 0; local_2c < local_38; local_2c = local_2c + 1) {\n        local_10 = local_10 * local_28;\n      }\n      local_20 = param_1[local_38] * local_10 + local_20;\n    }\n  }\n  return local_28;\n}"
    },
    {
        "task_id": 32,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "double func0(double *param_1,int param_2)\n\n{\n  double dVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  double *pdVar6;\n  bool bVar7;\n  double dVar8;\n  double dVar9;\n  double dVar10;\n  double dVar11;\n  \n  dVar1 = *param_1;\n  dVar10 = dVar1;\n  if (1 < param_2) {\n    lVar5 = 1;\n    do {\n      iVar2 = 0;\n      dVar9 = DAT_00102060;\n      if (0 < (int)lVar5) {\n        do {\n          dVar9 = dVar9 * 0.0;\n          iVar2 = iVar2 + 1;\n        } while (iVar2 != (int)lVar5);\n      }\n      dVar10 = dVar10 + dVar9 * param_1[lVar5];\n      lVar5 = lVar5 + 1;\n    } while (lVar5 != (ulong)(param_2 - 2) + 2);\n  }\n  dVar9 = 0.0;\n  if ((double)((ulong)dVar10 & DAT_00102080) <= DAT_00102070) {\n    dVar9 = 0.0;\n  }\n  else {\n    do {\n      if (param_2 < 2) {\n        dVar9 = dVar9 - dVar10 / _DAT_00102068;\n        dVar10 = dVar1;\n      }\n      else {\n        pdVar6 = param_1 + 1;\n        dVar11 = 0.0;\n        dVar8 = DAT_00102060;\n        iVar2 = 1;\n        while( true ) {\n          dVar11 = dVar11 + dVar8 * (double)iVar2 * *pdVar6;\n          iVar4 = iVar2 + 1;\n          if (param_2 == iVar4) break;\n          dVar8 = DAT_00102060;\n          if (1 < iVar4) {\n            iVar3 = 1;\n            do {\n              dVar8 = dVar8 * dVar9;\n              bVar7 = iVar2 != iVar3;\n              iVar3 = iVar3 + 1;\n            } while (bVar7);\n          }\n          pdVar6 = pdVar6 + 1;\n          iVar2 = iVar4;\n        }\n        dVar9 = dVar9 - dVar10 / dVar11;\n        lVar5 = 1;\n        dVar10 = dVar1;\n        do {\n          iVar4 = 0;\n          dVar8 = DAT_00102060;\n          if (0 < (int)lVar5) {\n            do {\n              dVar8 = dVar8 * dVar9;\n              iVar4 = iVar4 + 1;\n            } while ((int)lVar5 != iVar4);\n          }\n          dVar10 = dVar10 + dVar8 * param_1[lVar5];\n          lVar5 = lVar5 + 1;\n        } while ((ulong)(iVar2 - 1) + 2 != lVar5);\n      }\n    } while (DAT_00102070 < (double)((ulong)dVar10 & DAT_00102080));\n  }\n  return dVar9;\n}"
    },
    {
        "task_id": 32,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "double func0(double *param_1,int param_2)\n\n{\n  double dVar1;\n  int iVar2;\n  int iVar3;\n  long lVar4;\n  double *pdVar5;\n  bool bVar6;\n  double dVar7;\n  double dVar8;\n  double dVar9;\n  double dVar10;\n  \n  dVar1 = *param_1;\n  dVar9 = dVar1;\n  if (1 < param_2) {\n    lVar4 = 1;\n    do {\n      iVar2 = 0;\n      dVar7 = DAT_00102060;\n      do {\n        dVar7 = dVar7 * 0.0;\n        iVar2 = iVar2 + 1;\n      } while (iVar2 != (int)lVar4);\n      pdVar5 = param_1 + lVar4;\n      lVar4 = lVar4 + 1;\n      dVar9 = dVar9 + dVar7 * *pdVar5;\n    } while ((ulong)(param_2 - 2) + 2 != lVar4);\n  }\n  dVar7 = 0.0;\n  do {\n    if ((double)((ulong)dVar9 & DAT_00102080) <= DAT_00102068) {\n      return dVar7;\n    }\n    while (param_2 < 2) {\n      dVar7 = dVar7 - dVar9 / 0.0;\n      dVar9 = dVar1;\n      if ((double)((ulong)dVar1 & DAT_00102080) <= DAT_00102068) {\n        return dVar7;\n      }\n    }\n    pdVar5 = param_1 + 1;\n    dVar8 = DAT_00102060;\n    dVar10 = 0.0;\n    iVar2 = 1;\n    while( true ) {\n      dVar10 = dVar10 + dVar8 * (double)iVar2 * *pdVar5;\n      if (param_2 == iVar2 + 1) break;\n      dVar8 = DAT_00102060;\n      iVar3 = 1;\n      do {\n        dVar8 = dVar8 * dVar7;\n        bVar6 = iVar3 != iVar2;\n        iVar3 = iVar3 + 1;\n      } while (bVar6);\n      pdVar5 = pdVar5 + 1;\n      iVar2 = iVar2 + 1;\n    }\n    lVar4 = 1;\n    dVar7 = dVar7 - dVar9 / dVar10;\n    dVar9 = dVar1;\n    do {\n      iVar3 = 0;\n      dVar8 = DAT_00102060;\n      do {\n        dVar8 = dVar8 * dVar7;\n        iVar3 = iVar3 + 1;\n      } while (iVar3 != (int)lVar4);\n      pdVar5 = param_1 + lVar4;\n      lVar4 = lVar4 + 1;\n      dVar9 = dVar9 + dVar8 * *pdVar5;\n    } while ((ulong)(iVar2 - 1) + 2 != lVar4);\n  } while( true );\n}"
    },
    {
        "task_id": 32,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "double func0(double *param_1,int param_2)\n\n{\n  double *pdVar1;\n  double dVar2;\n  int iVar3;\n  long lVar4;\n  int iVar5;\n  double dVar6;\n  double dVar7;\n  double dVar8;\n  double dVar9;\n  \n  dVar2 = *param_1;\n  dVar8 = dVar2;\n  if (1 < param_2) {\n    lVar4 = 1;\n    do {\n      iVar3 = 0;\n      dVar6 = DAT_00102060;\n      do {\n        dVar6 = dVar6 * 0.0;\n        iVar3 = iVar3 + 1;\n      } while (iVar3 != (int)lVar4);\n      pdVar1 = param_1 + lVar4;\n      lVar4 = lVar4 + 1;\n      dVar8 = dVar8 + dVar6 * *pdVar1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar4);\n  }\n  dVar6 = 0.0;\n  if (DAT_00102068 < (double)((ulong)dVar8 & DAT_00102080)) {\n    do {\n      while (param_2 < 2) {\n        dVar6 = dVar6 - dVar8 / 0.0;\n        dVar8 = dVar2;\n        if ((double)((ulong)dVar2 & DAT_00102080) <= DAT_00102068) {\n          return dVar6;\n        }\n      }\n      dVar9 = param_1[1] + 0.0;\n      if (param_2 != 2) {\n        lVar4 = 2;\n        do {\n          iVar5 = (int)lVar4;\n          iVar3 = 1;\n          dVar7 = DAT_00102060;\n          do {\n            dVar7 = dVar7 * dVar6;\n            iVar3 = iVar3 + 1;\n          } while (iVar3 != iVar5);\n          pdVar1 = param_1 + lVar4;\n          lVar4 = lVar4 + 1;\n          dVar9 = dVar9 + dVar7 * (double)iVar5 * *pdVar1;\n        } while ((ulong)(param_2 - 3) + 3 != lVar4);\n      }\n      lVar4 = 1;\n      dVar6 = dVar6 - dVar8 / dVar9;\n      dVar8 = dVar2;\n      do {\n        iVar3 = 0;\n        dVar9 = DAT_00102060;\n        do {\n          dVar9 = dVar9 * dVar6;\n          iVar3 = iVar3 + 1;\n        } while (iVar3 != (int)lVar4);\n        pdVar1 = param_1 + lVar4;\n        lVar4 = lVar4 + 1;\n        dVar8 = dVar8 + dVar9 * *pdVar1;\n      } while (lVar4 != (ulong)(param_2 - 2) + 2);\n    } while (DAT_00102068 < (double)((ulong)dVar8 & DAT_00102080));\n  }\n  return dVar6;\n}"
    },
    {
        "task_id": 33,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  undefined4 uVar1;\n  void *__ptr;\n  int local_24;\n  int local_20;\n  int local_1c;\n  int local_18;\n  \n  __ptr = malloc((long)(param_2 / 3 + 1) << 2);\n  local_1c = 0;\n  for (local_24 = 0; local_24 * 3 < param_2; local_24 = local_24 + 1) {\n    *(undefined4 *)((long)__ptr + (long)local_24 * 4) =\n         *(undefined4 *)(param_1 + (long)(local_24 * 3) * 4);\n    local_1c = local_1c + 1;\n  }\n  for (local_24 = 0; local_24 < local_1c + -1; local_24 = local_24 + 1) {\n    local_18 = local_24;\n    local_20 = local_24;\n    while (local_20 = local_20 + 1, local_20 < local_1c) {\n      if (*(int *)((long)__ptr + (long)local_20 * 4) < *(int *)((long)__ptr + (long)local_18 * 4)) {\n        local_18 = local_20;\n      }\n    }\n    if (local_18 != local_24) {\n      uVar1 = *(undefined4 *)((long)__ptr + (long)local_24 * 4);\n      *(undefined4 *)((long)__ptr + (long)local_24 * 4) =\n           *(undefined4 *)((long)__ptr + (long)local_18 * 4);\n      *(undefined4 *)((long)local_18 * 4 + (long)__ptr) = uVar1;\n    }\n  }\n  for (local_24 = 0; local_24 < param_2; local_24 = local_24 + 1) {\n    if (local_24 % 3 == 0) {\n      *(undefined4 *)(param_3 + (long)local_24 * 4) =\n           *(undefined4 *)((long)__ptr + (long)(local_24 / 3) * 4);\n    }\n    else {\n      *(undefined4 *)(param_3 + (long)local_24 * 4) = *(undefined4 *)(param_1 + (long)local_24 * 4);\n    }\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 33,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  undefined4 *puVar1;\n  undefined4 uVar2;\n  long lVar3;\n  void *__ptr;\n  long lVar4;\n  ulong uVar5;\n  int iVar6;\n  long lVar7;\n  ulong uVar8;\n  int iVar10;\n  bool bVar11;\n  ulong uVar9;\n  \n  __ptr = malloc((long)(param_2 / 3 + 1) << 2);\n  if (0 < param_2) {\n    lVar7 = 0;\n    lVar3 = 0;\n    do {\n      lVar4 = lVar3;\n      *(undefined4 *)((long)__ptr + lVar4 * 4) = *(undefined4 *)(param_1 + lVar7 * 4);\n      lVar7 = lVar7 + 3;\n      lVar3 = lVar4 + 1;\n    } while ((int)lVar7 < param_2);\n    iVar6 = (int)lVar4;\n    if (0 < iVar6) {\n      uVar9 = 0;\n      do {\n        iVar10 = (int)uVar9;\n        uVar5 = uVar9 & 0xffffffff;\n        if (iVar10 < iVar6) {\n          uVar8 = uVar9 + 1;\n          do {\n            if (*(int *)((long)__ptr + uVar8 * 4) < *(int *)((long)__ptr + (long)(int)uVar5 * 4)) {\n              uVar5 = uVar8 & 0xffffffff;\n            }\n            uVar8 = uVar8 + 1;\n          } while (uVar8 != uVar9 + 2 + (ulong)((iVar6 - 1U) - iVar10));\n          if ((int)uVar5 != iVar10) {\n            uVar2 = *(undefined4 *)((long)__ptr + uVar9 * 4);\n            puVar1 = (undefined4 *)((long)__ptr + (long)(int)uVar5 * 4);\n            *(undefined4 *)((long)__ptr + uVar9 * 4) = *puVar1;\n            *puVar1 = uVar2;\n          }\n        }\n        bVar11 = uVar9 != iVar6 - 1U;\n        uVar9 = uVar9 + 1;\n      } while (bVar11);\n    }\n    uVar9 = 0;\n    do {\n      iVar6 = (int)uVar9;\n      if ((iVar6 / 3) * 3 == iVar6) {\n        *(undefined4 *)(param_3 + uVar9 * 4) = *(undefined4 *)((long)__ptr + (long)(iVar6 / 3) * 4);\n      }\n      else {\n        *(undefined4 *)(param_3 + uVar9 * 4) = *(undefined4 *)(param_1 + uVar9 * 4);\n      }\n      bVar11 = uVar9 != param_2 - 1;\n      uVar9 = uVar9 + 1;\n    } while (bVar11);\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 33,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  long lVar1;\n  undefined4 *puVar2;\n  undefined4 uVar3;\n  void *__ptr;\n  long lVar4;\n  ulong uVar5;\n  long lVar6;\n  ulong uVar7;\n  ulong uVar8;\n  int iVar9;\n  int iVar10;\n  bool bVar11;\n  \n  __ptr = malloc((long)(param_2 / 3 + 1) << 2);\n  if (0 < param_2) {\n    lVar6 = 0;\n    lVar1 = 0;\n    do {\n      lVar4 = lVar1;\n      lVar1 = lVar6 * 4;\n      lVar6 = lVar6 + 3;\n      *(undefined4 *)((long)__ptr + lVar4 * 4) = *(undefined4 *)(param_1 + lVar1);\n      lVar1 = lVar4 + 1;\n    } while ((int)lVar6 < param_2);\n    iVar10 = (int)lVar4;\n    if (iVar10 != 0) {\n      uVar5 = 0;\n      do {\n        iVar9 = (int)uVar5;\n        uVar8 = uVar5 & 0xffffffff;\n        if (iVar9 < iVar10) {\n          uVar7 = uVar5 + 1;\n          do {\n            if (*(int *)((long)__ptr + uVar7 * 4) < *(int *)((long)__ptr + (long)(int)uVar8 * 4)) {\n              uVar8 = uVar7 & 0xffffffff;\n            }\n            uVar7 = uVar7 + 1;\n          } while (uVar7 != uVar5 + 2 + (ulong)((iVar10 - 1U) - iVar9));\n          if ((int)uVar8 != iVar9) {\n            uVar3 = *(undefined4 *)((long)__ptr + uVar5 * 4);\n            puVar2 = (undefined4 *)((long)__ptr + (long)(int)uVar8 * 4);\n            *(undefined4 *)((long)__ptr + uVar5 * 4) = *puVar2;\n            *puVar2 = uVar3;\n          }\n        }\n        bVar11 = iVar10 - 1U != uVar5;\n        uVar5 = uVar5 + 1;\n      } while (bVar11);\n    }\n    uVar5 = 0;\n    do {\n      if ((uint)((int)uVar5 * -0x55555555) < 0x55555556) {\n        *(undefined4 *)(param_3 + uVar5 * 4) =\n             *(undefined4 *)((long)__ptr + ((uVar5 & 0xffffffff) / 3) * 4);\n      }\n      else {\n        *(undefined4 *)(param_3 + uVar5 * 4) = *(undefined4 *)(param_1 + uVar5 * 4);\n      }\n      bVar11 = param_2 - 1 != uVar5;\n      uVar5 = uVar5 + 1;\n    } while (bVar11);\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 33,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 *param_1,int param_2,long param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined8 *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  undefined8 *__ptr;\n  undefined4 *puVar8;\n  undefined8 *puVar9;\n  uint uVar10;\n  undefined8 *puVar11;\n  ulong uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  uint uVar17;\n  \n  __ptr = (undefined8 *)malloc((long)(param_2 / 3 + 1) << 2);\n  iVar7 = _UNK_001020cc;\n  if (param_2 < 1) goto LAB_001018b6;\n  uVar13 = param_2 - 1;\n  uVar14 = uVar13 / 3 + 1;\n  if (uVar13 < 9) {\n    uVar10 = 0;\n    iVar7 = 0;\nLAB_001017b2:\n    *(undefined4 *)((long)__ptr + (long)(int)uVar10 * 4) = param_1[iVar7];\n    uVar14 = uVar10 + 1;\n    iVar7 = uVar14 * 3;\n    uVar17 = uVar10;\n    if (param_2 <= iVar7) goto LAB_001018cf;\n    *(undefined4 *)((long)__ptr + (long)(int)uVar14 * 4) = param_1[iVar7];\n    if (iVar7 + 3 < param_2) {\n      *(undefined4 *)((long)__ptr + (long)(int)(uVar10 + 2) * 4) = param_1[iVar7 + 3];\n      uVar14 = uVar10 + 2;\n    }\nLAB_001017f6:\n    puVar11 = __ptr;\n    uVar10 = 0;\n    do {\n      iVar7 = *(int *)puVar11;\n      uVar6 = uVar10 + 1;\n      puVar9 = (undefined8 *)((long)puVar11 + 4);\n      uVar15 = uVar6;\n      iVar16 = iVar7;\n      uVar17 = uVar10;\n      while( true ) {\n        puVar3 = puVar9;\n        iVar4 = *(int *)puVar9;\n        uVar5 = uVar15;\n        if (iVar16 <= *(int *)puVar9) {\n          puVar3 = (undefined8 *)((long)__ptr + (long)(int)uVar17 * 4);\n          iVar4 = iVar16;\n          uVar5 = uVar17;\n        }\n        uVar17 = uVar5;\n        iVar16 = iVar4;\n        if ((int)uVar14 <= (int)uVar15) break;\n        uVar15 = uVar15 + 1;\n        puVar9 = (undefined8 *)((long)puVar9 + 4);\n      }\n      if (uVar17 != uVar10) {\n        *(int *)puVar11 = iVar16;\n        *(int *)puVar3 = iVar7;\n      }\n      puVar11 = (undefined8 *)((long)puVar11 + 4);\n      uVar10 = uVar6;\n    } while (uVar6 != uVar14);\n  }\n  else {\n    puVar8 = param_1;\n    puVar11 = __ptr;\n    uVar10 = _UNK_001020bc;\n    do {\n      uVar17 = uVar10;\n      puVar9 = puVar11 + 2;\n      uVar1 = puVar8[6];\n      uVar2 = puVar8[9];\n      *puVar11 = CONCAT44(puVar8[3],*puVar8);\n      puVar11[1] = CONCAT44(uVar2,uVar1);\n      puVar8 = puVar8 + 0xc;\n      puVar11 = puVar9;\n      uVar10 = uVar17 + iVar7;\n    } while (puVar9 != __ptr + (ulong)(uVar14 >> 2) * 2);\n    uVar10 = uVar14 & 0xfffffffc;\n    iVar7 = uVar10 * 3;\n    if (uVar10 != uVar14) goto LAB_001017b2;\nLAB_001018cf:\n    uVar14 = uVar17;\n    if (0 < (int)uVar17) goto LAB_001017f6;\n  }\n  uVar12 = 0;\n  while( true ) {\n    if ((uint)((int)uVar12 * -0x55555555) < 0x55555556) {\n      *(int *)(param_3 + uVar12 * 4) = *(int *)((long)__ptr + ((uVar12 & 0xffffffff) / 3) * 4);\n    }\n    else {\n      *(undefined4 *)(param_3 + uVar12 * 4) = param_1[uVar12];\n    }\n    if (uVar13 == uVar12) break;\n    uVar12 = uVar12 + 1;\n  }\nLAB_001018b6:\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 34,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,int *param_3)\n\n{\n  undefined4 uVar1;\n  bool bVar2;\n  void *pvVar3;\n  int local_20;\n  int local_1c;\n  int local_18;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  local_20 = 0;\n  local_1c = 0;\n  do {\n    if (param_2 <= local_1c) {\n      for (local_1c = 0; local_18 = local_1c, local_1c < local_20 + -1; local_1c = local_1c + 1) {\n        while (local_18 = local_18 + 1, local_18 < local_20) {\n          if (*(int *)((long)pvVar3 + (long)local_18 * 4) <\n              *(int *)((long)pvVar3 + (long)local_1c * 4)) {\n            uVar1 = *(undefined4 *)((long)pvVar3 + (long)local_1c * 4);\n            *(undefined4 *)((long)pvVar3 + (long)local_1c * 4) =\n                 *(undefined4 *)((long)pvVar3 + (long)local_18 * 4);\n            *(undefined4 *)((long)local_18 * 4 + (long)pvVar3) = uVar1;\n          }\n        }\n      }\n      *param_3 = local_20;\n      return pvVar3;\n    }\n    bVar2 = false;\n    for (local_18 = 0; local_18 < local_20; local_18 = local_18 + 1) {\n      if (*(int *)(param_1 + (long)local_1c * 4) == *(int *)((long)pvVar3 + (long)local_18 * 4)) {\n        bVar2 = true;\n        break;\n      }\n    }\n    if (!bVar2) {\n      *(undefined4 *)((long)local_20 * 4 + (long)pvVar3) =\n           *(undefined4 *)((long)local_1c * 4 + param_1);\n      local_20 = local_20 + 1;\n    }\n    local_1c = local_1c + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 34,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  long lVar3;\n  int *piVar4;\n  int *piVar5;\n  int iVar6;\n  long lVar7;\n  \n  piVar1 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    piVar5 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar6 = 0;\n    do {\n      if (0 < iVar6) {\n        piVar4 = piVar1;\n        do {\n          if (*param_1 == *piVar4) goto LAB_00101263;\n          piVar4 = piVar4 + 1;\n        } while (piVar4 != piVar1 + (ulong)(iVar6 - 1) + 1);\n      }\n      piVar1[iVar6] = *param_1;\n      iVar6 = iVar6 + 1;\nLAB_00101263:\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar5);\n    if (1 < iVar6) {\n      lVar7 = 1;\n      piVar5 = piVar1;\n      do {\n        iVar2 = (int)lVar7;\n        lVar3 = lVar7;\n        while (iVar2 < iVar6) {\n          iVar2 = *piVar5;\n          if (piVar1[lVar3] < iVar2) {\n            *piVar5 = piVar1[lVar3];\n            piVar1[lVar3] = iVar2;\n          }\n          lVar3 = lVar3 + 1;\n          iVar2 = (int)lVar3;\n        }\n        lVar7 = lVar7 + 1;\n        piVar5 = piVar5 + 1;\n      } while (lVar7 != (ulong)(iVar6 - 2) + 2);\n    }\n  }\n  *param_3 = iVar6;\n  return;\n}"
    },
    {
        "task_id": 34,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int *piVar3;\n  long lVar4;\n  int *piVar5;\n  int iVar6;\n  long lVar7;\n  \n  piVar1 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    *param_3 = 0;\n    return;\n  }\n  iVar6 = 0;\n  piVar5 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (iVar6 != 0) {\n      piVar3 = piVar1;\n      do {\n        if (*piVar3 == *param_1) goto joined_r0x0010135c;\n        piVar3 = piVar3 + 1;\n      } while (piVar3 != piVar1 + (ulong)(iVar6 - 1) + 1);\n    }\n    lVar7 = (long)iVar6;\n    iVar6 = iVar6 + 1;\n    piVar1[lVar7] = *param_1;\njoined_r0x0010135c:\n    param_1 = param_1 + 1;\n    if (param_1 == piVar5) {\n      if (iVar6 != 1) {\n        lVar7 = 1;\n        piVar5 = piVar1;\n        do {\n          iVar2 = (int)lVar7;\n          lVar4 = lVar7;\n          while (iVar2 < iVar6) {\n            iVar2 = *piVar5;\n            if (piVar1[lVar4] < iVar2) {\n              *piVar5 = piVar1[lVar4];\n              piVar1[lVar4] = iVar2;\n            }\n            lVar4 = lVar4 + 1;\n            iVar2 = (int)lVar4;\n          }\n          lVar7 = lVar7 + 1;\n          piVar5 = piVar5 + 1;\n        } while (lVar7 != (ulong)(iVar6 - 2) + 2);\n      }\n      *param_3 = iVar6;\n      return;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 34,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int *piVar3;\n  long lVar4;\n  int *piVar5;\n  int iVar6;\n  long lVar7;\n  \n  piVar1 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    *param_3 = 0;\n    return;\n  }\n  iVar6 = 0;\n  piVar5 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (iVar6 != 0) {\n      piVar3 = piVar1;\n      do {\n        if (*piVar3 == *param_1) goto joined_r0x0010133c;\n        piVar3 = piVar3 + 1;\n      } while (piVar1 + (ulong)(iVar6 - 1) + 1 != piVar3);\n    }\n    lVar7 = (long)iVar6;\n    iVar6 = iVar6 + 1;\n    piVar1[lVar7] = *param_1;\njoined_r0x0010133c:\n    param_1 = param_1 + 1;\n    if (param_1 == piVar5) {\n      if (iVar6 != 1) {\n        lVar7 = 1;\n        piVar5 = piVar1;\n        do {\n          iVar2 = (int)lVar7;\n          lVar4 = lVar7;\n          while (iVar2 < iVar6) {\n            iVar2 = *piVar5;\n            if (piVar1[lVar4] < iVar2) {\n              *piVar5 = piVar1[lVar4];\n              piVar1[lVar4] = iVar2;\n            }\n            lVar4 = lVar4 + 1;\n            iVar2 = (int)lVar4;\n          }\n          lVar7 = lVar7 + 1;\n          piVar5 = piVar5 + 1;\n        } while ((ulong)(iVar6 - 2) + 2 != lVar7);\n      }\n      *param_3 = iVar6;\n      return;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 35,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}",
        "input_asm_prompt": "float func0(long param_1,int param_2)\n\n{\n  float local_10;\n  int local_c;\n  \n  local_10 = DAT_00102084;\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    if (local_10 < *(float *)(param_1 + (long)local_c * 4)) {\n      local_10 = *(float *)(param_1 + (long)local_c * 4);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 35,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float fVar2;\n  float fVar3;\n  \n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    fVar3 = DAT_00102074;\n    do {\n      fVar2 = *param_1;\n      if (*param_1 <= fVar3) {\n        fVar2 = fVar3;\n      }\n      fVar3 = fVar2;\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n    return fVar3;\n  }\n  return DAT_00102074;\n}"
    },
    {
        "task_id": 35,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float fVar2;\n  float fVar3;\n  \n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    fVar3 = DAT_0010204c;\n    do {\n      fVar2 = *param_1;\n      param_1 = param_1 + 1;\n      if (fVar2 <= fVar3) {\n        fVar2 = fVar3;\n      }\n      fVar3 = fVar2;\n    } while (param_1 != pfVar1);\n    return fVar3;\n  }\n  return DAT_0010204c;\n}"
    },
    {
        "task_id": 35,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float fVar2;\n  float fVar3;\n  \n  if (0 < param_2) {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    fVar3 = DAT_0010204c;\n    do {\n      fVar2 = *param_1;\n      param_1 = param_1 + 1;\n      if (fVar2 <= fVar3) {\n        fVar2 = fVar3;\n      }\n      fVar3 = fVar2;\n    } while (param_1 != pfVar1);\n    return fVar3;\n  }\n  return DAT_0010204c;\n}"
    },
    {
        "task_id": 36,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0;\n  for (local_10 = 0; local_10 < param_1; local_10 = local_10 + 1) {\n    if ((local_10 % 0xb == 0) || (local_10 % 0xd == 0)) {\n      for (local_c = local_10; 0 < local_c; local_c = local_c / 10) {\n        if (local_c % 10 == 7) {\n          local_14 = local_14 + 1;\n        }\n      }\n    }\n  }\n  return local_14;\n}"
    },
    {
        "task_id": 36,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  bool bVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (param_1 < 1) {\n    iVar4 = 0;\n  }\n  else {\n    iVar3 = 0;\n    iVar4 = 0;\n    do {\n      if (((iVar3 == (iVar3 / 0xb) * 0xb) || (iVar3 == (iVar3 / 0xd) * 0xd)) &&\n         (iVar2 = iVar3, 0 < iVar3)) {\n        do {\n          iVar4 = iVar4 + (uint)(iVar2 % 10 == 7);\n          bVar1 = 9 < iVar2;\n          iVar2 = iVar2 / 10;\n        } while (bVar1);\n      }\n      iVar3 = iVar3 + 1;\n    } while (param_1 != iVar3);\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 36,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}",
        "input_asm_prompt": "int func0(uint param_1)\n\n{\n  int iVar1;\n  uint uVar3;\n  int iVar4;\n  ulong uVar2;\n  \n  if ((int)param_1 < 1) {\n    return 0;\n  }\n  uVar3 = 0;\n  iVar4 = 0;\n  do {\n    while (((0x1745d174 < uVar3 * -0x45d1745d && (0x13b13b13 < uVar3 * -0x3b13b13b)) ||\n           (uVar2 = (ulong)uVar3, uVar3 == 0))) {\n      uVar3 = uVar3 + 1;\n      if (param_1 == uVar3) {\n        return iVar4;\n      }\n    }\n    do {\n      iVar1 = (int)uVar2;\n      iVar4 = iVar4 + (uint)(iVar1 + (int)(uVar2 / 10) * -10 == 7);\n      uVar2 = uVar2 / 10;\n    } while (9 < iVar1);\n    uVar3 = uVar3 + 1;\n  } while (param_1 != uVar3);\n  return iVar4;\n}"
    },
    {
        "task_id": 36,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}",
        "input_asm_prompt": "int func0(uint param_1)\n\n{\n  int iVar1;\n  uint uVar3;\n  int iVar4;\n  ulong uVar2;\n  \n  if ((int)param_1 < 1) {\n    return 0;\n  }\n  uVar3 = 1;\n  iVar4 = 0;\n  if (param_1 != 1) {\n    do {\n      while ((0x1745d174 < uVar3 * -0x45d1745d && (0x13b13b13 < uVar3 * -0x3b13b13b))) {\n        uVar3 = uVar3 + 1;\n        if (param_1 == uVar3) {\n          return iVar4;\n        }\n      }\n      uVar2 = (ulong)uVar3;\n      do {\n        iVar1 = (int)uVar2;\n        iVar4 = iVar4 + (uint)(iVar1 + (int)(uVar2 / 10) * -10 == 7);\n        uVar2 = uVar2 / 10;\n      } while (9 < iVar1);\n      uVar3 = uVar3 + 1;\n    } while (param_1 != uVar3);\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 37,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  undefined4 uVar1;\n  void *__ptr;\n  uint local_20;\n  int local_1c;\n  int local_18;\n  \n  __ptr = malloc((long)(param_2 / 2 + 1) << 2);\n  local_18 = 0;\n  for (local_20 = 0; (int)local_20 < param_2; local_20 = local_20 + 2) {\n    *(undefined4 *)((long)__ptr + (long)local_18 * 4) =\n         *(undefined4 *)((long)(int)local_20 * 4 + param_1);\n    local_18 = local_18 + 1;\n  }\n  for (local_20 = 0; (int)local_20 < local_18 + -1; local_20 = local_20 + 1) {\n    for (local_1c = 0; local_1c < (int)((local_18 - local_20) + -1); local_1c = local_1c + 1) {\n      if (*(float *)((long)__ptr + ((long)local_1c + 1) * 4) <\n          *(float *)((long)__ptr + (long)local_1c * 4)) {\n        uVar1 = *(undefined4 *)((long)__ptr + (long)local_1c * 4);\n        *(undefined4 *)((long)__ptr + (long)local_1c * 4) =\n             *(undefined4 *)(((long)local_1c + 1) * 4 + (long)__ptr);\n        *(undefined4 *)((long)__ptr + ((long)local_1c + 1) * 4) = uVar1;\n      }\n    }\n  }\n  for (local_20 = 0; (int)local_20 < param_2; local_20 = local_20 + 1) {\n    if ((local_20 & 1) == 0) {\n      *(undefined4 *)(param_3 + (long)(int)local_20 * 4) =\n           *(undefined4 *)((long)((int)local_20 / 2) * 4 + (long)__ptr);\n    }\n    else {\n      *(undefined4 *)(param_3 + (long)(int)local_20 * 4) =\n           *(undefined4 *)((long)(int)local_20 * 4 + param_1);\n    }\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 37,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  float fVar1;\n  float *__ptr;\n  long lVar2;\n  float *pfVar3;\n  ulong uVar4;\n  uint uVar5;\n  bool bVar6;\n  \n  __ptr = (float *)malloc((long)(param_2 / 2 + 1) << 2);\n  if (0 < param_2) {\n    lVar2 = 0;\n    do {\n      *(undefined4 *)((long)__ptr + lVar2 * 2) = *(undefined4 *)(param_1 + lVar2 * 4);\n      lVar2 = lVar2 + 2;\n    } while ((int)lVar2 < param_2);\n    for (uVar5 = param_2 - 1U >> 1; uVar5 != 0; uVar5 = uVar5 - 1) {\n      if (0 < (int)uVar5) {\n        pfVar3 = __ptr;\n        do {\n          fVar1 = *pfVar3;\n          if (pfVar3[1] < fVar1) {\n            *pfVar3 = pfVar3[1];\n            pfVar3[1] = fVar1;\n          }\n          pfVar3 = pfVar3 + 1;\n        } while (pfVar3 != __ptr + (ulong)(uVar5 - 1) + 1);\n      }\n    }\n    uVar4 = 0;\n    do {\n      if ((uVar4 & 1) == 0) {\n        *(float *)(param_3 + uVar4 * 4) =\n             __ptr[(int)(((uint)(uVar4 >> 0x1f) & 1) + (int)uVar4) >> 1];\n      }\n      else {\n        *(undefined4 *)(param_3 + uVar4 * 4) = *(undefined4 *)(param_1 + uVar4 * 4);\n      }\n      bVar6 = param_2 - 1 != uVar4;\n      uVar4 = uVar4 + 1;\n    } while (bVar6);\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 37,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  float fVar1;\n  float *__ptr;\n  ulong uVar2;\n  long lVar3;\n  float *pfVar4;\n  uint uVar5;\n  \n  __ptr = (float *)malloc((long)(param_2 / 2 + 1) << 2);\n  if (0 < param_2) {\n    lVar3 = 0;\n    do {\n      *(undefined4 *)((long)__ptr + lVar3 * 2) = *(undefined4 *)(param_1 + lVar3 * 4);\n      lVar3 = lVar3 + 2;\n    } while ((int)lVar3 < param_2);\n    uVar5 = param_2 - 1U >> 1;\n    while (uVar5 != 0) {\n      uVar5 = uVar5 - 1;\n      pfVar4 = __ptr;\n      do {\n        fVar1 = *pfVar4;\n        if (pfVar4[1] < fVar1) {\n          *pfVar4 = pfVar4[1];\n          pfVar4[1] = fVar1;\n        }\n        pfVar4 = pfVar4 + 1;\n      } while (pfVar4 != __ptr + (ulong)uVar5 + 1);\n    }\n    uVar2 = 0;\n    while( true ) {\n      if ((uVar2 & 1) == 0) {\n        *(float *)(param_3 + uVar2 * 4) = __ptr[(int)uVar2 >> 1];\n      }\n      else {\n        *(undefined4 *)(param_3 + uVar2 * 4) = *(undefined4 *)(param_1 + uVar2 * 4);\n      }\n      if (param_2 - 1U == uVar2) break;\n      uVar2 = uVar2 + 1;\n    }\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 37,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  undefined4 *puVar1;\n  undefined4 *puVar2;\n  float fVar3;\n  undefined auVar4 [16];\n  uint uVar5;\n  float *__ptr;\n  ulong uVar6;\n  long lVar7;\n  float *pfVar8;\n  uint uVar9;\n  uint uVar10;\n  int iVar11;\n  \n  __ptr = (float *)malloc((long)(param_2 / 2 + 1) << 2);\n  if (0 < param_2) {\n    uVar9 = param_2 - 1;\n    uVar10 = uVar9 >> 1;\n    uVar6 = (ulong)uVar10;\n    if (uVar9 < 8) {\n      iVar11 = 0;\n      uVar5 = 0;\n    }\n    else {\n      lVar7 = 0;\n      do {\n        puVar1 = (undefined4 *)(param_1 + lVar7 * 2);\n        puVar2 = (undefined4 *)(param_1 + 0x10 + lVar7 * 2);\n        auVar4._4_4_ = puVar1[2];\n        auVar4._0_4_ = *puVar1;\n        auVar4._8_4_ = *puVar2;\n        auVar4._12_4_ = puVar2[2];\n        *(undefined (*) [16])((long)__ptr + lVar7) = auVar4;\n        lVar7 = lVar7 + 0x10;\n      } while (lVar7 != (ulong)(uVar9 >> 3) << 4);\n      iVar11 = (uVar9 >> 3) * 4;\n      uVar5 = uVar9 & 0xfffffff8;\n    }\n    __ptr[iVar11] = *(float *)(param_1 + (long)(int)uVar5 * 4);\n    if (param_2 <= (int)(uVar5 + 2)) goto joined_r0x0010184f;\n    __ptr[iVar11 + 1] = *(float *)(param_1 + (long)(int)(uVar5 + 2) * 4);\n    if ((int)(uVar5 + 4) < param_2) {\n      __ptr[iVar11 + 2] = *(float *)(param_1 + (long)(int)(uVar5 + 4) * 4);\n      if ((int)(uVar5 + 6) < param_2) {\n        __ptr[(long)(iVar11 + 2) + 1] = *(float *)(param_1 + (long)(int)(uVar5 + 6) * 4);\n      }\n    }\n    do {\n      while (iVar11 = (int)uVar6, iVar11 < 1) {\n        uVar6 = (ulong)(iVar11 - 1U);\n        if (iVar11 - 1U == 0) goto LAB_001017ec;\n      }\n      uVar10 = iVar11 - 1;\n      uVar6 = (ulong)uVar10;\n      pfVar8 = __ptr;\n      do {\n        fVar3 = *pfVar8;\n        if (pfVar8[1] < fVar3) {\n          *pfVar8 = pfVar8[1];\n          pfVar8[1] = fVar3;\n        }\n        pfVar8 = pfVar8 + 1;\n      } while (pfVar8 != __ptr + uVar6 + 1);\njoined_r0x0010184f:\n    } while (uVar10 != 0);\nLAB_001017ec:\n    uVar6 = 0;\n    while( true ) {\n      if ((uVar6 & 1) == 0) {\n        *(float *)(param_3 + uVar6 * 4) = __ptr[(int)uVar6 >> 1];\n      }\n      else {\n        *(undefined4 *)(param_3 + uVar6 * 4) = *(undefined4 *)(param_1 + uVar6 * 4);\n      }\n      if (uVar6 == uVar9) break;\n      uVar6 = uVar6 + 1;\n    }\n  }\n  free(__ptr);\n  return;\n}"
    },
    {
        "task_id": 38,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  char cVar1;\n  char cVar2;\n  int iVar3;\n  int iVar4;\n  size_t sVar5;\n  long in_FS_OFFSET;\n  int local_24;\n  char local_14 [4];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar5 = strlen(param_1);\n  iVar3 = (int)sVar5;\n  for (local_24 = 0; local_24 < (iVar3 + 2) / 3; local_24 = local_24 + 1) {\n    if (iVar3 < (local_24 + 1) * 3) {\n      iVar4 = iVar3 + local_24 * -3;\n    }\n    else {\n      iVar4 = 3;\n    }\n    strncpy(local_14,param_1 + local_24 * 3,(long)iVar4);\n    local_14[iVar4] = '\\0';\n    cVar2 = local_14[2];\n    cVar1 = local_14[0];\n    if (iVar4 == 3) {\n      if (param_2 == 0) {\n        local_14[0] = local_14[1];\n        local_14[1] = local_14[2];\n        local_14[2] = cVar1;\n      }\n      else {\n        local_14[2] = local_14[1];\n        local_14[1] = local_14[0];\n        local_14[0] = cVar2;\n      }\n    }\n    strncpy(param_1 + local_24 * 3,local_14,(long)iVar4);\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 38,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  char cVar1;\n  ulong uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  char *pcVar6;\n  size_t __n;\n  long in_FS_OFFSET;\n  char local_44 [4];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  uVar2 = 0xffffffffffffffff;\n  pcVar6 = param_1;\n  do {\n    if (uVar2 == 0) break;\n    uVar2 = uVar2 - 1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar1 != '\\0');\n  uVar2 = ~uVar2 - 1;\n  iVar4 = (int)uVar2;\n  if (0 < iVar4) {\n    iVar3 = 0;\n    do {\n      iVar3 = iVar3 + 1;\n      iVar5 = (int)uVar2;\n      if (SBORROW4(iVar4,iVar3 * 3) == iVar4 + iVar3 * -3 < 0) {\n        strncpy(local_44,param_1,3);\n        local_44[3] = 0;\n        __n = 3;\nLAB_0010131c:\n        cVar1 = local_44[0];\n        if (param_2 == 0) {\n          local_44[0] = local_44[1];\n          local_44[1] = local_44[2];\n          local_44[2] = cVar1;\n        }\n        else {\n          cVar1 = local_44[2];\n          local_44[2] = local_44[1];\n          local_44[1] = local_44[0];\n          local_44[0] = cVar1;\n        }\n      }\n      else {\n        __n = (size_t)iVar5;\n        __strncpy_chk(local_44,param_1,__n,4);\n        local_44[__n] = '\\0';\n        if (iVar5 == 3) goto LAB_0010131c;\n      }\n      strncpy(param_1,local_44,__n);\n      param_1 = param_1 + 3;\n      uVar2 = (ulong)(iVar5 - 3);\n    } while (iVar3 < (iVar4 + 2) / 3);\n  }\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 38,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  size_t sVar3;\n  char *__src;\n  int iVar4;\n  int iVar5;\n  long in_FS_OFFSET;\n  char local_44 [4];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  if (0 < iVar2) {\n    iVar5 = 0;\n    __src = param_1;\n    do {\n      iVar5 = iVar5 + 1;\n      if (iVar2 < iVar5 * 3) {\n        iVar4 = (iVar2 + (int)param_1) - (int)__src;\n        sVar3 = (size_t)iVar4;\n        __strncpy_chk(local_44,__src,sVar3,4);\n        local_44[sVar3] = '\\0';\n        if (iVar4 == 3) goto LAB_0010144d;\n      }\n      else {\n        strncpy(local_44,__src,3);\n        local_44[3] = 0;\nLAB_0010144d:\n        cVar1 = local_44[2];\n        local_44[2] = local_44[0];\n        if (param_2 == 0) {\n          sVar3 = 3;\n          local_44[0] = local_44[1];\n          local_44[1] = cVar1;\n        }\n        else {\n          local_44[2] = local_44[1];\n          sVar3 = 3;\n          local_44[1] = local_44[0];\n          local_44[0] = cVar1;\n        }\n      }\n      strncpy(__src,local_44,sVar3);\n      __src = __src + 3;\n    } while (iVar5 < (iVar2 + 2) / 3);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 38,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  size_t sVar4;\n  int iVar5;\n  int iVar6;\n  long in_FS_OFFSET;\n  undefined local_44 [2];\n  undefined uStack_42;\n  undefined local_41;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  iVar1 = (iVar2 + 2) / 3;\n  if (0 < iVar2) {\n    if (param_2 == 0) {\n      iVar6 = 0;\n      do {\n        iVar6 = iVar6 + 1;\n        iVar5 = (int)sVar3;\n        if (iVar2 < iVar6 * 3) {\n          sVar4 = (size_t)iVar5;\n          __strncpy_chk(local_44,param_1,sVar4,4);\n          local_44[sVar4] = 0;\n          if (iVar5 == 3) goto LAB_0010161d;\n        }\n        else {\n          strncpy(local_44,param_1,3);\n          local_41 = 0;\nLAB_0010161d:\n          _local_44 = CONCAT12((char)_local_44,stack0xffffffffffffffbd);\n          sVar4 = 3;\n        }\n        sVar3 = (size_t)(iVar5 - 3);\n        strncpy(param_1,local_44,sVar4);\n        param_1 = param_1 + 3;\n      } while (iVar6 < iVar1);\n    }\n    else {\n      iVar6 = 0;\n      do {\n        iVar6 = iVar6 + 1;\n        iVar5 = (int)sVar3;\n        if (SBORROW4(iVar2,iVar6 * 3) == iVar2 + iVar6 * -3 < 0) {\n          strncpy(local_44,param_1,3);\n          local_41 = 0;\nLAB_001016d5:\n          _local_44 = CONCAT21(local_44,uStack_42);\n          sVar4 = 3;\n        }\n        else {\n          sVar4 = (size_t)iVar5;\n          __strncpy_chk(local_44,param_1,sVar4,4);\n          local_44[sVar4] = 0;\n          if (iVar5 == 3) goto LAB_001016d5;\n        }\n        sVar3 = (size_t)(iVar5 - 3);\n        strncpy(param_1,local_44,sVar4);\n        param_1 = param_1 + 3;\n      } while (iVar6 < iVar1);\n    }\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 39,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int iVar1;\n  bool bVar2;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_10;\n  \n  local_20 = 1;\n  local_1c = 2;\n  local_18 = 0;\n  iVar1 = local_1c;\n  do {\n    local_1c = iVar1;\n    if (param_1 <= local_18) {\n      return 0;\n    }\n    iVar1 = local_20 + local_1c;\n    local_20 = local_1c;\n    bVar2 = true;\n    for (local_10 = 2; local_10 * local_10 <= local_1c; local_10 = local_10 + 1) {\n      if (local_1c % local_10 == 0) {\n        bVar2 = false;\n        break;\n      }\n    }\n    if (bVar2) {\n      local_18 = local_18 + 1;\n    }\n    if (local_18 == param_1) {\n      return local_1c;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 39,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(int param_1)\n\n{\n  uint uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  \n  iVar4 = 0;\n  uVar5 = 2;\n  uVar1 = 1;\n  do {\n    do {\n      while( true ) {\n        uVar3 = uVar5;\n        if (param_1 <= iVar4) {\n          return 0;\n        }\n        uVar5 = uVar1 + uVar3;\n        uVar1 = uVar3;\n        if (3 < (int)uVar3) break;\nLAB_00101167:\n        iVar4 = iVar4 + 1;\n        if (param_1 == iVar4) {\n          return uVar3;\n        }\n      }\n    } while ((uVar3 & 1) == 0);\n    iVar2 = 2;\n    do {\n      iVar2 = iVar2 + 1;\n      if ((int)uVar3 < iVar2 * iVar2) goto LAB_00101167;\n    } while ((int)uVar3 % iVar2 != 0);\n  } while( true );\n}"
    },
    {
        "task_id": 39,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(int param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  \n  if (0 < param_1) {\n    iVar5 = 0;\n    uVar1 = 2;\n    uVar2 = 1;\n    do {\n      uVar4 = uVar1;\n      if ((int)uVar4 < 4) {\nLAB_001016a7:\n        iVar5 = iVar5 + 1;\n        if (param_1 == iVar5) {\n          return uVar4;\n        }\n      }\n      else if ((uVar4 & 1) != 0) {\n        iVar3 = 2;\n        do {\n          iVar3 = iVar3 + 1;\n          if ((int)uVar4 < iVar3 * iVar3) goto LAB_001016a7;\n        } while ((int)uVar4 % iVar3 != 0);\n      }\n      uVar1 = uVar4 + uVar2;\n      uVar2 = uVar4;\n    } while (iVar5 < param_1);\n  }\n  return 0;\n}"
    },
    {
        "task_id": 39,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(int param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  \n  if (0 < param_1) {\n    iVar5 = 0;\n    uVar1 = 2;\n    uVar2 = 1;\n    do {\n      uVar4 = uVar1;\n      if ((int)uVar4 < 4) {\nLAB_001016a7:\n        iVar5 = iVar5 + 1;\n        if (param_1 == iVar5) {\n          return uVar4;\n        }\n      }\n      else if ((uVar4 & 1) != 0) {\n        iVar3 = 2;\n        do {\n          iVar3 = iVar3 + 1;\n          if ((int)uVar4 < iVar3 * iVar3) goto LAB_001016a7;\n        } while ((int)uVar4 % iVar3 != 0);\n      }\n      uVar1 = uVar4 + uVar2;\n      uVar2 = uVar4;\n    } while (iVar5 < param_1);\n  }\n  return 0;\n}"
    },
    {
        "task_id": 40,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0;\n  do {\n    local_10 = local_14;\n    if (param_2 <= local_14) {\n      return 0;\n    }\n    while (local_10 = local_10 + 1, local_c = local_10, local_10 < param_2) {\n      while (local_c = local_c + 1, local_c < param_2) {\n        if (*(int *)(param_1 + (long)local_c * 4) +\n            *(int *)(param_1 + (long)local_14 * 4) + *(int *)(param_1 + (long)local_10 * 4) == 0) {\n          return 1;\n        }\n      }\n    }\n    local_14 = local_14 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 40,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  lVar1 = 1;\n  do {\n    lVar3 = lVar1;\n    if (lVar3 == (ulong)(param_2 - 1) + 1) {\n      return 0;\n    }\n    for (lVar2 = lVar3 + 1; lVar1 = lVar3 + 1, (int)lVar2 < param_2; lVar2 = lVar2 + 1) {\n      lVar1 = lVar2;\n      do {\n        if (*(int *)(param_1 + -4 + lVar2 * 4) + *(int *)(param_1 + -4 + lVar3 * 4) +\n            *(int *)(param_1 + lVar1 * 4) == 0) {\n          return 1;\n        }\n        lVar1 = lVar1 + 1;\n      } while ((int)lVar1 < param_2);\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 40,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  int iVar3;\n  long lVar4;\n  long lVar5;\n  \n  if (0 < param_2) {\n    lVar1 = 1;\n    while (lVar5 = lVar1, lVar5 != (ulong)(param_2 - 1) + 1) {\n      lVar1 = lVar5 + 1;\n      iVar3 = (int)lVar1;\n      lVar4 = lVar1;\n      while (iVar3 < param_2) {\n        lVar2 = lVar4;\n        do {\n          if (*(int *)(param_1 + -4 + lVar4 * 4) + *(int *)(param_1 + -4 + lVar5 * 4) +\n              *(int *)(param_1 + lVar2 * 4) == 0) {\n            return 1;\n          }\n          lVar2 = lVar2 + 1;\n        } while ((int)lVar2 < param_2);\n        lVar4 = lVar4 + 1;\n        iVar3 = (int)lVar4;\n      }\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 40,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  int iVar3;\n  long lVar4;\n  long lVar5;\n  \n  if (0 < param_2) {\n    lVar1 = 1;\n    while (lVar5 = lVar1, lVar5 != (ulong)(param_2 - 1) + 1) {\n      lVar1 = lVar5 + 1;\n      iVar3 = (int)lVar1;\n      lVar4 = lVar1;\n      while (iVar3 < param_2) {\n        lVar2 = lVar4;\n        do {\n          if (*(int *)(param_1 + -4 + lVar4 * 4) + *(int *)(param_1 + -4 + lVar5 * 4) +\n              *(int *)(param_1 + lVar2 * 4) == 0) {\n            return 1;\n          }\n          lVar2 = lVar2 + 1;\n        } while ((int)lVar2 < param_2);\n        lVar4 = lVar4 + 1;\n        iVar3 = (int)lVar4;\n      }\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 41,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return param_1 * param_1;\n}"
    },
    {
        "task_id": 41,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return param_1 * param_1;\n}"
    },
    {
        "task_id": 41,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return param_1 * param_1;\n}"
    },
    {
        "task_id": 41,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return param_1 * param_1;\n}"
    },
    {
        "task_id": 42,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  int local_c;\n  \n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    *(int *)(param_1 + (long)local_c * 4) = *(int *)(param_1 + (long)local_c * 4) + 1;\n  }\n  return;\n}"
    },
    {
        "task_id": 42,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      *param_1 = *param_1 + 1;\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 42,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      *param_1 = *param_1 + 1;\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 42,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,uint param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  int *piVar7;\n  \n  iVar4 = _UNK_0010208c;\n  iVar3 = _UNK_00102088;\n  iVar2 = _UNK_00102084;\n  iVar1 = _DAT_00102080;\n  if (0 < (int)param_2) {\n    if (param_2 - 1 < 3) {\n      uVar5 = 0;\n    }\n    else {\n      piVar6 = param_1;\n      do {\n        piVar7 = piVar6 + 4;\n        *piVar6 = *piVar6 + iVar1;\n        piVar6[1] = piVar6[1] + iVar2;\n        piVar6[2] = piVar6[2] + iVar3;\n        piVar6[3] = piVar6[3] + iVar4;\n        piVar6 = piVar7;\n      } while (piVar7 != param_1 + (ulong)(param_2 >> 2) * 4);\n      uVar5 = param_2 & 0xfffffffc;\n      if ((param_2 & 3) == 0) {\n        return;\n      }\n    }\n    param_1[(int)uVar5] = param_1[(int)uVar5] + 1;\n    if ((int)(uVar5 + 1) < (int)param_2) {\n      param_1[(int)(uVar5 + 1)] = param_1[(int)(uVar5 + 1)] + 1;\n      if ((int)(uVar5 + 2) < (int)param_2) {\n        param_1[(int)(uVar5 + 2)] = param_1[(int)(uVar5 + 2)] + 1;\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 43,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  do {\n    local_c = local_10;\n    if (param_2 <= local_10) {\n      return 0;\n    }\n    while (local_c = local_c + 1, local_c < param_2) {\n      if (*(int *)(param_1 + (long)local_c * 4) + *(int *)(param_1 + (long)local_10 * 4) == 0) {\n        return 1;\n      }\n    }\n    local_10 = local_10 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 43,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  lVar2 = 1;\n  do {\n    if (lVar2 == (ulong)(param_2 - 1) + 1) {\n      return 0;\n    }\n    lVar1 = lVar2;\n    do {\n      if (*(int *)(param_1 + -4 + lVar2 * 4) + *(int *)(param_1 + lVar1 * 4) == 0) {\n        return 1;\n      }\n      lVar1 = lVar1 + 1;\n    } while ((int)lVar1 < param_2);\n    lVar2 = lVar2 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 43,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_2) {\n    lVar2 = 1;\n    lVar3 = (ulong)(param_2 - 1) + 1;\n    if (lVar3 != 1) {\n      do {\n        lVar1 = lVar2;\n        do {\n          if (*(int *)(param_1 + -4 + lVar2 * 4) + *(int *)(param_1 + lVar1 * 4) == 0) {\n            return 1;\n          }\n          lVar1 = lVar1 + 1;\n        } while ((int)lVar1 < param_2);\n        lVar2 = lVar2 + 1;\n      } while (lVar2 != lVar3);\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 43,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_2) {\n    lVar2 = 1;\n    lVar3 = (ulong)(param_2 - 1) + 1;\n    if (lVar3 != 1) {\n      do {\n        lVar1 = lVar2;\n        do {\n          if (*(int *)(param_1 + -4 + lVar2 * 4) + *(int *)(param_1 + lVar1 * 4) == 0) {\n            return 1;\n          }\n          lVar1 = lVar1 + 1;\n        } while ((int)lVar1 < param_2);\n        lVar2 = lVar2 + 1;\n      } while (lVar3 != lVar2);\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 44,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,long param_3)\n\n{\n  long in_FS_OFFSET;\n  int local_4c;\n  int local_40;\n  int local_3c;\n  char acStack_38 [40];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_40 = 0;\n  for (local_4c = param_1; 0 < local_4c; local_4c = local_4c / param_2) {\n    acStack_38[local_40] = (char)(local_4c % param_2) + '0';\n    local_40 = local_40 + 1;\n  }\n  local_3c = 0;\n  while (0 < local_40) {\n    local_40 = local_40 + -1;\n    *(char *)(local_3c + param_3) = acStack_38[local_40];\n    local_3c = local_3c + 1;\n  }\n  *(undefined *)(param_3 + local_3c) = 0;\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 44,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(ulong param_1,int param_2,char *param_3)\n\n{\n  ulong uVar1;\n  ulong uVar2;\n  char *pcVar3;\n  long lVar4;\n  char *pcVar5;\n  int iVar6;\n  long in_FS_OFFSET;\n  undefined8 uStack_40;\n  char local_38 [40];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  if ((int)param_1 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      iVar6 = (int)lVar4;\n      uVar1 = (ulong)(uint)((int)param_1 >> 0x1f) << 0x20 | param_1 & 0xffffffff;\n      uVar2 = (long)uVar1 / (long)param_2;\n      local_38[lVar4 + -1] = (char)((long)uVar1 % (long)param_2) + '0';\n      param_1 = uVar2 & 0xffffffff;\n      lVar4 = lVar4 + 1;\n    } while (0 < (int)uVar2);\n    if (iVar6 < 1) {\n      iVar6 = 0;\n    }\n    else {\n      pcVar3 = local_38 + iVar6;\n      pcVar5 = param_3;\n      do {\n        *pcVar5 = pcVar3[-1];\n        pcVar3 = pcVar3 + -1;\n        pcVar5 = pcVar5 + 1;\n      } while (pcVar3 != local_38 + ((long)iVar6 - (ulong)(iVar6 - 1)) + -1);\n    }\n  }\n  param_3[iVar6] = '\\0';\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  uStack_40 = main;\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 44,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,undefined *param_3)\n\n{\n  int iVar1;\n  undefined *puVar2;\n  int iVar3;\n  long lVar4;\n  undefined *puVar5;\n  uint uVar6;\n  long lVar7;\n  long in_FS_OFFSET;\n  undefined8 uStack_40;\n  undefined local_38 [40];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  lVar7 = 0;\n  if (0 < param_1) {\n    lVar4 = 1;\n    do {\n      iVar3 = (int)lVar4;\n      lVar7 = (long)iVar3;\n      iVar1 = param_1 / param_2;\n      uVar6 = param_1 % param_2 + 0x30;\n      local_38[lVar4 + -1] = (char)uVar6;\n      lVar4 = lVar4 + 1;\n      param_1 = iVar1;\n    } while (0 < iVar1);\n    puVar2 = param_3;\n    puVar5 = local_38 + lVar7;\n    while( true ) {\n      *puVar2 = (char)uVar6;\n      if (param_3 + (iVar3 - 1) == puVar2) break;\n      uVar6 = (uint)(byte)puVar5[-2];\n      puVar2 = puVar2 + 1;\n      puVar5 = puVar5 + -1;\n    }\n    param_3 = param_3 + lVar7;\n  }\n  *param_3 = 0;\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  uStack_40 = &UNK_001015f4;\n  __stack_chk_fail(lVar7);\n}"
    },
    {
        "task_id": 44,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,char *param_3)\n\n{\n  char cVar1;\n  int iVar2;\n  char *pcVar3;\n  char *pcVar4;\n  int iVar5;\n  long lVar6;\n  char *pcVar7;\n  long lVar8;\n  long in_FS_OFFSET;\n  undefined8 uStack_40;\n  char local_38 [40];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  lVar8 = 0;\n  if (0 < param_1) {\n    lVar6 = 1;\n    do {\n      iVar5 = (int)lVar6;\n      lVar8 = (long)iVar5;\n      iVar2 = param_1 / param_2;\n      local_38[lVar6 + -1] = (char)(param_1 % param_2) + '0';\n      lVar6 = lVar6 + 1;\n      param_1 = iVar2;\n    } while (0 < iVar2);\n    pcVar7 = local_38 + lVar8 + -1;\n    pcVar3 = param_3;\n    do {\n      cVar1 = *pcVar7;\n      pcVar4 = pcVar3 + 1;\n      pcVar7 = pcVar7 + -1;\n      *pcVar3 = cVar1;\n      pcVar3 = pcVar4;\n    } while (pcVar4 != param_3 + (ulong)(iVar5 - 1) + 1);\n    param_3 = param_3 + lVar8;\n  }\n  *param_3 = '\\0';\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  uStack_40 = &UNK_00101524;\n  __stack_chk_fail(lVar8);\n}"
    },
    {
        "task_id": 45,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2)\n\n{\n  return DAT_00102098 * param_1 * param_2;\n}"
    },
    {
        "task_id": 45,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2)\n\n{\n  return param_1 * param_2 * _DAT_00102004;\n}"
    },
    {
        "task_id": 45,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2)\n\n{\n  return param_1 * param_2 * _DAT_00102004;\n}"
    },
    {
        "task_id": 45,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2)\n\n{\n  return param_1 * param_2 * _DAT_00102004;\n}"
    },
    {
        "task_id": 46,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long in_FS_OFFSET;\n  int local_1ac;\n  int local_1a8 [102];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_1a8[0] = 0;\n  local_1a8[1] = 0;\n  local_1a8[2] = 2;\n  local_1a8[3] = 0;\n  for (local_1ac = 4; local_1ac <= param_1; local_1ac = local_1ac + 1) {\n    local_1a8[local_1ac] =\n         local_1a8[local_1ac + -1] + local_1a8[local_1ac + -2] + local_1a8[local_1ac + -3] +\n         local_1a8[local_1ac + -4];\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_1a8[param_1];\n}"
    },
    {
        "task_id": 46,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int *piVar1;\n  long in_FS_OFFSET;\n  int local_1a8 [102];\n  long local_10;\n  \n  piVar1 = local_1a8;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_1a8[0] = 0;\n  local_1a8[1] = 0;\n  local_1a8[2] = 2;\n  local_1a8[3] = 0;\n  if (3 < param_1) {\n    do {\n      piVar1[4] = piVar1[2] + piVar1[3] + piVar1[1] + *piVar1;\n      piVar1 = piVar1 + 1;\n    } while (piVar1 != local_1a8 + (ulong)(param_1 - 4) + 1);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_1a8[param_1];\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 46,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  long in_FS_OFFSET;\n  undefined8 local_1a8;\n  undefined8 local_1a0;\n  int local_198 [98];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_1a8 = 0;\n  local_1a0 = 2;\n  if (3 < param_1) {\n    iVar6 = 0;\n    iVar5 = 0;\n    iVar2 = 2;\n    iVar1 = 0;\n    piVar3 = (int *)((long)&local_1a8 + 4);\n    while( true ) {\n      piVar4 = piVar3 + 1;\n      piVar3[3] = iVar1 + iVar2 + iVar5 + iVar6;\n      if (piVar4 == local_198 + ((ulong)(param_1 - 4) - 2)) break;\n      iVar1 = piVar3[3];\n      iVar2 = piVar3[2];\n      iVar5 = *piVar4;\n      iVar6 = *piVar3;\n      piVar3 = piVar4;\n    }\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return *(undefined4 *)((long)&local_1a8 + (long)param_1 * 4);\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 46,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  undefined8 *puVar3;\n  int iVar4;\n  int iVar5;\n  int *piVar6;\n  int iVar7;\n  long in_FS_OFFSET;\n  undefined8 local_1a8;\n  undefined8 uStack_1a0;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_1a8 = _DAT_00102070;\n  uVar1 = local_1a8;\n  uStack_1a0 = _UNK_00102078;\n  uVar2 = uStack_1a0;\n  if (3 < param_1) {\n    if (param_1 < 7) {\n      iVar5 = 4;\n    }\n    else {\n      uStack_1a0._0_4_ = (int)_UNK_00102078;\n      uStack_1a0._4_4_ = (int)((ulong)_UNK_00102078 >> 0x20);\n      local_1a8._4_4_ = (int)((ulong)_DAT_00102070 >> 0x20);\n      puVar3 = &local_1a8;\n      iVar4 = 4;\n      do {\n        local_1a8._4_4_ = local_1a8._4_4_ + (int)uStack_1a0 + uStack_1a0._4_4_ + *(int *)puVar3;\n        *(int *)((long)puVar3 + 0x10) = local_1a8._4_4_;\n        uStack_1a0._0_4_ =\n             (int)uStack_1a0 + local_1a8._4_4_ + uStack_1a0._4_4_ + *(int *)((long)puVar3 + 4);\n        *(int *)((long)puVar3 + 0x14) = (int)uStack_1a0;\n        uStack_1a0._4_4_ =\n             uStack_1a0._4_4_ + local_1a8._4_4_ + (int)uStack_1a0 + *(int *)((long)puVar3 + 8);\n        iVar5 = iVar4 + 3;\n        iVar7 = iVar4 + 4;\n        *(int *)((long)puVar3 + 0x18) = uStack_1a0._4_4_;\n        puVar3 = (undefined8 *)((long)puVar3 + 0xc);\n        iVar4 = iVar5;\n      } while (iVar7 < param_1 + -1);\n    }\n    piVar6 = (int *)((long)&local_1a8 + (long)iVar5 * 4);\n    do {\n      iVar5 = iVar5 + 1;\n      *piVar6 = piVar6[-1] + piVar6[-2] + piVar6[-3] + piVar6[-4];\n      piVar6 = piVar6 + 1;\n    } while (iVar5 <= param_1);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return *(undefined4 *)((long)&local_1a8 + (long)param_1 * 4);\n  }\n  local_1a8 = uVar1;\n  uStack_1a0 = uVar2;\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 47,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(long param_1,int param_2)\n\n{\n  undefined4 uVar1;\n  float fVar2;\n  int local_14;\n  int local_10;\n  \n  for (local_14 = 0; local_10 = local_14, local_14 < param_2; local_14 = local_14 + 1) {\n    while (local_10 = local_10 + 1, local_10 < param_2) {\n      if (*(float *)(param_1 + (long)local_10 * 4) < *(float *)(param_1 + (long)local_14 * 4)) {\n        uVar1 = *(undefined4 *)(param_1 + (long)local_14 * 4);\n        *(undefined4 *)(param_1 + (long)local_14 * 4) =\n             *(undefined4 *)((long)local_10 * 4 + param_1);\n        *(undefined4 *)(param_1 + (long)local_10 * 4) = uVar1;\n      }\n    }\n  }\n  if (param_2 % 2 == 1) {\n    fVar2 = *(float *)(param_1 + (long)(param_2 / 2) * 4);\n  }\n  else {\n    fVar2 = DAT_001020f8 *\n            (*(float *)(param_1 + (long)(param_2 / 2) * 4) +\n            *(float *)(param_1 + (long)(param_2 / 2) * 4 + -4));\n  }\n  return fVar2;\n}"
    },
    {
        "task_id": 47,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  float fVar1;\n  long lVar2;\n  long lVar3;\n  float *pfVar4;\n  \n  if (0 < param_2) {\n    pfVar4 = param_1;\n    for (lVar3 = 1; lVar2 = lVar3, lVar3 != (ulong)(param_2 - 1) + 1; lVar3 = lVar3 + 1) {\n      do {\n        fVar1 = *pfVar4;\n        if (param_1[lVar2] < fVar1) {\n          *pfVar4 = param_1[lVar2];\n          param_1[lVar2] = fVar1;\n        }\n        lVar2 = lVar2 + 1;\n      } while ((int)lVar2 < param_2);\n      pfVar4 = pfVar4 + 1;\n    }\n  }\n  if (param_2 % 2 == 1) {\n    return param_1[param_2 / 2];\n  }\n  return (param_1[(long)(param_2 / 2) + -1] + param_1[param_2 / 2]) * _DAT_001020e8;\n}"
    },
    {
        "task_id": 47,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  float *pfVar3;\n  long lVar4;\n  float fVar5;\n  \n  if (0 < param_2) {\n    lVar1 = 1;\n    lVar4 = (ulong)(param_2 - 1) + 1;\n    pfVar3 = param_1;\n    lVar2 = lVar1;\n    if (lVar4 != 1) {\n      do {\n        do {\n          fVar5 = *pfVar3;\n          if (param_1[lVar1] < fVar5) {\n            *pfVar3 = param_1[lVar1];\n            param_1[lVar1] = fVar5;\n          }\n          lVar1 = lVar1 + 1;\n        } while ((int)lVar1 < param_2);\n        lVar1 = lVar2 + 1;\n        pfVar3 = pfVar3 + 1;\n        lVar2 = lVar1;\n      } while (lVar4 != lVar1);\n    }\n  }\n  fVar5 = param_1[param_2 / 2];\n  if (param_2 % 2 != 1) {\n    fVar5 = (fVar5 + param_1[(long)(param_2 / 2) + -1]) * _DAT_001020e8;\n  }\n  return fVar5;\n}"
    },
    {
        "task_id": 47,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  float *pfVar3;\n  float fVar4;\n  \n  if ((0 < param_2) && (param_2 != 1)) {\n    lVar1 = 1;\n    pfVar3 = param_1;\n    lVar2 = lVar1;\n    do {\n      do {\n        fVar4 = *pfVar3;\n        if (param_1[lVar1] < fVar4) {\n          *pfVar3 = param_1[lVar1];\n          param_1[lVar1] = fVar4;\n        }\n        lVar1 = lVar1 + 1;\n      } while ((int)lVar1 < param_2);\n      lVar1 = lVar2 + 1;\n      pfVar3 = pfVar3 + 1;\n      lVar2 = lVar1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar1);\n  }\n  fVar4 = param_1[param_2 / 2];\n  if (param_2 % 2 != 1) {\n    fVar4 = (fVar4 + param_1[(long)(param_2 / 2) + -1]) * _DAT_001020e8;\n  }\n  return fVar4;\n}"
    },
    {
        "task_id": 48,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  int local_10;\n  \n  sVar1 = strlen(param_1);\n  local_10 = 0;\n  while( true ) {\n    if ((int)sVar1 / 2 <= local_10) {\n      return 1;\n    }\n    if (param_1[local_10] != param_1[((int)sVar1 + -1) - local_10]) break;\n    local_10 = local_10 + 1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 48,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  ulong uVar4;\n  char *pcVar5;\n  \n  uVar4 = 0xffffffffffffffff;\n  pcVar5 = param_1;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  iVar2 = (int)(~uVar4 - 1);\n  if (iVar2 < 2) {\n    return 1;\n  }\n  pcVar5 = param_1 + (long)iVar2 + -1;\n  lVar3 = 0;\n  do {\n    if (param_1[lVar3] != *pcVar5) {\n      return 0;\n    }\n    lVar3 = lVar3 + 1;\n    pcVar5 = pcVar5 + -1;\n  } while ((int)lVar3 < (int)(((uint)(~uVar4 - 1 >> 0x1f) & 1) + iVar2) >> 1);\n  return 1;\n}"
    },
    {
        "task_id": 48,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  long lVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (1 < iVar1) {\n    lVar4 = 0;\n    pcVar3 = param_1 + (iVar1 + -1);\n    do {\n      if (param_1[lVar4] != *pcVar3) {\n        return 0;\n      }\n      lVar4 = lVar4 + 1;\n      pcVar3 = pcVar3 + -1;\n    } while ((int)lVar4 < (int)(((uint)(sVar2 >> 0x1f) & 1) + iVar1) >> 1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 48,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  long lVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (1 < iVar1) {\n    lVar4 = 0;\n    pcVar3 = param_1 + (iVar1 + -1);\n    do {\n      if (param_1[lVar4] != *pcVar3) {\n        return 0;\n      }\n      lVar4 = lVar4 + 1;\n      pcVar3 = pcVar3 + -1;\n    } while ((int)lVar4 < (int)(((uint)(sVar2 >> 0x1f) & 1) + iVar1) >> 1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 49,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 1;\n  for (local_c = 0; local_c < param_1; local_c = local_c + 1) {\n    local_10 = (local_10 * 2) % param_2;\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 49,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_1 < 1) {\n    iVar2 = 1;\n  }\n  else {\n    iVar1 = 0;\n    iVar2 = 1;\n    do {\n      iVar2 = (iVar2 * 2) % param_2;\n      iVar1 = iVar1 + 1;\n    } while (param_1 != iVar1);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 49,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(int param_1,int param_2)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (0 < param_1) {\n    iVar2 = 0;\n    iVar3 = 1;\n    do {\n      iVar2 = iVar2 + 1;\n      uVar1 = (long)(iVar3 * 2) % (long)param_2;\n      iVar3 = (int)uVar1;\n    } while (param_1 != iVar2);\n    return uVar1 & 0xffffffff;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 49,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(int param_1,int param_2)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (0 < param_1) {\n    iVar2 = 0;\n    iVar3 = 1;\n    do {\n      iVar2 = iVar2 + 1;\n      uVar1 = (long)(iVar3 * 2) % (long)param_2;\n      iVar3 = (int)uVar1;\n    } while (param_1 != iVar2);\n    return uVar1 & 0xffffffff;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 50,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  int iVar3;\n  ulong local_18;\n  \n  if (param_2 == 0) {\n    iVar1 = 0x15;\n  }\n  else {\n    iVar1 = 5;\n  }\n  sVar2 = strlen(param_1);\n  for (local_18 = 0; local_18 < sVar2; local_18 = local_18 + 1) {\n    iVar3 = param_1[local_18] + -0x61 + iVar1;\n    param_1[local_18] = (char)iVar3 + (char)(iVar3 / 0x1a) * -0x1a + 'a';\n  }\n  return;\n}"
    },
    {
        "task_id": 50,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  int iVar1;\n  char cVar2;\n  ulong uVar3;\n  char *pcVar4;\n  \n  uVar3 = 0xffffffffffffffff;\n  pcVar4 = param_1;\n  do {\n    if (uVar3 == 0) break;\n    uVar3 = uVar3 - 1;\n    cVar2 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar2 != '\\0');\n  if (~uVar3 - 1 != 0) {\n    pcVar4 = param_1 + (~uVar3 - 1);\n    do {\n      iVar1 = ((-(uint)(param_2 == 0) & 0x10) - 0x5c) + (int)*param_1;\n      *param_1 = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n      param_1 = param_1 + 1;\n    } while (param_1 != pcVar4);\n  }\n  return;\n}"
    },
    {
        "task_id": 50,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,int param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  char *pcVar4;\n  \n  sVar2 = strlen(param_1);\n  if (sVar2 != 0) {\n    pcVar3 = param_1;\n    do {\n      pcVar4 = pcVar3 + 1;\n      iVar1 = ((-(uint)(param_2 == 0) & 0x10) - 0x5c) + (int)*pcVar3;\n      *pcVar3 = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n      pcVar3 = pcVar4;\n    } while (param_1 + sVar2 != pcVar4);\n  }\n  return;\n}"
    },
    {
        "task_id": 50,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined (*param_1) [16],int param_2)\n\n{\n  int iVar1;\n  undefined auVar2 [14];\n  undefined auVar3 [12];\n  unkbyte10 Var4;\n  short sVar5;\n  short sVar6;\n  short sVar7;\n  short sVar8;\n  short sVar9;\n  short sVar10;\n  short sVar11;\n  short sVar12;\n  undefined auVar13 [16];\n  ushort uVar14;\n  ushort uVar15;\n  ushort uVar16;\n  ushort uVar17;\n  ushort uVar18;\n  ushort uVar19;\n  ushort uVar20;\n  ushort uVar21;\n  char cVar22;\n  char cVar23;\n  char cVar24;\n  char cVar25;\n  char cVar26;\n  char cVar27;\n  char cVar28;\n  char cVar29;\n  char cVar30;\n  char cVar31;\n  char cVar32;\n  char cVar33;\n  char cVar34;\n  char cVar35;\n  char cVar36;\n  char cVar37;\n  size_t sVar38;\n  ulong uVar39;\n  undefined (*pauVar40) [16];\n  undefined (*pauVar41) [16];\n  uint uVar42;\n  ushort uVar43;\n  ushort uVar45;\n  ushort uVar46;\n  ushort uVar47;\n  ushort uVar48;\n  ushort uVar49;\n  ushort uVar50;\n  undefined auVar44 [16];\n  ushort uVar51;\n  short sVar52;\n  ushort uVar53;\n  ushort uVar65;\n  ushort uVar66;\n  ushort uVar67;\n  ushort uVar68;\n  ushort uVar69;\n  ushort uVar70;\n  undefined auVar59 [16];\n  undefined auVar60 [16];\n  undefined auVar61 [16];\n  undefined auVar62 [16];\n  undefined auVar63 [16];\n  undefined auVar64 [16];\n  ushort uVar71;\n  short sVar72;\n  undefined auVar73 [16];\n  undefined auVar80 [16];\n  undefined auVar81 [16];\n  undefined4 uVar54;\n  undefined6 uVar55;\n  undefined8 uVar56;\n  undefined auVar57 [12];\n  undefined auVar58 [14];\n  undefined auVar74 [16];\n  undefined auVar75 [16];\n  undefined auVar76 [16];\n  undefined auVar77 [16];\n  undefined auVar78 [16];\n  undefined auVar79 [16];\n  \n  uVar42 = -(uint)(param_2 == 0) & 0x10;\n  sVar38 = strlen((char *)param_1);\n  cVar37 = UNK_0010308f;\n  cVar36 = UNK_0010308e;\n  cVar35 = UNK_0010308d;\n  cVar34 = UNK_0010308c;\n  cVar33 = UNK_0010308b;\n  cVar32 = UNK_0010308a;\n  cVar31 = UNK_00103089;\n  cVar30 = UNK_00103088;\n  cVar29 = UNK_00103087;\n  cVar28 = UNK_00103086;\n  cVar27 = UNK_00103085;\n  cVar26 = UNK_00103084;\n  cVar25 = UNK_00103083;\n  cVar24 = UNK_00103082;\n  cVar23 = UNK_00103081;\n  cVar22 = DAT_00103080;\n  uVar21 = _UNK_0010307e;\n  uVar20 = _UNK_0010307c;\n  uVar19 = _UNK_0010307a;\n  uVar18 = _UNK_00103078;\n  uVar17 = _UNK_00103076;\n  uVar16 = _UNK_00103074;\n  uVar15 = _UNK_00103072;\n  uVar14 = _DAT_00103070;\n  auVar13 = _DAT_00103060;\n  sVar12 = _UNK_0010305e;\n  sVar11 = _UNK_0010305c;\n  sVar10 = _UNK_0010305a;\n  sVar9 = _UNK_00103058;\n  sVar8 = _UNK_00103056;\n  sVar7 = _UNK_00103054;\n  sVar6 = _UNK_00103052;\n  sVar5 = _DAT_00103050;\n  if (sVar38 != 0) {\n    if (sVar38 - 1 < 0xf) {\n      uVar39 = 0;\n    }\n    else {\n      sVar72 = (short)(uVar42 + 5);\n      pauVar40 = param_1;\n      do {\n        auVar44 = *pauVar40;\n        pauVar41 = pauVar40 + 1;\n        auVar79._0_14_ = auVar44._0_14_;\n        auVar79[14] = auVar44[7];\n        auVar79[15] = -(auVar44[7] < '\\0');\n        auVar78._14_2_ = auVar79._14_2_;\n        auVar78._0_13_ = auVar44._0_13_;\n        auVar78[13] = -(auVar44[6] < '\\0');\n        auVar77._13_3_ = auVar78._13_3_;\n        auVar77._0_12_ = auVar44._0_12_;\n        auVar77[12] = auVar44[6];\n        auVar76._12_4_ = auVar77._12_4_;\n        auVar76._0_11_ = auVar44._0_11_;\n        auVar76[11] = -(auVar44[5] < '\\0');\n        auVar75._11_5_ = auVar76._11_5_;\n        auVar75._0_10_ = auVar44._0_10_;\n        auVar75[10] = auVar44[5];\n        auVar74._10_6_ = auVar75._10_6_;\n        auVar74._0_9_ = auVar44._0_9_;\n        auVar74[9] = -(auVar44[4] < '\\0');\n        auVar73._9_7_ = auVar74._9_7_;\n        auVar73._0_8_ = auVar44._0_8_;\n        auVar73[8] = auVar44[4];\n        Var4 = CONCAT91(CONCAT81(auVar73._8_8_,-(auVar44[3] < '\\0')),auVar44[3]);\n        auVar3._2_10_ = Var4;\n        auVar3[1] = -(auVar44[2] < '\\0');\n        auVar3[0] = auVar44[2];\n        auVar2._2_12_ = auVar3;\n        auVar2[1] = -(auVar44[1] < '\\0');\n        auVar2[0] = auVar44[1];\n        sVar52 = CONCAT11(-(auVar44[8] < '\\0'),auVar44[8]);\n        uVar54 = CONCAT13(-(auVar44[9] < '\\0'),CONCAT12(auVar44[9],sVar52));\n        uVar55 = CONCAT15(-(auVar44[10] < '\\0'),CONCAT14(auVar44[10],uVar54));\n        uVar56 = CONCAT17(-(auVar44[11] < '\\0'),CONCAT16(auVar44[11],uVar55));\n        auVar57._0_10_ = CONCAT19(-(auVar44[12] < '\\0'),CONCAT18(auVar44[12],uVar56));\n        auVar57[10] = auVar44[13];\n        auVar57[11] = -(auVar44[13] < '\\0');\n        auVar58[12] = auVar44[14];\n        auVar58._0_12_ = auVar57;\n        auVar58[13] = -(auVar44[14] < '\\0');\n        auVar59[14] = auVar44[15];\n        auVar59._0_14_ = auVar58;\n        auVar59[15] = -(auVar44[15] < '\\0');\n        auVar80._0_2_ = CONCAT11(-(auVar44[0] < '\\0'),auVar44[0]) + sVar5 + sVar72;\n        auVar80._2_2_ = auVar2._0_2_ + sVar6 + sVar72;\n        auVar80._4_2_ = auVar3._0_2_ + sVar7 + sVar72;\n        auVar80._6_2_ = (short)Var4 + sVar8 + sVar72;\n        auVar80._8_2_ = auVar73._8_2_ + sVar9 + sVar72;\n        auVar80._10_2_ = auVar75._10_2_ + sVar10 + sVar72;\n        auVar80._12_2_ = auVar77._12_2_ + sVar11 + sVar72;\n        auVar80._14_2_ = auVar78._14_2_ + sVar12 + sVar72;\n        auVar44._0_2_ = sVar52 + sVar5 + sVar72;\n        auVar44._2_2_ = (short)((uint)uVar54 >> 0x10) + sVar6 + sVar72;\n        auVar44._4_2_ = (short)((uint6)uVar55 >> 0x20) + sVar7 + sVar72;\n        auVar44._6_2_ = (short)((ulong)uVar56 >> 0x30) + sVar8 + sVar72;\n        auVar44._8_2_ = (short)((unkuint10)auVar57._0_10_ >> 0x40) + sVar9 + sVar72;\n        auVar44._10_2_ = auVar57._10_2_ + sVar10 + sVar72;\n        auVar44._12_2_ = auVar58._12_2_ + sVar11 + sVar72;\n        auVar44._14_2_ = auVar59._14_2_ + sVar12 + sVar72;\n        auVar59 = pmulhw(auVar80,auVar13);\n        auVar81 = psraw(auVar80,0xf);\n        auVar59 = psraw(auVar59,3);\n        auVar61._0_2_ = auVar59._0_2_ - auVar81._0_2_;\n        auVar61._2_2_ = auVar59._2_2_ - auVar81._2_2_;\n        auVar61._4_2_ = auVar59._4_2_ - auVar81._4_2_;\n        auVar61._6_2_ = auVar59._6_2_ - auVar81._6_2_;\n        auVar61._8_2_ = auVar59._8_2_ - auVar81._8_2_;\n        auVar61._10_2_ = auVar59._10_2_ - auVar81._10_2_;\n        auVar61._12_2_ = auVar59._12_2_ - auVar81._12_2_;\n        auVar61._14_2_ = auVar59._14_2_ - auVar81._14_2_;\n        auVar59 = psllw(auVar61,1);\n        auVar81._0_2_ = auVar59._0_2_ + auVar61._0_2_;\n        auVar81._2_2_ = auVar59._2_2_ + auVar61._2_2_;\n        auVar81._4_2_ = auVar59._4_2_ + auVar61._4_2_;\n        auVar81._6_2_ = auVar59._6_2_ + auVar61._6_2_;\n        auVar81._8_2_ = auVar59._8_2_ + auVar61._8_2_;\n        auVar81._10_2_ = auVar59._10_2_ + auVar61._10_2_;\n        auVar81._12_2_ = auVar59._12_2_ + auVar61._12_2_;\n        auVar81._14_2_ = auVar59._14_2_ + auVar61._14_2_;\n        auVar59 = psllw(auVar81,2);\n        auVar60._0_2_ = auVar59._0_2_ + auVar61._0_2_;\n        auVar60._2_2_ = auVar59._2_2_ + auVar61._2_2_;\n        auVar60._4_2_ = auVar59._4_2_ + auVar61._4_2_;\n        auVar60._6_2_ = auVar59._6_2_ + auVar61._6_2_;\n        auVar60._8_2_ = auVar59._8_2_ + auVar61._8_2_;\n        auVar60._10_2_ = auVar59._10_2_ + auVar61._10_2_;\n        auVar60._12_2_ = auVar59._12_2_ + auVar61._12_2_;\n        auVar60._14_2_ = auVar59._14_2_ + auVar61._14_2_;\n        auVar59 = psllw(auVar60,1);\n        auVar81 = psraw(auVar44,0xf);\n        auVar61 = pmulhw(auVar44,auVar13);\n        auVar61 = psraw(auVar61,3);\n        auVar62._0_2_ = auVar61._0_2_ - auVar81._0_2_;\n        auVar62._2_2_ = auVar61._2_2_ - auVar81._2_2_;\n        auVar62._4_2_ = auVar61._4_2_ - auVar81._4_2_;\n        auVar62._6_2_ = auVar61._6_2_ - auVar81._6_2_;\n        auVar62._8_2_ = auVar61._8_2_ - auVar81._8_2_;\n        auVar62._10_2_ = auVar61._10_2_ - auVar81._10_2_;\n        auVar62._12_2_ = auVar61._12_2_ - auVar81._12_2_;\n        auVar62._14_2_ = auVar61._14_2_ - auVar81._14_2_;\n        auVar61 = psllw(auVar62,1);\n        auVar63._0_2_ = auVar61._0_2_ + auVar62._0_2_;\n        auVar63._2_2_ = auVar61._2_2_ + auVar62._2_2_;\n        auVar63._4_2_ = auVar61._4_2_ + auVar62._4_2_;\n        auVar63._6_2_ = auVar61._6_2_ + auVar62._6_2_;\n        auVar63._8_2_ = auVar61._8_2_ + auVar62._8_2_;\n        auVar63._10_2_ = auVar61._10_2_ + auVar62._10_2_;\n        auVar63._12_2_ = auVar61._12_2_ + auVar62._12_2_;\n        auVar63._14_2_ = auVar61._14_2_ + auVar62._14_2_;\n        auVar61 = psllw(auVar63,2);\n        auVar64._0_2_ = auVar61._0_2_ + auVar62._0_2_;\n        auVar64._2_2_ = auVar61._2_2_ + auVar62._2_2_;\n        auVar64._4_2_ = auVar61._4_2_ + auVar62._4_2_;\n        auVar64._6_2_ = auVar61._6_2_ + auVar62._6_2_;\n        auVar64._8_2_ = auVar61._8_2_ + auVar62._8_2_;\n        auVar64._10_2_ = auVar61._10_2_ + auVar62._10_2_;\n        auVar64._12_2_ = auVar61._12_2_ + auVar62._12_2_;\n        auVar64._14_2_ = auVar61._14_2_ + auVar62._14_2_;\n        auVar61 = psllw(auVar64,1);\n        uVar43 = auVar80._0_2_ - auVar59._0_2_ & uVar14;\n        uVar45 = auVar80._2_2_ - auVar59._2_2_ & uVar15;\n        uVar46 = auVar80._4_2_ - auVar59._4_2_ & uVar16;\n        uVar47 = auVar80._6_2_ - auVar59._6_2_ & uVar17;\n        uVar48 = auVar80._8_2_ - auVar59._8_2_ & uVar18;\n        uVar49 = auVar80._10_2_ - auVar59._10_2_ & uVar19;\n        uVar50 = auVar80._12_2_ - auVar59._12_2_ & uVar20;\n        uVar51 = auVar80._14_2_ - auVar59._14_2_ & uVar21;\n        uVar53 = auVar44._0_2_ - auVar61._0_2_ & uVar14;\n        uVar65 = auVar44._2_2_ - auVar61._2_2_ & uVar15;\n        uVar66 = auVar44._4_2_ - auVar61._4_2_ & uVar16;\n        uVar67 = auVar44._6_2_ - auVar61._6_2_ & uVar17;\n        uVar68 = auVar44._8_2_ - auVar61._8_2_ & uVar18;\n        uVar69 = auVar44._10_2_ - auVar61._10_2_ & uVar19;\n        uVar70 = auVar44._12_2_ - auVar61._12_2_ & uVar20;\n        uVar71 = auVar44._14_2_ - auVar61._14_2_ & uVar21;\n        (*pauVar40)[0] =\n             ((0 < (short)uVar43) * ((short)uVar43 < 0xff) * (char)uVar43 - (0xff < (short)uVar43))\n             + cVar22;\n        (*pauVar40)[1] =\n             ((0 < (short)uVar45) * ((short)uVar45 < 0xff) * (char)uVar45 - (0xff < (short)uVar45))\n             + cVar23;\n        (*pauVar40)[2] =\n             ((0 < (short)uVar46) * ((short)uVar46 < 0xff) * (char)uVar46 - (0xff < (short)uVar46))\n             + cVar24;\n        (*pauVar40)[3] =\n             ((0 < (short)uVar47) * ((short)uVar47 < 0xff) * (char)uVar47 - (0xff < (short)uVar47))\n             + cVar25;\n        (*pauVar40)[4] =\n             ((0 < (short)uVar48) * ((short)uVar48 < 0xff) * (char)uVar48 - (0xff < (short)uVar48))\n             + cVar26;\n        (*pauVar40)[5] =\n             ((0 < (short)uVar49) * ((short)uVar49 < 0xff) * (char)uVar49 - (0xff < (short)uVar49))\n             + cVar27;\n        (*pauVar40)[6] =\n             ((0 < (short)uVar50) * ((short)uVar50 < 0xff) * (char)uVar50 - (0xff < (short)uVar50))\n             + cVar28;\n        (*pauVar40)[7] =\n             ((0 < (short)uVar51) * ((short)uVar51 < 0xff) * (char)uVar51 - (0xff < (short)uVar51))\n             + cVar29;\n        (*pauVar40)[8] =\n             ((0 < (short)uVar53) * ((short)uVar53 < 0xff) * (char)uVar53 - (0xff < (short)uVar53))\n             + cVar30;\n        (*pauVar40)[9] =\n             ((0 < (short)uVar65) * ((short)uVar65 < 0xff) * (char)uVar65 - (0xff < (short)uVar65))\n             + cVar31;\n        (*pauVar40)[10] =\n             ((0 < (short)uVar66) * ((short)uVar66 < 0xff) * (char)uVar66 - (0xff < (short)uVar66))\n             + cVar32;\n        (*pauVar40)[0xb] =\n             ((0 < (short)uVar67) * ((short)uVar67 < 0xff) * (char)uVar67 - (0xff < (short)uVar67))\n             + cVar33;\n        (*pauVar40)[0xc] =\n             ((0 < (short)uVar68) * ((short)uVar68 < 0xff) * (char)uVar68 - (0xff < (short)uVar68))\n             + cVar34;\n        (*pauVar40)[0xd] =\n             ((0 < (short)uVar69) * ((short)uVar69 < 0xff) * (char)uVar69 - (0xff < (short)uVar69))\n             + cVar35;\n        (*pauVar40)[0xe] =\n             ((0 < (short)uVar70) * ((short)uVar70 < 0xff) * (char)uVar70 - (0xff < (short)uVar70))\n             + cVar36;\n        (*pauVar40)[0xf] =\n             ((0 < (short)uVar71) * ((short)uVar71 < 0xff) * (char)uVar71 - (0xff < (short)uVar71))\n             + cVar37;\n        pauVar40 = pauVar41;\n      } while (pauVar41 != (undefined (*) [16])(*param_1 + (sVar38 & 0xfffffffffffffff0)));\n      uVar39 = sVar38 & 0xfffffffffffffff0;\n      if ((sVar38 & 0xf) == 0) {\n        return;\n      }\n    }\n    iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39];\n    (*param_1)[uVar39] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n    if (uVar39 + 1 < sVar38) {\n      iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 1];\n      (*param_1)[uVar39 + 1] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n      if (uVar39 + 2 < sVar38) {\n        iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 2];\n        (*param_1)[uVar39 + 2] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n        if (uVar39 + 3 < sVar38) {\n          iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 3];\n          (*param_1)[uVar39 + 3] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n          if (uVar39 + 4 < sVar38) {\n            iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 4];\n            (*param_1)[uVar39 + 4] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n            if (uVar39 + 5 < sVar38) {\n              iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 5];\n              (*param_1)[uVar39 + 5] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n              if (uVar39 + 6 < sVar38) {\n                iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 6];\n                (*param_1)[uVar39 + 6] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                if (uVar39 + 7 < sVar38) {\n                  iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 7];\n                  (*param_1)[uVar39 + 7] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                  if (uVar39 + 8 < sVar38) {\n                    iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 8];\n                    (*param_1)[uVar39 + 8] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                    if (uVar39 + 9 < sVar38) {\n                      iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 9];\n                      (*param_1)[uVar39 + 9] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                      if (uVar39 + 10 < sVar38) {\n                        iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 10];\n                        (*param_1)[uVar39 + 10] = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                        if (uVar39 + 0xb < sVar38) {\n                          iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 0xb];\n                          (*param_1)[uVar39 + 0xb] =\n                               (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                          if (uVar39 + 0xc < sVar38) {\n                            iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 0xc];\n                            (*param_1)[uVar39 + 0xc] =\n                                 (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                            if (uVar39 + 0xd < sVar38) {\n                              iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 0xd];\n                              (*param_1)[uVar39 + 0xd] =\n                                   (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                              if (uVar39 + 0xe < sVar38) {\n                                iVar1 = (uVar42 - 0x5c) + (int)(char)(*param_1)[uVar39 + 0xe];\n                                (*param_1)[uVar39 + 0xe] =\n                                     (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 51,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1)\n\n{\n  char *pcVar1;\n  char *local_20;\n  char *local_18;\n  \n  local_18 = param_1;\n  for (local_20 = param_1; *local_20 != '\\0'; local_20 = local_20 + 1) {\n    pcVar1 = strchr(\"AEIOUaeiou\",(int)*local_20);\n    if (pcVar1 == (char *)0x0) {\n      *local_18 = *local_20;\n      local_18 = local_18 + 1;\n    }\n  }\n  *local_18 = '\\0';\n  return;\n}"
    },
    {
        "task_id": 51,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1)\n\n{\n  char cVar1;\n  char *pcVar2;\n  char *pcVar3;\n  \n  cVar1 = *param_1;\n  pcVar3 = param_1;\n  while (cVar1 != '\\0') {\n    pcVar2 = strchr(\"AEIOUaeiou\",(int)cVar1);\n    if (pcVar2 == (char *)0x0) {\n      *pcVar3 = cVar1;\n      pcVar3 = pcVar3 + 1;\n    }\n    param_1 = param_1 + 1;\n    cVar1 = *param_1;\n  }\n  *pcVar3 = '\\0';\n  return;\n}"
    },
    {
        "task_id": 51,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1)\n\n{\n  char *pcVar1;\n  char cVar2;\n  char *pcVar3;\n  \n  cVar2 = *param_1;\n  pcVar3 = param_1;\n  while (cVar2 != '\\0') {\n    while (pcVar1 = strchr(\"AEIOUaeiou\",(int)cVar2), pcVar1 == (char *)0x0) {\n      param_1 = param_1 + 1;\n      *pcVar3 = cVar2;\n      pcVar3 = pcVar3 + 1;\n      cVar2 = *param_1;\n      if (cVar2 == '\\0') goto LAB_00101468;\n    }\n    pcVar1 = param_1 + 1;\n    param_1 = param_1 + 1;\n    cVar2 = *pcVar1;\n  }\nLAB_00101468:\n  *pcVar3 = '\\0';\n  return;\n}"
    },
    {
        "task_id": 51,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1)\n\n{\n  char *pcVar1;\n  char cVar2;\n  char *pcVar3;\n  \n  cVar2 = *param_1;\n  pcVar3 = param_1;\n  do {\n    if (cVar2 == '\\0') {\n      *pcVar3 = '\\0';\n      return;\n    }\n    while (pcVar1 = strchr(\"AEIOUaeiou\",(int)cVar2), pcVar1 == (char *)0x0) {\n      param_1 = param_1 + 1;\n      *pcVar3 = cVar2;\n      pcVar3 = pcVar3 + 1;\n      cVar2 = *param_1;\n      if (cVar2 == '\\0') {\n        *pcVar3 = '\\0';\n        return;\n      }\n    }\n    cVar2 = param_1[1];\n    param_1 = param_1 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 52,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2,int param_3)\n\n{\n  int local_c;\n  \n  local_c = 0;\n  while( true ) {\n    if (param_2 <= local_c) {\n      return 1;\n    }\n    if (param_3 <= *(int *)(param_1 + (long)local_c * 4)) break;\n    local_c = local_c + 1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 52,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2,int param_3)\n\n{\n  int *piVar1;\n  \n  if (param_2 < 1) {\n    return 1;\n  }\n  piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (param_3 <= *param_1) {\n      return 0;\n    }\n    param_1 = param_1 + 1;\n  } while (param_1 != piVar1);\n  return 1;\n}"
    },
    {
        "task_id": 52,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2,int param_3)\n\n{\n  int *piVar1;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (param_3 <= *param_1) {\n        return 0;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 52,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2,int param_3)\n\n{\n  int *piVar1;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (param_3 <= *param_1) {\n        return 0;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 53,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  return param_2 + param_1;\n}"
    },
    {
        "task_id": 53,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  return param_1 + param_2;\n}"
    },
    {
        "task_id": 53,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  return param_1 + param_2;\n}"
    },
    {
        "task_id": 53,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  return param_1 + param_2;\n}"
    },
    {
        "task_id": 54,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  bool bVar1;\n  size_t sVar2;\n  size_t sVar3;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  sVar2 = strlen(param_1);\n  sVar3 = strlen(param_2);\n  for (local_20 = 0; local_20 < (int)sVar2; local_20 = local_20 + 1) {\n    bVar1 = false;\n    for (local_1c = 0; local_1c < (int)sVar3; local_1c = local_1c + 1) {\n      if (param_1[local_20] == param_2[local_1c]) {\n        bVar1 = true;\n        break;\n      }\n    }\n    if (!bVar1) {\n      return 0;\n    }\n  }\n  local_18 = 0;\n  do {\n    if ((int)sVar3 <= local_18) {\n      return 1;\n    }\n    bVar1 = false;\n    for (local_14 = 0; local_14 < (int)sVar2; local_14 = local_14 + 1) {\n      if (param_2[local_18] == param_1[local_14]) {\n        bVar1 = true;\n        break;\n      }\n    }\n    if (!bVar1) {\n      return 0;\n    }\n    local_18 = local_18 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 54,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  uint uVar2;\n  uint uVar3;\n  char *pcVar4;\n  long lVar5;\n  char *pcVar6;\n  \n  lVar5 = -1;\n  pcVar6 = param_1;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar1 != '\\0');\n  uVar2 = ~(uint)lVar5;\n  lVar5 = -1;\n  pcVar6 = param_2;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar1 != '\\0');\n  uVar3 = ~(uint)lVar5;\n  if ((int)(uVar2 - 1) < 1) {\n    if ((int)(uVar3 - 1) < 1) {\n      return 1;\n    }\n  }\n  else {\n    pcVar6 = param_1;\n    do {\n      if ((int)(uVar3 - 1) < 1) {\n        return 0;\n      }\n      pcVar4 = param_2;\n      while (*pcVar6 != *pcVar4) {\n        pcVar4 = pcVar4 + 1;\n        if (pcVar4 == param_2 + (ulong)(uVar3 - 2) + 1) {\n          return 0;\n        }\n      }\n      pcVar6 = pcVar6 + 1;\n    } while (pcVar6 != param_1 + (ulong)(uVar2 - 2) + 1);\n  }\n  pcVar6 = param_2 + (ulong)(uVar3 - 2) + 1;\n  do {\n    if ((int)(uVar2 - 1) < 1) {\n      return 0;\n    }\n    pcVar4 = param_1;\n    while (*param_2 != *pcVar4) {\n      pcVar4 = pcVar4 + 1;\n      if (pcVar4 == param_1 + (ulong)(uVar2 - 2) + 1) {\n        return 0;\n      }\n    }\n    param_2 = param_2 + 1;\n  } while (param_2 != pcVar6);\n  return 1;\n}"
    },
    {
        "task_id": 54,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1,char *param_2)\n\n{\n  bool bVar1;\n  int iVar2;\n  size_t sVar3;\n  size_t sVar4;\n  char *pcVar5;\n  char *pcVar6;\n  long lVar7;\n  ulong uVar8;\n  \n  sVar3 = strlen(param_1);\n  sVar4 = strlen(param_2);\n  iVar2 = (int)sVar4;\n  if ((int)sVar3 < 1) {\n    bVar1 = iVar2 < 1;\n  }\n  else {\n    uVar8 = (ulong)((int)sVar3 - 1);\n    pcVar6 = param_1;\n    while (0 < iVar2) {\n      pcVar5 = param_2;\n      while (*pcVar6 != *pcVar5) {\n        pcVar5 = pcVar5 + 1;\n        if (pcVar5 == param_2 + (ulong)(iVar2 - 1) + 1) goto LAB_001013c0;\n      }\n      pcVar6 = pcVar6 + 1;\n      if (pcVar6 == param_1 + uVar8 + 1) {\n        lVar7 = 0;\n        do {\n          pcVar6 = param_1;\n          while (param_2[lVar7] != *pcVar6) {\n            pcVar6 = pcVar6 + 1;\n            if (pcVar6 == param_1 + uVar8 + 1) goto LAB_001013c0;\n          }\n          lVar7 = lVar7 + 1;\n          if (iVar2 <= (int)lVar7) {\n            return true;\n          }\n        } while( true );\n      }\n    }\nLAB_001013c0:\n    bVar1 = false;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 54,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1,char *param_2)\n\n{\n  bool bVar1;\n  int iVar2;\n  size_t sVar3;\n  size_t sVar4;\n  char *pcVar5;\n  ulong uVar6;\n  long lVar7;\n  char *pcVar8;\n  \n  sVar3 = strlen(param_1);\n  sVar4 = strlen(param_2);\n  iVar2 = (int)sVar4;\n  if ((int)sVar3 < 1) {\n    bVar1 = iVar2 < 1;\n  }\n  else {\n    uVar6 = (ulong)((int)sVar3 - 1);\n    pcVar8 = param_1;\n    while (0 < iVar2) {\n      pcVar5 = param_2;\n      while (*pcVar8 != *pcVar5) {\n        pcVar5 = pcVar5 + 1;\n        if (pcVar5 == param_2 + (ulong)(iVar2 - 1) + 1) goto LAB_001013c0;\n      }\n      pcVar8 = pcVar8 + 1;\n      if (pcVar8 == param_1 + uVar6 + 1) {\n        lVar7 = 0;\n        do {\n          pcVar8 = param_1;\n          while (param_2[lVar7] != *pcVar8) {\n            pcVar8 = pcVar8 + 1;\n            if (param_1 + uVar6 + 1 == pcVar8) goto LAB_001013c0;\n          }\n          lVar7 = lVar7 + 1;\n          if (iVar2 <= (int)lVar7) {\n            return true;\n          }\n        } while( true );\n      }\n    }\nLAB_001013c0:\n    bVar1 = false;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 55,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  long in_FS_OFFSET;\n  int local_fbc;\n  undefined8 local_fb8;\n  int aiStack_fb0 [1000];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar2 = &local_fb8;\n  for (lVar1 = 500; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  local_fb8._0_4_ = 0;\n  local_fb8._4_4_ = 1;\n  for (local_fbc = 2; local_fbc <= param_1; local_fbc = local_fbc + 1) {\n    aiStack_fb0[(long)local_fbc + -2] =\n         aiStack_fb0[(long)(local_fbc + -1) + -2] + aiStack_fb0[(long)(local_fbc + -2) + -2];\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return aiStack_fb0[(long)param_1 + -2];\n}"
    },
    {
        "task_id": 55,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  undefined8 *puVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  long in_FS_OFFSET;\n  undefined8 local_fb8;\n  int local_fb0 [1000];\n  long local_10;\n  \n  puVar1 = &local_fb8;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar3 = &local_fb8;\n  for (lVar2 = 500; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  local_fb8._4_4_ = 1;\n  if (1 < param_1) {\n    do {\n      *(int *)((long)puVar1 + 8) = *(int *)puVar1 + *(int *)((long)puVar1 + 4);\n      puVar1 = (undefined8 *)((long)puVar1 + 4);\n    } while (puVar1 != (undefined8 *)(local_fb0 + ((ulong)(param_1 - 2) - 1)));\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_fb0[(long)param_1 + -2];\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 55,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  long lVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long in_FS_OFFSET;\n  undefined8 local_fb8;\n  int local_fb0 [1000];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar6 = &local_fb8;\n  for (lVar4 = 500; lVar4 != 0; lVar4 = lVar4 + -1) {\n    *puVar6 = 0;\n    puVar6 = puVar6 + 1;\n  }\n  local_fb8 = 0x100000000;\n  if (1 < param_1) {\n    piVar2 = local_fb0;\n    piVar1 = piVar2 + (param_1 - 2);\n    iVar5 = 1;\n    iVar3 = 0;\n    while( true ) {\n      iVar5 = iVar5 + iVar3;\n      *piVar2 = iVar5;\n      if (piVar2 == piVar1) break;\n      iVar3 = piVar2[-1];\n      piVar2 = piVar2 + 1;\n    }\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_fb0[(long)param_1 + -2];\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 55,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int *piVar1;\n  int iVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long in_FS_OFFSET;\n  undefined8 local_fb8;\n  int local_fb0 [1000];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar6 = &local_fb8;\n  for (lVar3 = 500; lVar3 != 0; lVar3 = lVar3 + -1) {\n    *puVar6 = 0;\n    puVar6 = puVar6 + 1;\n  }\n  local_fb8 = 0x100000000;\n  if (1 < param_1) {\n    if (param_1 < 4) {\n      iVar2 = 2;\n    }\n    else {\n      iVar5 = 1;\n      iVar4 = 0;\n      iVar2 = 2;\n      piVar1 = local_fb0;\n      do {\n        iVar4 = iVar4 + iVar5;\n        iVar2 = iVar2 + 2;\n        iVar5 = iVar5 + iVar4;\n        *piVar1 = iVar4;\n        piVar1[1] = iVar5;\n        piVar1 = piVar1 + 2;\n      } while (iVar2 != (param_1 - 4U & 0xfffffffe) + 4);\n    }\n    piVar1 = local_fb0 + (long)iVar2 + -2;\n    do {\n      iVar2 = iVar2 + 1;\n      *piVar1 = piVar1[-2] + piVar1[-1];\n      piVar1 = piVar1 + 1;\n    } while (iVar2 <= param_1);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_fb0[(long)param_1 + -2];\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 56,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_c = 0;\n  while( true ) {\n    if (*(char *)(param_1 + local_c) == '\\0') {\n      return local_10 == 0;\n    }\n    if (*(char *)(param_1 + local_c) == '<') {\n      local_10 = local_10 + 1;\n    }\n    if (*(char *)(param_1 + local_c) == '>') {\n      local_10 = local_10 + -1;\n    }\n    if (local_10 < 0) break;\n    local_c = local_c + 1;\n  }\n  return false;\n}"
    },
    {
        "task_id": 56,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  char *pcVar3;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar2 = 0;\n  }\n  else {\n    iVar2 = 0;\n    pcVar3 = param_1 + 1;\n    do {\n      if (cVar1 == '<') {\n        iVar2 = iVar2 + 1;\n      }\n      else {\n        iVar2 = iVar2 - (uint)(cVar1 == '>');\n      }\n      if (iVar2 < 0) {\n        return false;\n      }\n      cVar1 = *pcVar3;\n      pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n  }\n  return iVar2 == 0;\n}"
    },
    {
        "task_id": 56,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    return true;\n  }\n  param_1 = param_1 + 1;\n  iVar2 = 0;\n  do {\n    while (cVar1 == '<') {\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n      iVar2 = iVar2 + 1;\n      if (cVar1 == '\\0') goto LAB_001014e1;\n    }\n    if (cVar1 == '>') {\n      iVar2 = iVar2 + -1;\n      if (iVar2 == -1) {\n        return false;\n      }\n    }\n    cVar1 = *param_1;\n    param_1 = param_1 + 1;\n  } while (cVar1 != '\\0');\nLAB_001014e1:\n  return iVar2 == 0;\n}"
    },
    {
        "task_id": 56,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    return true;\n  }\n  param_1 = param_1 + 1;\n  iVar2 = 0;\n  do {\n    while (cVar1 == '<') {\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n      iVar2 = iVar2 + 1;\n      if (cVar1 == '\\0') goto LAB_001014e1;\n    }\n    if (cVar1 == '>') {\n      iVar2 = iVar2 + -1;\n      if (iVar2 == -1) {\n        return false;\n      }\n    }\n    cVar1 = *param_1;\n    param_1 = param_1 + 1;\n  } while (cVar1 != '\\0');\nLAB_001014e1:\n  return iVar2 == 0;\n}"
    },
    {
        "task_id": 57,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1,int param_2)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_14 = 0;\n  for (local_c = 1; local_c < param_2; local_c = local_c + 1) {\n    if (*(float *)(param_1 + (long)local_c * 4 + -4) < *(float *)(param_1 + (long)local_c * 4)) {\n      local_14 = 1;\n    }\n    if (*(float *)(param_1 + (long)local_c * 4) < *(float *)(param_1 + (long)local_c * 4 + -4)) {\n      local_10 = 1;\n    }\n  }\n  return local_10 + local_14 != 2;\n}"
    },
    {
        "task_id": 57,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (param_2 < 2) {\n    iVar2 = 0;\n    iVar3 = 0;\n  }\n  else {\n    pfVar1 = param_1 + (ulong)(param_2 - 2) + 1;\n    iVar2 = 0;\n    iVar3 = 0;\n    do {\n      if (*param_1 < param_1[1]) {\n        iVar3 = 1;\n      }\n      if (param_1[1] < *param_1) {\n        iVar2 = 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n  }\n  return iVar3 + iVar2 != 2;\n}"
    },
    {
        "task_id": 57,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (1 < param_2) {\n    iVar3 = 0;\n    pfVar1 = param_1 + (ulong)(param_2 - 2) + 1;\n    iVar2 = 0;\n    do {\n      if (*param_1 < param_1[1]) {\n        iVar2 = 1;\n      }\n      if (param_1[1] < *param_1) {\n        iVar3 = 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n    return iVar2 + iVar3 != 2;\n  }\n  return true;\n}"
    },
    {
        "task_id": 57,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float *param_1,int param_2)\n\n{\n  float fVar1;\n  float fVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  float fVar7;\n  \n  if (param_2 < 2) {\n    return 1;\n  }\n  if (param_2 < 4) {\n    lVar3 = 1;\n    iVar4 = 0;\n    iVar5 = 0;\n  }\n  else {\n    lVar6 = 3;\n    iVar4 = 0;\n    iVar5 = 0;\n    fVar7 = *param_1;\n    do {\n      fVar1 = param_1[lVar6 + -2];\n      lVar3 = (long)(int)lVar6;\n      if (fVar7 < fVar1) {\n        iVar5 = 1;\n      }\n      fVar2 = param_1[lVar6 + -1];\n      if (fVar1 < fVar7) {\n        iVar4 = 1;\n      }\n      if (fVar1 < fVar2) {\n        iVar5 = 1;\n      }\n      if (fVar2 < fVar1) {\n        iVar4 = 1;\n      }\n      lVar6 = lVar6 + 2;\n      fVar7 = fVar2;\n    } while (lVar6 != (ulong)(param_2 - 4U >> 1) * 2 + 5);\n  }\n  do {\n    if (param_1[lVar3 + -1] < param_1[lVar3]) {\n      iVar5 = 1;\n    }\n    if (param_1[lVar3] < param_1[lVar3 + -1]) {\n      iVar4 = 1;\n    }\n    lVar3 = lVar3 + 1;\n  } while ((int)lVar3 < param_2);\n  return CONCAT71((int7)((ulong)lVar3 >> 8),iVar5 + iVar4 != 2);\n}"
    },
    {
        "task_id": 58,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n",
        "input_asm_prompt": "void * func0(long param_1,int param_2,long param_3,int param_4,int *param_5)\n\n{\n  undefined4 uVar1;\n  bool bVar2;\n  void *pvVar3;\n  int local_28;\n  int local_24;\n  int local_20;\n  int local_1c;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  local_28 = 0;\n  local_24 = 0;\n  do {\n    if (param_2 <= local_24) {\n      for (local_24 = 0; local_24 < local_28 + -1; local_24 = local_24 + 1) {\n        for (local_20 = 0; local_20 < (local_28 - local_24) + -1; local_20 = local_20 + 1) {\n          if (*(int *)((long)pvVar3 + ((long)local_20 + 1) * 4) <\n              *(int *)((long)pvVar3 + (long)local_20 * 4)) {\n            uVar1 = *(undefined4 *)((long)pvVar3 + (long)local_20 * 4);\n            *(undefined4 *)((long)pvVar3 + (long)local_20 * 4) =\n                 *(undefined4 *)((long)pvVar3 + ((long)local_20 + 1) * 4);\n            *(undefined4 *)(((long)local_20 + 1) * 4 + (long)pvVar3) = uVar1;\n          }\n        }\n      }\n      *param_5 = local_28;\n      return pvVar3;\n    }\n    bVar2 = false;\n    for (local_1c = 0; local_1c < local_28; local_1c = local_1c + 1) {\n      if (*(int *)((long)pvVar3 + (long)local_1c * 4) == *(int *)(param_1 + (long)local_24 * 4)) {\n        bVar2 = true;\n        break;\n      }\n    }\n    if (!bVar2) {\n      for (local_20 = 0; local_20 < param_4; local_20 = local_20 + 1) {\n        if (*(int *)(param_1 + (long)local_24 * 4) == *(int *)(param_3 + (long)local_20 * 4)) {\n          *(undefined4 *)((long)local_28 * 4 + (long)pvVar3) =\n               *(undefined4 *)((long)local_24 * 4 + param_1);\n          local_28 = local_28 + 1;\n          break;\n        }\n      }\n    }\n    local_24 = local_24 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 58,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3,int param_4,int *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  int *piVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  \n  piVar2 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    piVar4 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar6 = 0;\n    do {\n      if (0 < iVar6) {\n        piVar3 = piVar2;\n        do {\n          if (*piVar3 == *param_1) goto LAB_00101206;\n          piVar3 = piVar3 + 1;\n        } while (piVar3 != piVar2 + (ulong)(iVar6 - 1) + 1);\n      }\n      if (0 < param_4) {\n        piVar3 = param_3;\n        do {\n          if (*param_1 == *piVar3) {\n            piVar2[iVar6] = *param_1;\n            iVar6 = iVar6 + 1;\n            break;\n          }\n          piVar3 = piVar3 + 1;\n        } while (piVar3 != param_3 + (ulong)(param_4 - 1) + 1);\n      }\nLAB_00101206:\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar4);\n    iVar5 = iVar6 + -1;\n    if (0 < iVar5) {\n      do {\n        if (0 < iVar5) {\n          piVar4 = piVar2;\n          do {\n            iVar1 = *piVar4;\n            if (piVar4[1] < iVar1) {\n              *piVar4 = piVar4[1];\n              piVar4[1] = iVar1;\n            }\n            piVar4 = piVar4 + 1;\n          } while (piVar2 + (ulong)(iVar5 - 1) + 1 != piVar4);\n        }\n        iVar5 = iVar5 + -1;\n      } while (iVar5 != 0);\n    }\n  }\n  *param_5 = iVar6;\n  return;\n}"
    },
    {
        "task_id": 58,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3,int param_4,int *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  ulong uVar4;\n  int *piVar5;\n  long lVar6;\n  int *piVar7;\n  int iVar8;\n  \n  piVar2 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    *param_5 = 0;\n    return;\n  }\n  iVar8 = 0;\n  piVar5 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (iVar8 != 0) {\n      piVar7 = piVar2;\n      do {\n        if (*piVar7 == *param_1) goto joined_r0x001015a6;\n        piVar7 = piVar7 + 1;\n      } while (piVar7 != piVar2 + (ulong)(iVar8 - 1) + 1);\n    }\n    if (0 < param_4) {\n      piVar7 = param_3;\n      do {\n        if (*param_1 == *piVar7) {\n          lVar6 = (long)iVar8;\n          iVar8 = iVar8 + 1;\n          piVar2[lVar6] = *param_1;\n          break;\n        }\n        piVar7 = piVar7 + 1;\n      } while (param_3 + (ulong)(param_4 - 1) + 1 != piVar7);\n    }\njoined_r0x001015a6:\n    param_1 = param_1 + 1;\n    if (param_1 == piVar5) {\n      uVar4 = (ulong)(iVar8 - 1U);\n      if (0 < (int)(iVar8 - 1U)) {\n        do {\n          uVar3 = (int)uVar4 - 1;\n          uVar4 = (ulong)uVar3;\n          piVar5 = piVar2;\n          do {\n            iVar1 = *piVar5;\n            if (piVar5[1] < iVar1) {\n              *piVar5 = piVar5[1];\n              piVar5[1] = iVar1;\n            }\n            piVar5 = piVar5 + 1;\n          } while (piVar2 + uVar4 + 1 != piVar5);\n        } while (uVar3 != 0);\n      }\n      *param_5 = iVar8;\n      return;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 58,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3,int param_4,int *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  ulong uVar4;\n  int *piVar5;\n  long lVar6;\n  int *piVar7;\n  int iVar8;\n  \n  piVar2 = (int *)malloc((long)param_2 << 2);\n  if (param_2 < 1) {\n    *param_5 = 0;\n    return;\n  }\n  iVar8 = 0;\n  piVar5 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (iVar8 != 0) {\n      piVar7 = piVar2;\n      do {\n        if (*piVar7 == *param_1) goto joined_r0x00101536;\n        piVar7 = piVar7 + 1;\n      } while (piVar7 != piVar2 + (ulong)(iVar8 - 1) + 1);\n    }\n    if (0 < param_4) {\n      piVar7 = param_3;\n      do {\n        if (*param_1 == *piVar7) {\n          lVar6 = (long)iVar8;\n          iVar8 = iVar8 + 1;\n          piVar2[lVar6] = *param_1;\n          break;\n        }\n        piVar7 = piVar7 + 1;\n      } while (param_3 + (ulong)(param_4 - 1) + 1 != piVar7);\n    }\njoined_r0x00101536:\n    param_1 = param_1 + 1;\n    if (param_1 == piVar5) {\n      uVar4 = (ulong)(iVar8 - 1U);\n      if (0 < (int)(iVar8 - 1U)) {\n        do {\n          uVar3 = (int)uVar4 - 1;\n          uVar4 = (ulong)uVar3;\n          piVar5 = piVar2;\n          do {\n            iVar1 = *piVar5;\n            if (piVar5[1] < iVar1) {\n              *piVar5 = piVar5[1];\n              piVar5[1] = iVar1;\n            }\n            piVar5 = piVar5 + 1;\n          } while (piVar2 + uVar4 + 1 != piVar5);\n        } while (uVar3 != 0);\n      }\n      *param_5 = iVar8;\n      return;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 59,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int local_1c;\n  int local_c;\n  \n  local_1c = param_1;\n  for (local_c = 2; local_c * local_c <= local_1c; local_c = local_c + 1) {\n    for (; (local_1c % local_c == 0 && (local_c < local_1c)); local_1c = local_1c / local_c) {\n    }\n  }\n  return local_1c;\n}"
    },
    {
        "task_id": 59,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = 2;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while ((iVar3 == 0 && (iVar2 < param_1))) {\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 59,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = 2;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while ((iVar3 == 0 && (iVar2 < param_1))) {\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 59,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = 2;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while ((iVar3 == 0 && (iVar2 < param_1))) {\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 60,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return ((param_1 + 1) * param_1) / 2;\n}"
    },
    {
        "task_id": 60,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return (param_1 * (param_1 + 1)) / 2;\n}"
    },
    {
        "task_id": 60,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return (param_1 * (param_1 + 1)) / 2;\n}"
    },
    {
        "task_id": 60,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  return (param_1 * (param_1 + 1)) / 2;\n}"
    },
    {
        "task_id": 61,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1)\n\n{\n  size_t sVar1;\n  int local_20;\n  int local_1c;\n  \n  local_20 = 0;\n  local_1c = 0;\n  while( true ) {\n    sVar1 = strlen(param_1);\n    if (sVar1 <= (ulong)(long)local_1c) {\n      return local_20 == 0;\n    }\n    if (param_1[local_1c] == '(') {\n      local_20 = local_20 + 1;\n    }\n    if (param_1[local_1c] == ')') {\n      local_20 = local_20 + -1;\n    }\n    if (local_20 < 0) break;\n    local_1c = local_1c + 1;\n  }\n  return false;\n}"
    },
    {
        "task_id": 61,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  ulong uVar4;\n  char *pcVar5;\n  \n  uVar4 = 0xffffffffffffffff;\n  pcVar5 = param_1;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  pcVar5 = param_1 + (~uVar4 - 1);\n  uVar4 = 0;\n  do {\n    iVar2 = (int)uVar4;\n    if (param_1 == pcVar5) {\n      return CONCAT71((int7)(uVar4 >> 8),iVar2 == 0);\n    }\n    if (*param_1 == '(') {\n      uVar3 = iVar2 + 1;\n    }\n    else {\n      uVar3 = iVar2 - (uint)(*param_1 == ')');\n    }\n    uVar4 = (ulong)uVar3;\n    param_1 = param_1 + 1;\n  } while (-1 < (int)uVar3);\n  return 0;\n}"
    },
    {
        "task_id": 61,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  int iVar3;\n  \n  sVar1 = strlen(param_1);\n  iVar3 = 0;\n  pcVar2 = param_1 + sVar1;\n  do {\n    if (param_1 == pcVar2) {\n      return CONCAT71((int7)((ulong)pcVar2 >> 8),iVar3 == 0);\n    }\n    if (*param_1 == '(') {\n      iVar3 = iVar3 + 1;\n    }\n    else if (*param_1 == ')') {\n      iVar3 = iVar3 + -1;\n      if (iVar3 == -1) {\n        return 0;\n      }\n    }\n    param_1 = param_1 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 61,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  int iVar3;\n  \n  sVar1 = strlen(param_1);\n  iVar3 = 0;\n  pcVar2 = param_1 + sVar1;\n  do {\n    if (param_1 == pcVar2) {\n      return CONCAT71((int7)((ulong)pcVar2 >> 8),iVar3 == 0);\n    }\n    if (*param_1 == '(') {\n      iVar3 = iVar3 + 1;\n    }\n    else if (*param_1 == ')') {\n      iVar3 = iVar3 + -1;\n      if (iVar3 == -1) {\n        return 0;\n      }\n    }\n    param_1 = param_1 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 62,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  int local_c;\n  \n  for (local_c = 1; local_c < param_2; local_c = local_c + 1) {\n    *(float *)(param_3 + (long)local_c * 4 + -4) =\n         *(float *)(param_1 + (long)local_c * 4) * (float)local_c;\n  }\n  return;\n}"
    },
    {
        "task_id": 62,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  long lVar1;\n  \n  if (1 < param_2) {\n    lVar1 = 1;\n    do {\n      *(float *)(param_3 + -4 + lVar1 * 4) = (float)(int)lVar1 * *(float *)(param_1 + lVar1 * 4);\n      lVar1 = lVar1 + 1;\n    } while (lVar1 != (ulong)(param_2 - 2) + 2);\n  }\n  return;\n}"
    },
    {
        "task_id": 62,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  long lVar1;\n  \n  if (1 < param_2) {\n    lVar1 = 1;\n    do {\n      *(float *)(param_3 + -4 + lVar1 * 4) = (float)(int)lVar1 * *(float *)(param_1 + lVar1 * 4);\n      lVar1 = lVar1 + 1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 62,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
        "c_test": "#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,ulong param_3)\n\n{\n  int iVar1;\n  float *pfVar2;\n  float *pfVar3;\n  float fVar4;\n  float fVar5;\n  float fVar6;\n  int iVar7;\n  int iVar8;\n  uint uVar9;\n  int iVar10;\n  long lVar11;\n  uint uVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  \n  iVar8 = _UNK_001020fc;\n  iVar7 = _UNK_001020f8;\n  iVar1 = _UNK_001020f4;\n  iVar10 = _DAT_001020f0;\n  if (1 < param_2) {\n    if ((param_1 + 4U < param_3 + 0x10 && param_3 < param_1 + 0x14U) || (param_2 - 2U < 3)) {\n      lVar11 = 1;\n      do {\n        *(float *)((param_3 - 4) + lVar11 * 4) =\n             (float)(int)lVar11 * *(float *)(param_1 + lVar11 * 4);\n        lVar11 = lVar11 + 1;\n      } while (lVar11 != (ulong)(param_2 - 2U) + 2);\n    }\n    else {\n      uVar12 = param_2 - 1;\n      lVar11 = 0;\n      iVar13 = _DAT_001020e0;\n      iVar14 = _UNK_001020e4;\n      iVar15 = _UNK_001020e8;\n      iVar16 = _UNK_001020ec;\n      do {\n        pfVar3 = (float *)(param_1 + 4 + lVar11);\n        fVar4 = pfVar3[1];\n        fVar5 = pfVar3[2];\n        fVar6 = pfVar3[3];\n        pfVar2 = (float *)(param_3 + lVar11);\n        *pfVar2 = (float)iVar13 * *pfVar3;\n        pfVar2[1] = (float)iVar14 * fVar4;\n        pfVar2[2] = (float)iVar15 * fVar5;\n        pfVar2[3] = (float)iVar16 * fVar6;\n        lVar11 = lVar11 + 0x10;\n        iVar13 = iVar13 + iVar10;\n        iVar14 = iVar14 + iVar1;\n        iVar15 = iVar15 + iVar7;\n        iVar16 = iVar16 + iVar8;\n      } while (lVar11 != (ulong)(uVar12 >> 2) << 4);\n      uVar9 = uVar12 & 0xfffffffc;\n      iVar10 = uVar9 + 1;\n      if (uVar12 != uVar9) {\n        iVar1 = uVar9 + 2;\n        *(float *)((param_3 - 4) + (long)iVar10 * 4) =\n             (float)iVar10 * *(float *)(param_1 + (long)iVar10 * 4);\n        if (iVar1 < param_2) {\n          iVar10 = uVar9 + 3;\n          *(float *)((param_3 - 4) + (long)iVar1 * 4) =\n               (float)iVar1 * *(float *)(param_1 + (long)iVar1 * 4);\n          if (iVar10 < param_2) {\n            *(float *)((param_3 - 4) + (long)iVar10 * 4) =\n                 (float)iVar10 * *(float *)(param_1 + (long)iVar10 * 4);\n            return;\n          }\n        }\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 63,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  long in_FS_OFFSET;\n  int local_1ac;\n  undefined8 local_1a8;\n  int local_1a0 [100];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar2 = &local_1a8;\n  for (lVar1 = 0x32; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  local_1a8._4_4_ = 0;\n  local_1a0[0] = 1;\n  for (local_1ac = 3; local_1ac <= param_1; local_1ac = local_1ac + 1) {\n    local_1a0[(long)local_1ac + -2] =\n         local_1a0[(long)(local_1ac + -1) + -2] + local_1a0[(long)(local_1ac + -2) + -2] +\n         local_1a0[(long)(local_1ac + -3) + -2];\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_1a0[(long)param_1 + -2];\n}"
    },
    {
        "task_id": 63,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  undefined8 *puVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  long in_FS_OFFSET;\n  undefined8 local_1a8;\n  int local_1a0 [100];\n  long local_10;\n  \n  puVar1 = &local_1a8;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar3 = &local_1a8;\n  for (lVar2 = 0x32; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  local_1a0[0] = 1;\n  if (2 < param_1) {\n    do {\n      *(int *)((long)puVar1 + 0xc) =\n           *(int *)((long)puVar1 + 4) + *(int *)((long)puVar1 + 8) + *(int *)puVar1;\n      puVar1 = (undefined8 *)((long)puVar1 + 4);\n    } while (puVar1 != (undefined8 *)(local_1a0 + ((ulong)(param_1 - 3) - 1)));\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_1a0[(long)param_1 + -2];\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 63,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  long lVar4;\n  int iVar5;\n  int iVar6;\n  undefined8 *puVar7;\n  long in_FS_OFFSET;\n  undefined auStack_1a8 [8];\n  int aiStack_1a0 [100];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar7 = (undefined8 *)auStack_1a8;\n  for (lVar4 = 0x32; lVar4 != 0; lVar4 = lVar4 + -1) {\n    *puVar7 = 0;\n    puVar7 = puVar7 + 1;\n  }\n  stack0xfffffffffffffe5c = 0x100000000;\n  if (2 < param_1) {\n    iVar6 = 0;\n    iVar5 = 1;\n    iVar3 = 0;\n    piVar1 = (int *)(auStack_1a8 + 4);\n    while( true ) {\n      piVar2 = piVar1 + 1;\n      piVar1[2] = iVar5 + iVar3 + iVar6;\n      if (aiStack_1a0 + (param_1 - 3) == piVar2) break;\n      iVar5 = piVar1[2];\n      iVar3 = *piVar2;\n      iVar6 = *piVar1;\n      piVar1 = piVar2;\n    }\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return *(undefined4 *)(auStack_1a8 + (long)param_1 * 4);\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 63,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  int iVar6;\n  undefined8 *puVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  undefined local_1a8 [12];\n  int local_19c [99];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar7 = (undefined8 *)local_1a8;\n  for (lVar5 = 0x32; lVar5 != 0; lVar5 = lVar5 + -1) {\n    *puVar7 = 0;\n    puVar7 = puVar7 + 1;\n  }\n  local_1a8._4_8_ = 0x100000000;\n  if (2 < param_1) {\n    if (param_1 < 6) {\n      iVar4 = 3;\n    }\n    else {\n      iVar6 = 1;\n      iVar1 = 0;\n      piVar2 = local_19c;\n      iVar3 = 3;\n      do {\n        local_1a8._0_4_ = local_1a8._0_4_ + iVar6 + iVar1;\n        *piVar2 = local_1a8._0_4_;\n        iVar1 = iVar1 + local_1a8._0_4_ + iVar6;\n        piVar2[1] = iVar1;\n        iVar6 = iVar6 + local_1a8._0_4_ + iVar1;\n        iVar4 = iVar3 + 3;\n        iVar8 = iVar3 + 4;\n        piVar2[2] = iVar6;\n        piVar2 = piVar2 + 3;\n        iVar3 = iVar4;\n      } while (iVar8 < param_1 + -1);\n    }\n    piVar2 = (int *)(local_1a8 + (long)iVar4 * 4);\n    do {\n      iVar4 = iVar4 + 1;\n      *piVar2 = piVar2[-1] + piVar2[-2] + piVar2[-3];\n      piVar2 = piVar2 + 1;\n    } while (iVar4 <= param_1);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return *(undefined4 *)(local_1a8 + (long)param_1 * 4);\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 64,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  int local_1c;\n  int local_18;\n  \n  local_1c = 0;\n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  for (local_18 = 0; local_18 < iVar1; local_18 = local_18 + 1) {\n    pcVar3 = strchr(\"aeiouAEIOU\",(int)param_1[local_18]);\n    if (pcVar3 != (char *)0x0) {\n      local_1c = local_1c + 1;\n    }\n  }\n  if ((0 < iVar1) && ((param_1[(long)iVar1 + -1] == 'y' || (param_1[(long)iVar1 + -1] == 'Y')))) {\n    local_1c = local_1c + 1;\n  }\n  return local_1c;\n}"
    },
    {
        "task_id": 64,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  char *pcVar2;\n  long lVar3;\n  char *pcVar4;\n  int iVar5;\n  int iVar6;\n  \n  lVar3 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar3 == 0) break;\n    lVar3 = lVar3 + -1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  iVar6 = ~(uint)lVar3 - 1;\n  if (iVar6 < 1) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    pcVar4 = param_1;\n    do {\n      pcVar2 = strchr(\"aeiouAEIOU\",(int)*pcVar4);\n      iVar5 = (iVar5 + 1) - (uint)(pcVar2 == (char *)0x0);\n      pcVar4 = pcVar4 + 1;\n    } while (pcVar4 != param_1 + (ulong)(~(uint)lVar3 - 2) + 1);\n    iVar5 = iVar5 + (uint)((param_1[(long)iVar6 + -1] & 0xdfU) == 0x59);\n  }\n  return iVar5;\n}"
    },
    {
        "task_id": 64,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  char *pcVar4;\n  int iVar5;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (iVar1 < 1) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    pcVar4 = param_1;\n    do {\n      pcVar3 = strchr(\"aeiouAEIOU\",(int)*pcVar4);\n      iVar5 = (iVar5 + 1) - (uint)(pcVar3 == (char *)0x0);\n      pcVar4 = pcVar4 + 1;\n    } while (pcVar4 != param_1 + (ulong)(iVar1 - 1) + 1);\n    iVar5 = iVar5 + (uint)((param_1[(long)iVar1 + -1] & 0xdfU) == 0x59);\n  }\n  return iVar5;\n}"
    },
    {
        "task_id": 64,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  char *pcVar4;\n  int iVar5;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (iVar1 < 1) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    pcVar4 = param_1;\n    do {\n      pcVar3 = strchr(\"aeiouAEIOU\",(int)*pcVar4);\n      iVar5 = (iVar5 + 1) - (uint)(pcVar3 == (char *)0x0);\n      pcVar4 = pcVar4 + 1;\n    } while (pcVar4 != param_1 + (ulong)(iVar1 - 1) + 1);\n    iVar5 = iVar5 + (uint)((param_1[(long)iVar1 + -1] & 0xdfU) == 0x59);\n  }\n  return iVar5;\n}"
    },
    {
        "task_id": 65,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(uint param_1,int param_2)\n\n{\n  undefined uVar1;\n  int iVar2;\n  size_t sVar3;\n  long in_FS_OFFSET;\n  int local_50;\n  char local_48 [56];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sprintf(xs_3014,\"%d\",(ulong)param_1);\n  sVar3 = strlen(xs_3014);\n  iVar2 = (int)sVar3;\n  if (iVar2 < param_2) {\n    for (local_50 = 0; local_50 < iVar2 / 2; local_50 = local_50 + 1) {\n      uVar1 = xs_3014[local_50];\n      xs_3014[local_50] = xs_3014[(iVar2 + -1) - local_50];\n      xs_3014[(iVar2 + -1) - local_50] = uVar1;\n    }\n  }\n  else {\n    strcpy(local_48,xs_3014 + ((long)iVar2 - (long)param_2));\n    local_48[param_2] = '\\0';\n    strncat(local_48,xs_3014,(long)(iVar2 - param_2));\n    strcpy(xs_3014,local_48);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return xs_3014;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 65,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(undefined4 param_1,int param_2)\n\n{\n  char cVar1;\n  undefined uVar2;\n  long lVar3;\n  ulong uVar4;\n  undefined1 *puVar5;\n  int iVar6;\n  char *pcVar7;\n  long in_FS_OFFSET;\n  byte bVar8;\n  undefined auStack_68 [56];\n  long local_30;\n  \n  bVar8 = 0;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  __sprintf_chk(&xs_3389,1,0x32,&DAT_00102004,param_1);\n  uVar4 = 0xffffffffffffffff;\n  pcVar7 = &xs_3389;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *pcVar7;\n    pcVar7 = pcVar7 + (ulong)bVar8 * -2 + 1;\n  } while (cVar1 != '\\0');\n  iVar6 = (int)(~uVar4 - 1);\n  if (iVar6 < param_2) {\n    if (1 < iVar6) {\n      puVar5 = &xs_3389 + iVar6;\n      lVar3 = 0;\n      do {\n        uVar2 = (&xs_3389)[lVar3];\n        (&xs_3389)[lVar3] = puVar5[-1];\n        puVar5[-1] = uVar2;\n        lVar3 = lVar3 + 1;\n        puVar5 = puVar5 + -1;\n      } while ((int)lVar3 < (int)(((uint)(~uVar4 - 1 >> 0x1f) & 1) + iVar6) >> 1);\n    }\n  }\n  else {\n    __strcpy_chk(auStack_68,&xs_3389 + ((long)iVar6 - (long)param_2),0x32);\n    auStack_68[param_2] = 0;\n    __strncat_chk(auStack_68,&xs_3389,(long)(iVar6 - param_2),0x32);\n    __strcpy_chk(&xs_3389,auStack_68,0x32);\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return &xs_3389;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 65,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(undefined4 param_1,int param_2)\n\n{\n  undefined uVar1;\n  uint uVar2;\n  uint uVar3;\n  undefined1 *puVar4;\n  undefined8 uVar5;\n  undefined *puVar6;\n  int iVar7;\n  uint *puVar8;\n  uint *puVar9;\n  undefined1 *puVar10;\n  long in_FS_OFFSET;\n  bool bVar11;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  __sprintf_chk(&xs_3389,1,0x32,&DAT_00102004,param_1);\n  puVar9 = (uint *)&xs_3389;\n  do {\n    puVar8 = puVar9;\n    uVar2 = *puVar8 + 0xfefefeff & ~*puVar8;\n    uVar3 = uVar2 & 0x80808080;\n    puVar9 = puVar8 + 1;\n  } while (uVar3 == 0);\n  bVar11 = (uVar2 & 0x8080) == 0;\n  if (bVar11) {\n    uVar3 = uVar3 >> 0x10;\n  }\n  if (bVar11) {\n    puVar9 = (uint *)((long)puVar8 + 6);\n  }\n  puVar10 = (undefined1 *)((long)puVar9 + (-0x104043 - (ulong)CARRY1((byte)uVar3,(byte)uVar3)));\n  iVar7 = (int)puVar10;\n  if (iVar7 < param_2) {\n    if (iVar7 >> 1 != 0) {\n      puVar10 = &xs_3389;\n      puVar6 = &DAT_0010403f + iVar7;\n      do {\n        uVar1 = *puVar10;\n        puVar4 = puVar10 + 1;\n        *puVar10 = *puVar6;\n        *puVar6 = uVar1;\n        puVar10 = puVar4;\n        puVar6 = puVar6 + -1;\n      } while (puVar4 != &DAT_00104041 + ((iVar7 >> 1) - 1));\n    }\n  }\n  else {\n    uVar5 = __strcpy_chk(auStack_58,&xs_3389 + ((long)puVar10 - (long)param_2),0x32);\n    auStack_58[param_2] = 0;\n    uVar5 = __strncat_chk(uVar5,&xs_3389,(long)(iVar7 - param_2),0x32);\n    __strcpy_chk(&xs_3389,uVar5,0x32);\n  }\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return &xs_3389;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 65,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(undefined4 param_1,int param_2)\n\n{\n  undefined uVar1;\n  uint uVar2;\n  uint uVar3;\n  undefined1 *puVar4;\n  undefined8 uVar5;\n  undefined *puVar6;\n  int iVar7;\n  uint *puVar8;\n  uint *puVar9;\n  undefined1 *puVar10;\n  long in_FS_OFFSET;\n  bool bVar11;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  __sprintf_chk(&xs_3389,1,0x32,&DAT_00102004,param_1);\n  puVar9 = (uint *)&xs_3389;\n  do {\n    puVar8 = puVar9;\n    uVar2 = *puVar8 + 0xfefefeff & ~*puVar8;\n    uVar3 = uVar2 & 0x80808080;\n    puVar9 = puVar8 + 1;\n  } while (uVar3 == 0);\n  bVar11 = (uVar2 & 0x8080) == 0;\n  if (bVar11) {\n    uVar3 = uVar3 >> 0x10;\n  }\n  if (bVar11) {\n    puVar9 = (uint *)((long)puVar8 + 6);\n  }\n  puVar10 = (undefined1 *)((long)puVar9 + (-0x104043 - (ulong)CARRY1((byte)uVar3,(byte)uVar3)));\n  iVar7 = (int)puVar10;\n  if (iVar7 < param_2) {\n    if (iVar7 >> 1 != 0) {\n      puVar10 = &xs_3389;\n      puVar6 = &DAT_0010403f + iVar7;\n      do {\n        uVar1 = *puVar10;\n        puVar4 = puVar10 + 1;\n        *puVar10 = *puVar6;\n        *puVar6 = uVar1;\n        puVar10 = puVar4;\n        puVar6 = puVar6 + -1;\n      } while (puVar4 != &DAT_00104041 + ((iVar7 >> 1) - 1));\n    }\n  }\n  else {\n    uVar5 = __strcpy_chk(auStack_58,&xs_3389 + ((long)puVar10 - (long)param_2),0x32);\n    auStack_58[param_2] = 0;\n    uVar5 = __strncat_chk(uVar5,&xs_3389,(long)(iVar7 - param_2),0x32);\n    __strcpy_chk(&xs_3389,uVar5,0x32);\n  }\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return &xs_3389;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 66,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; *(char *)(param_1 + local_c) != '\\0'; local_c = local_c + 1) {\n    if (('@' < *(char *)(param_1 + local_c)) && (*(char *)(param_1 + local_c) < '[')) {\n      local_10 = local_10 + *(char *)(param_1 + local_c);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 66,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  char *pcVar3;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar2 = 0;\n  }\n  else {\n    iVar2 = 0;\n    pcVar3 = param_1 + 1;\n    do {\n      if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        iVar2 = cVar1 + iVar2;\n      }\n      cVar1 = *pcVar3;\n      pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 66,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 != '\\0') {\n    param_1 = param_1 + 1;\n    iVar2 = 0;\n    do {\n      if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        iVar2 = cVar1 + iVar2;\n      }\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar1 != '\\0');\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 66,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 != '\\0') {\n    param_1 = param_1 + 1;\n    iVar2 = 0;\n    do {\n      if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        iVar2 = cVar1 + iVar2;\n      }\n      cVar1 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar1 != '\\0');\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 67,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  bool bVar1;\n  int iVar2;\n  int iVar3;\n  ushort **ppuVar4;\n  long in_FS_OFFSET;\n  int local_3c;\n  int local_38;\n  undefined8 local_34;\n  undefined2 local_2c;\n  undefined8 local_2a;\n  undefined2 local_22;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_34 = 0;\n  local_2c = 0;\n  local_2a = 0;\n  local_22 = 0;\n  bVar1 = false;\n  local_3c = 0;\n  for (local_38 = 0; *(char *)(param_1 + local_38) != '\\0'; local_38 = local_38 + 1) {\n    ppuVar4 = __ctype_b_loc();\n    if (((*ppuVar4)[*(char *)(param_1 + local_38)] & 0x800) == 0) {\n      if ((!bVar1) && (0 < local_3c)) {\n        bVar1 = true;\n        local_3c = 0;\n      }\n    }\n    else if (bVar1) {\n      *(undefined *)((long)&local_2a + (long)local_3c) = *(undefined *)(local_38 + param_1);\n      local_3c = local_3c + 1;\n    }\n    else {\n      *(undefined *)((long)&local_34 + (long)local_3c) = *(undefined *)(local_38 + param_1);\n      local_3c = local_3c + 1;\n    }\n  }\n  iVar2 = atoi((char *)&local_34);\n  iVar3 = atoi((char *)&local_2a);\n  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return (param_2 - iVar2) - iVar3;\n}"
    },
    {
        "task_id": 67,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1,int param_2)\n\n{\n  ushort *puVar1;\n  bool bVar2;\n  ushort **ppuVar3;\n  long lVar4;\n  long lVar5;\n  int iVar6;\n  char cVar7;\n  char *pcVar8;\n  long in_FS_OFFSET;\n  undefined8 local_34;\n  undefined2 local_2c;\n  undefined8 local_2a;\n  undefined2 local_22;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_34 = 0;\n  local_2c = 0;\n  local_2a = 0;\n  local_22 = 0;\n  cVar7 = *param_1;\n  if (cVar7 != '\\0') {\n    ppuVar3 = __ctype_b_loc();\n    puVar1 = *ppuVar3;\n    iVar6 = 0;\n    bVar2 = false;\n    pcVar8 = param_1 + 1;\n    do {\n      if ((*(byte *)((long)puVar1 + (long)cVar7 * 2 + 1) & 8) == 0) {\n        if ((!bVar2) && (0 < iVar6)) {\n          iVar6 = 0;\n          bVar2 = true;\n        }\n      }\n      else if (bVar2) {\n        *(char *)((long)&local_2a + (long)iVar6) = cVar7;\n        iVar6 = iVar6 + 1;\n      }\n      else {\n        *(char *)((long)&local_34 + (long)iVar6) = cVar7;\n        iVar6 = iVar6 + 1;\n      }\n      cVar7 = *pcVar8;\n      pcVar8 = pcVar8 + 1;\n    } while (cVar7 != '\\0');\n  }\n  lVar4 = strtol((char *)&local_34,(char **)0x0,10);\n  lVar5 = strtol((char *)&local_2a,(char **)0x0,10);\n  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return (param_2 - (int)lVar4) - (int)lVar5;\n}"
    },
    {
        "task_id": 67,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1,int param_2)\n\n{\n  ushort *puVar1;\n  bool bVar2;\n  ushort **ppuVar3;\n  long lVar4;\n  long lVar5;\n  int iVar6;\n  char cVar7;\n  long in_FS_OFFSET;\n  undefined8 local_34;\n  undefined2 local_2c;\n  undefined8 local_2a;\n  undefined2 local_22;\n  long local_20;\n  \n  cVar7 = *param_1;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_22 = 0;\n  local_34 = 0;\n  local_2c = 0;\n  local_2a = 0;\n  if (cVar7 != '\\0') {\n    ppuVar3 = __ctype_b_loc();\n    param_1 = param_1 + 1;\n    iVar6 = 0;\n    puVar1 = *ppuVar3;\n    bVar2 = false;\n    do {\n      while ((*(byte *)((long)puVar1 + (long)cVar7 * 2 + 1) & 8) != 0) {\n        if (bVar2) {\n          *(char *)((long)&local_2a + (long)iVar6) = cVar7;\n          iVar6 = iVar6 + 1;\n        }\n        else {\n          *(char *)((long)&local_34 + (long)iVar6) = cVar7;\n          iVar6 = iVar6 + 1;\n        }\nLAB_001013ca:\n        cVar7 = *param_1;\n        param_1 = param_1 + 1;\n        if (cVar7 == '\\0') goto LAB_001013fe;\n      }\n      if (bVar2) goto LAB_001013ca;\n      if (0 < iVar6) {\n        iVar6 = 0;\n        bVar2 = true;\n      }\n      cVar7 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar7 != '\\0');\n  }\nLAB_001013fe:\n  lVar4 = strtol((char *)&local_34,(char **)0x0,10);\n  lVar5 = strtol((char *)&local_2a,(char **)0x0,10);\n  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return (param_2 - (int)lVar4) - (int)lVar5;\n}"
    },
    {
        "task_id": 67,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1,int param_2)\n\n{\n  ushort *puVar1;\n  bool bVar2;\n  ushort **ppuVar3;\n  long lVar4;\n  long lVar5;\n  int iVar6;\n  char cVar7;\n  long in_FS_OFFSET;\n  undefined8 local_34;\n  undefined2 local_2c;\n  undefined8 local_2a;\n  undefined2 local_22;\n  long local_20;\n  \n  cVar7 = *param_1;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_22 = 0;\n  local_34 = 0;\n  local_2c = 0;\n  local_2a = 0;\n  if (cVar7 != '\\0') {\n    ppuVar3 = __ctype_b_loc();\n    param_1 = param_1 + 1;\n    iVar6 = 0;\n    puVar1 = *ppuVar3;\n    bVar2 = false;\n    do {\n      while ((*(byte *)((long)puVar1 + (long)cVar7 * 2 + 1) & 8) != 0) {\n        if (bVar2) {\n          *(char *)((long)&local_2a + (long)iVar6) = cVar7;\n          iVar6 = iVar6 + 1;\n        }\n        else {\n          *(char *)((long)&local_34 + (long)iVar6) = cVar7;\n          iVar6 = iVar6 + 1;\n        }\nLAB_001013ca:\n        cVar7 = *param_1;\n        param_1 = param_1 + 1;\n        if (cVar7 == '\\0') goto LAB_001013fe;\n      }\n      if (bVar2) goto LAB_001013ca;\n      if (0 < iVar6) {\n        iVar6 = 0;\n        bVar2 = true;\n      }\n      cVar7 = *param_1;\n      param_1 = param_1 + 1;\n    } while (cVar7 != '\\0');\n  }\nLAB_001013fe:\n  lVar4 = strtol((char *)&local_34,(char **)0x0,10);\n  lVar5 = strtol((char *)&local_2a,(char **)0x0,10);\n  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return (param_2 - (int)lVar4) - (int)lVar5;\n}"
    },
    {
        "task_id": 68,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(long param_1,int param_2,int *param_3)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0x7fffffff;\n  local_10 = -1;\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    if (((*(uint *)(param_1 + (long)local_c * 4) & 1) == 0) &&\n       ((*(int *)(param_1 + (long)local_c * 4) < local_14 || (local_10 == -1)))) {\n      local_14 = *(int *)(param_1 + (long)local_c * 4);\n      local_10 = local_c;\n    }\n  }\n  if (local_10 == -1) {\n    param_3 = (int *)0x0;\n  }\n  else {\n    *param_3 = local_14;\n    param_3[1] = local_10;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 68,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(long param_1,int param_2,uint *param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  ulong uVar4;\n  ulong uVar5;\n  ulong uVar6;\n  bool bVar7;\n  \n  if (param_2 < 1) {\n    return (uint *)0x0;\n  }\n  uVar4 = 0;\n  uVar6 = 0xffffffff;\n  uVar3 = 0x7fffffff;\n  do {\n    uVar1 = *(uint *)(param_1 + uVar4 * 4);\n    uVar5 = uVar6;\n    uVar2 = uVar3;\n    if ((((uVar1 & 1) == 0) && (uVar5 = uVar4 & 0xffffffff, uVar2 = uVar1, (int)uVar6 != -1)) &&\n       ((int)uVar3 <= (int)uVar1)) {\n      uVar5 = uVar6;\n      uVar2 = uVar3;\n    }\n    bVar7 = param_2 - 1 != uVar4;\n    uVar4 = uVar4 + 1;\n    uVar6 = uVar5;\n    uVar3 = uVar2;\n  } while (bVar7);\n  if ((uint)uVar5 == 0xffffffff) {\n    return (uint *)0x0;\n  }\n  *param_3 = uVar2;\n  param_3[1] = (uint)uVar5;\n  return param_3;\n}"
    },
    {
        "task_id": 68,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(long param_1,int param_2,uint *param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (0 < param_2) {\n    uVar4 = 0xffffffff;\n    uVar2 = 0x7fffffff;\n    uVar3 = 0;\n    do {\n      uVar1 = *(uint *)(param_1 + uVar3 * 4);\n      if (((uVar1 & 1) == 0) && ((uVar4 == 0xffffffff || ((int)uVar1 < (int)uVar2)))) {\n        uVar4 = (uint)uVar3;\n        uVar2 = uVar1;\n      }\n      bVar5 = uVar3 != param_2 - 1;\n      uVar3 = uVar3 + 1;\n    } while (bVar5);\n    if (uVar4 != 0xffffffff) {\n      *param_3 = uVar2;\n      param_3[1] = uVar4;\n      return param_3;\n    }\n  }\n  return (uint *)0x0;\n}"
    },
    {
        "task_id": 68,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(long param_1,int param_2,uint *param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (0 < param_2) {\n    uVar4 = 0xffffffff;\n    uVar2 = 0x7fffffff;\n    uVar3 = 0;\n    do {\n      uVar1 = *(uint *)(param_1 + uVar3 * 4);\n      if (((uVar1 & 1) == 0) && ((uVar4 == 0xffffffff || ((int)uVar1 < (int)uVar2)))) {\n        uVar4 = (uint)uVar3;\n        uVar2 = uVar1;\n      }\n      bVar5 = param_2 - 1 != uVar3;\n      uVar3 = uVar3 + 1;\n    } while (bVar5);\n    if (uVar4 != 0xffffffff) {\n      *param_3 = uVar2;\n      param_3[1] = uVar4;\n      return param_3;\n    }\n  }\n  return (uint *)0x0;\n}"
    },
    {
        "task_id": 69,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  void *__ptr;\n  int *piVar1;\n  int local_18;\n  int local_14;\n  \n  __ptr = calloc((long)(param_2 + 1),4);\n  local_18 = -1;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    piVar1 = (int *)((long)__ptr + (long)*(int *)(param_1 + (long)local_14 * 4) * 4);\n    *piVar1 = *piVar1 + 1;\n    if ((*(int *)(param_1 + (long)local_14 * 4) <=\n         *(int *)((long)__ptr + (long)*(int *)(param_1 + (long)local_14 * 4) * 4)) &&\n       (local_18 < *(int *)(param_1 + (long)local_14 * 4))) {\n      local_18 = *(int *)(param_1 + (long)local_14 * 4);\n    }\n  }\n  free(__ptr);\n  return local_18;\n}"
    },
    {
        "task_id": 69,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  void *__ptr;\n  int iVar4;\n  int iVar5;\n  \n  __ptr = calloc((long)(param_2 + 1),4);\n  if (param_2 < 1) {\n    iVar5 = -1;\n  }\n  else {\n    piVar2 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar5 = -1;\n    do {\n      iVar3 = *param_1;\n      piVar1 = (int *)((long)__ptr + (long)iVar3 * 4);\n      iVar4 = *piVar1 + 1;\n      *piVar1 = iVar4;\n      if ((iVar3 <= iVar4) && (iVar5 < iVar3)) {\n        iVar5 = iVar3;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar2);\n  }\n  free(__ptr);\n  return iVar5;\n}"
    },
    {
        "task_id": 69,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  int *piVar3;\n  int iVar4;\n  void *__ptr;\n  int iVar5;\n  \n  __ptr = calloc((long)(param_2 + 1),4);\n  if (param_2 < 1) {\n    iVar5 = -1;\n  }\n  else {\n    iVar5 = -1;\n    piVar3 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar4 = *param_1;\n      piVar2 = (int *)((long)__ptr + (long)iVar4 * 4);\n      iVar1 = *piVar2 + 1;\n      *piVar2 = iVar1;\n      if ((iVar4 <= iVar1) && (iVar5 < iVar4)) {\n        iVar5 = iVar4;\n      }\n      param_1 = param_1 + 1;\n    } while (piVar3 != param_1);\n  }\n  free(__ptr);\n  return iVar5;\n}"
    },
    {
        "task_id": 69,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  int *piVar3;\n  int iVar4;\n  void *__ptr;\n  int iVar5;\n  \n  __ptr = calloc((long)(param_2 + 1),4);\n  if (param_2 < 1) {\n    iVar5 = -1;\n  }\n  else {\n    iVar5 = -1;\n    piVar3 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar4 = *param_1;\n      piVar2 = (int *)((long)__ptr + (long)iVar4 * 4);\n      iVar1 = *piVar2 + 1;\n      *piVar2 = iVar1;\n      if ((iVar4 <= iVar1) && (iVar5 < iVar4)) {\n        iVar5 = iVar4;\n      }\n      param_1 = param_1 + 1;\n    } while (piVar3 != param_1);\n  }\n  free(__ptr);\n  return iVar5;\n}"
    },
    {
        "task_id": 70,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,long param_3)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_14;\n  int local_10;\n  \n  for (local_20 = 0; local_1c = local_20, local_20 < param_2 + -1; local_20 = local_20 + 1) {\n    while (local_1c = local_1c + 1, local_1c < param_2) {\n      if (*(int *)(param_1 + (long)local_1c * 4) < *(int *)(param_1 + (long)local_20 * 4)) {\n        uVar2 = *(undefined4 *)(param_1 + (long)local_20 * 4);\n        *(undefined4 *)(param_1 + (long)local_20 * 4) =\n             *(undefined4 *)(param_1 + (long)local_1c * 4);\n        *(undefined4 *)((long)local_1c * 4 + param_1) = uVar2;\n      }\n    }\n  }\n  local_18 = 0;\n  local_10 = 0;\n  local_14 = param_2 + -1;\n  while (local_18 <= local_14) {\n    if (local_18 == local_14) {\n      *(undefined4 *)((long)local_10 * 4 + param_3) = *(undefined4 *)((long)local_18 * 4 + param_1);\n      local_18 = local_18 + 1;\n      local_10 = local_10 + 1;\n    }\n    else {\n      iVar1 = local_10 + 1;\n      *(undefined4 *)((long)local_10 * 4 + param_3) = *(undefined4 *)((long)local_18 * 4 + param_1);\n      local_10 = local_10 + 2;\n      *(undefined4 *)((long)iVar1 * 4 + param_3) = *(undefined4 *)((long)local_14 * 4 + param_1);\n      local_18 = local_18 + 1;\n      local_14 = local_14 + -1;\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 70,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,long param_3)\n\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  long lVar5;\n  \n  iVar4 = param_2 + -1;\n  if (iVar4 < 1) {\n    if (iVar4 != 0) {\n      return;\n    }\n  }\n  else {\n    lVar5 = 1;\n    piVar3 = param_1;\n    do {\n      iVar1 = (int)lVar5;\n      lVar2 = lVar5;\n      while (iVar1 < param_2) {\n        iVar1 = *piVar3;\n        if (param_1[lVar2] < iVar1) {\n          *piVar3 = param_1[lVar2];\n          param_1[lVar2] = iVar1;\n        }\n        lVar2 = lVar2 + 1;\n        iVar1 = (int)lVar2;\n      }\n      lVar5 = lVar5 + 1;\n      piVar3 = piVar3 + 1;\n    } while (lVar5 != (ulong)(param_2 - 2) + 2);\n  }\n  lVar2 = (long)iVar4;\n  lVar5 = 0;\n  do {\n    iVar4 = (int)lVar5;\n    if ((int)lVar2 == iVar4) {\n      *(int *)(param_3 + (long)(iVar4 * 2) * 4) = param_1[iVar4];\n      return;\n    }\n    *(int *)(param_3 + lVar5 * 8) = param_1[lVar5];\n    *(int *)(param_3 + 4 + lVar5 * 8) = param_1[lVar2];\n    lVar5 = lVar5 + 1;\n    lVar2 = lVar2 + -1;\n  } while ((int)lVar5 <= (int)lVar2);\n  return;\n}"
    },
    {
        "task_id": 70,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,long param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  long lVar3;\n  int *piVar4;\n  long lVar5;\n  int iVar6;\n  \n  iVar6 = param_2 + -1;\n  if (iVar6 < 1) {\n    if (iVar6 != 0) {\n      return;\n    }\n  }\n  else {\n    lVar5 = 1;\n    piVar4 = param_1;\n    do {\n      iVar2 = (int)lVar5;\n      lVar1 = lVar5;\n      while (iVar2 < param_2) {\n        iVar2 = *piVar4;\n        if (param_1[lVar1] < iVar2) {\n          *piVar4 = param_1[lVar1];\n          param_1[lVar1] = iVar2;\n        }\n        lVar1 = lVar1 + 1;\n        iVar2 = (int)lVar1;\n      }\n      lVar5 = lVar5 + 1;\n      piVar4 = piVar4 + 1;\n    } while (lVar5 != (ulong)(param_2 - 2) + 2);\n  }\n  lVar5 = 0;\n  iVar2 = 0;\n  do {\n    while( true ) {\n      lVar1 = (long)iVar2;\n      *(int *)(param_3 + lVar1 * 4) = param_1[lVar5];\n      if (iVar6 == (int)lVar5) break;\n      lVar3 = (long)iVar6;\n      lVar5 = lVar5 + 1;\n      iVar6 = iVar6 + -1;\n      iVar2 = iVar2 + 2;\n      *(int *)(param_3 + 4 + lVar1 * 4) = param_1[lVar3];\n      if (iVar6 < (int)lVar5) {\n        return;\n      }\n    }\n    lVar5 = lVar5 + 1;\n    iVar2 = iVar2 + 1;\n  } while ((int)lVar5 <= iVar6);\n  return;\n}"
    },
    {
        "task_id": 70,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,long param_3)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  int *piVar4;\n  long lVar5;\n  int iVar6;\n  \n  iVar6 = param_2 + -1;\n  if (iVar6 < 1) {\n    if (iVar6 != 0) {\n      return;\n    }\n  }\n  else {\n    lVar5 = 1;\n    piVar4 = param_1;\n    do {\n      iVar2 = (int)lVar5;\n      lVar3 = lVar5;\n      while (iVar2 < param_2) {\n        iVar2 = *piVar4;\n        if (param_1[lVar3] < iVar2) {\n          *piVar4 = param_1[lVar3];\n          param_1[lVar3] = iVar2;\n        }\n        lVar3 = lVar3 + 1;\n        iVar2 = (int)lVar3;\n      }\n      lVar5 = lVar5 + 1;\n      piVar4 = piVar4 + 1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar5);\n  }\n  lVar5 = 0;\n  iVar2 = 0;\n  do {\n    while( true ) {\n      *(int *)(param_3 + (long)iVar2 * 4) = param_1[lVar5];\n      if (iVar6 != (int)lVar5) break;\n      lVar5 = lVar5 + 1;\n      iVar2 = iVar2 + 1;\n      if (iVar6 < (int)lVar5) {\n        return;\n      }\n    }\n    iVar1 = iVar6 + -1;\n    lVar5 = lVar5 + 1;\n    *(int *)(param_3 + 4 + (long)iVar2 * 4) = param_1[iVar6];\n    iVar6 = iVar1;\n    iVar2 = iVar2 + 2;\n  } while ((int)lVar5 <= iVar1);\n  return;\n}"
    },
    {
        "task_id": 71,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
        "c_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  fVar1 = DAT_00102188;\n  if (((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3)) &&\n     (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) / DAT_0010218c;\n    fVar1 = sqrtf((fVar1 - param_3) * (fVar1 - param_1) * fVar1 * (fVar1 - param_2));\n    fVar1 = roundf(DAT_00102190 * fVar1);\n    fVar1 = fVar1 / DAT_00102190;\n  }\n  return fVar1;\n}"
    },
    {
        "task_id": 71,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
        "c_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  if (((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3)) &&\n     (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * _DAT_0010217c;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      sqrtf(fVar1);\n    }\n    fVar1 = roundf(DAT_00102180 * SQRT(fVar1));\n    return fVar1 / DAT_00102180;\n  }\n  return DAT_00102178;\n}"
    },
    {
        "task_id": 71,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
        "c_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  if (((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3)) &&\n     (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * _DAT_00102008;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      sqrtf(fVar1);\n    }\n    fVar1 = roundf(DAT_0010200c * SQRT(fVar1));\n    return fVar1 / DAT_0010200c;\n  }\n  return DAT_00102004;\n}"
    },
    {
        "task_id": 71,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
        "c_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}",
        "input_asm_prompt": "float func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  if (((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3)) &&\n     (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * _DAT_00102008;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      sqrtf(fVar1);\n    }\n    fVar1 = roundf(DAT_0010200c * SQRT(fVar1));\n    return fVar1 / DAT_0010200c;\n  }\n  return DAT_00102004;\n}"
    },
    {
        "task_id": 72,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(long param_1,int param_2,int param_3)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_c = 0;\n  while( true ) {\n    if (param_2 / 2 <= local_c) {\n      if (param_2 % 2 == 1) {\n        local_10 = local_10 + *(int *)(param_1 + (long)(param_2 / 2) * 4);\n      }\n      return CONCAT31((int3)((uint)local_10 >> 8),local_10 <= param_3);\n    }\n    if (*(int *)(param_1 + (long)local_c * 4) !=\n        *(int *)(param_1 + (long)((param_2 + -1) - local_c) * 4)) break;\n    local_10 = local_10 +\n               *(int *)(param_1 + (long)((param_2 + -1) - local_c) * 4) +\n               *(int *)(param_1 + (long)local_c * 4);\n    local_c = local_c + 1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 72,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1,int param_2,int param_3)\n\n{\n  int iVar1;\n  long lVar2;\n  long lVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    iVar4 = 0;\n  }\n  else {\n    lVar3 = param_1 + (long)param_2 * 4;\n    lVar2 = 0;\n    iVar4 = 0;\n    do {\n      iVar1 = *(int *)(param_1 + lVar2 * 4);\n      if (iVar1 != *(int *)(lVar3 + -4)) {\n        return false;\n      }\n      iVar4 = iVar4 + iVar1 + *(int *)(lVar3 + -4);\n      lVar2 = lVar2 + 1;\n      lVar3 = lVar3 + -4;\n    } while ((int)lVar2 < param_2 / 2);\n  }\n  if (param_2 % 2 == 1) {\n    iVar4 = iVar4 + *(int *)(param_1 + (long)(param_2 / 2) * 4);\n  }\n  return iVar4 <= param_3;\n}"
    },
    {
        "task_id": 72,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1,int param_2,int param_3)\n\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    iVar4 = 0;\n  }\n  else {\n    iVar4 = 0;\n    piVar3 = (int *)(param_1 + (long)(param_2 + -1) * 4);\n    lVar2 = 0;\n    do {\n      iVar1 = *(int *)(param_1 + lVar2 * 4);\n      if (iVar1 != *piVar3) {\n        return false;\n      }\n      lVar2 = lVar2 + 1;\n      iVar4 = iVar4 + iVar1 * 2;\n      piVar3 = piVar3 + -1;\n    } while ((int)lVar2 < param_2 / 2);\n  }\n  if (param_2 % 2 != 1) {\n    return iVar4 <= param_3;\n  }\n  return iVar4 + *(int *)(param_1 + (long)(param_2 / 2) * 4) <= param_3;\n}"
    },
    {
        "task_id": 72,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1,int param_2,int param_3)\n\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    iVar4 = 0;\n  }\n  else {\n    iVar4 = 0;\n    piVar3 = (int *)(param_1 + (long)(param_2 + -1) * 4);\n    lVar2 = 0;\n    do {\n      iVar1 = *(int *)(param_1 + lVar2 * 4);\n      if (iVar1 != *piVar3) {\n        return false;\n      }\n      lVar2 = lVar2 + 1;\n      iVar4 = iVar4 + iVar1 * 2;\n      piVar3 = piVar3 + -1;\n    } while ((int)lVar2 < param_2 / 2);\n  }\n  if (param_2 % 2 != 1) {\n    return iVar4 <= param_3;\n  }\n  return iVar4 + *(int *)(param_1 + (long)(param_2 / 2) * 4) <= param_3;\n}"
    },
    {
        "task_id": 73,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; local_c < param_2 / 2; local_c = local_c + 1) {\n    if (*(int *)(param_1 + (long)local_c * 4) !=\n        *(int *)(param_1 + (long)((param_2 + -1) - local_c) * 4)) {\n      local_10 = local_10 + 1;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 73,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  int iVar2;\n  long lVar3;\n  \n  if (param_2 < 2) {\n    iVar2 = 0;\n  }\n  else {\n    lVar3 = param_1 + (long)param_2 * 4;\n    lVar1 = 0;\n    iVar2 = 0;\n    do {\n      iVar2 = iVar2 + (uint)(*(int *)(param_1 + lVar1 * 4) != *(int *)(lVar3 + -4));\n      lVar1 = lVar1 + 1;\n      lVar3 = lVar3 + -4;\n    } while ((int)lVar1 < param_2 / 2);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 73,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  int iVar2;\n  long lVar3;\n  int *piVar4;\n  int iVar5;\n  \n  if (1 < param_2) {\n    lVar3 = 0;\n    iVar5 = 0;\n    piVar4 = (int *)(param_1 + (long)(param_2 + -1) * 4);\n    do {\n      iVar2 = *piVar4;\n      lVar1 = lVar3 * 4;\n      lVar3 = lVar3 + 1;\n      piVar4 = piVar4 + -1;\n      iVar5 = iVar5 + (uint)(*(int *)(param_1 + lVar1) != iVar2);\n    } while ((int)lVar3 < param_2 / 2);\n    return iVar5;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 73,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  int *piVar4;\n  int *piVar5;\n  int iVar6;\n  int *piVar7;\n  int *piVar8;\n  int *piVar9;\n  int *piVar10;\n  uint uVar11;\n  int *piVar12;\n  uint uVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  \n  uVar13 = param_2 / 2;\n  if (param_2 < 2) {\n    iVar14 = 0;\n  }\n  else {\n    iVar1 = param_2 + -1;\n    if (param_2 < 8) {\n      uVar11 = 0;\n      iVar14 = 0;\n    }\n    else {\n      iVar14 = 0;\n      iVar15 = 0;\n      iVar16 = 0;\n      iVar17 = 0;\n      piVar12 = param_1 + (long)iVar1 + -3;\n      piVar10 = param_1;\n      do {\n        iVar2 = *piVar12;\n        piVar3 = piVar12 + 1;\n        piVar4 = piVar12 + 2;\n        piVar5 = piVar12 + 3;\n        iVar6 = *piVar10;\n        piVar7 = piVar10 + 1;\n        piVar8 = piVar10 + 2;\n        piVar9 = piVar10 + 3;\n        piVar10 = piVar10 + 4;\n        piVar12 = piVar12 + -4;\n        iVar14 = iVar14 - ~-(uint)(*piVar5 == iVar6);\n        iVar15 = iVar15 - ~-(uint)(*piVar4 == *piVar7);\n        iVar16 = iVar16 - ~-(uint)(*piVar3 == *piVar8);\n        iVar17 = iVar17 - ~-(uint)(iVar2 == *piVar9);\n      } while (piVar10 != param_1 + (ulong)(uVar13 >> 2) * 4);\n      uVar11 = uVar13 & 0xfffffffc;\n      iVar14 = iVar14 + iVar16 + iVar15 + iVar17;\n      if ((uVar13 & 3) == 0) {\n        return iVar14;\n      }\n    }\n    if (param_1[(int)uVar11] != param_1[(int)(iVar1 - uVar11)]) {\n      iVar14 = iVar14 + 1;\n    }\n    iVar15 = uVar11 + 1;\n    if (iVar15 < (int)uVar13) {\n      if (param_1[iVar1 - iVar15] != param_1[iVar15]) {\n        iVar14 = iVar14 + 1;\n      }\n      iVar15 = uVar11 + 2;\n      if ((iVar15 < (int)uVar13) && (param_1[iVar15] != param_1[iVar1 - iVar15])) {\n        return iVar14 + 1;\n      }\n    }\n  }\n  return iVar14;\n}"
    },
    {
        "task_id": 74,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
        "c_test": "int issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}",
        "input_asm_prompt": "long func0(long param_1,int param_2,long param_3,int param_4)\n\n{\n  size_t sVar1;\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_c = 0;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    sVar1 = strlen(*(char **)(param_1 + (long)local_14 * 8));\n    local_10 = local_10 + (int)sVar1;\n  }\n  for (local_14 = 0; local_14 < param_4; local_14 = local_14 + 1) {\n    sVar1 = strlen(*(char **)(param_3 + (long)local_14 * 8));\n    local_c = local_c + (int)sVar1;\n  }\n  if ((local_c <= local_10) && (local_c < local_10)) {\n    param_1 = param_3;\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 74,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
        "c_test": "int issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}",
        "input_asm_prompt": "char ** func0(char **param_1,int param_2,char **param_3,int param_4)\n\n{\n  char cVar1;\n  long lVar2;\n  long lVar3;\n  char *pcVar4;\n  int iVar5;\n  char **ppcVar6;\n  int iVar7;\n  \n  if (param_2 < 1) {\n    iVar7 = 0;\n    if (param_4 < 1) {\n      return param_1;\n    }\n  }\n  else {\n    iVar7 = 0;\n    ppcVar6 = param_1;\n    do {\n      lVar2 = -1;\n      pcVar4 = *ppcVar6;\n      do {\n        if (lVar2 == 0) break;\n        lVar2 = lVar2 + -1;\n        cVar1 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n      } while (cVar1 != '\\0');\n      iVar7 = iVar7 + -1 + ~(uint)lVar2;\n      ppcVar6 = ppcVar6 + 1;\n    } while (ppcVar6 != param_1 + (ulong)(param_2 - 1) + 1);\n    if (param_4 < 1) {\n      iVar5 = 0;\n      goto LAB_001011c8;\n    }\n  }\n  lVar2 = 0;\n  iVar5 = 0;\n  do {\n    lVar3 = -1;\n    pcVar4 = param_3[lVar2];\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      cVar1 = *pcVar4;\n      pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    iVar5 = iVar5 + -1 + ~(uint)lVar3;\n    lVar2 = lVar2 + 1;\n  } while ((int)lVar2 < param_4);\nLAB_001011c8:\n  if (iVar7 <= iVar5) {\n    param_3 = param_1;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 74,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
        "c_test": "int issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}",
        "input_asm_prompt": "char ** func0(char **param_1,int param_2,char **param_3,int param_4)\n\n{\n  char *__s;\n  size_t sVar1;\n  char **ppcVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    iVar4 = 0;\n    if (param_4 < 1) {\n      return param_1;\n    }\n  }\n  else {\n    iVar4 = 0;\n    ppcVar2 = param_1;\n    do {\n      __s = *ppcVar2;\n      ppcVar2 = ppcVar2 + 1;\n      sVar1 = strlen(__s);\n      iVar4 = iVar4 + (int)sVar1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1 != ppcVar2);\n    if (param_4 < 1) {\n      iVar5 = 0;\n      goto LAB_001011e6;\n    }\n  }\n  lVar3 = 0;\n  iVar5 = 0;\n  do {\n    ppcVar2 = param_3 + lVar3;\n    lVar3 = lVar3 + 1;\n    sVar1 = strlen(*ppcVar2);\n    iVar5 = iVar5 + (int)sVar1;\n  } while ((int)lVar3 < param_4);\nLAB_001011e6:\n  if (iVar4 <= iVar5) {\n    param_3 = param_1;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 74,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
        "c_test": "int issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}",
        "input_asm_prompt": "char ** func0(char **param_1,int param_2,char **param_3,int param_4)\n\n{\n  char *__s;\n  size_t sVar1;\n  char **ppcVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    iVar4 = 0;\n    if (param_4 < 1) {\n      return param_1;\n    }\n  }\n  else {\n    iVar4 = 0;\n    ppcVar2 = param_1;\n    do {\n      __s = *ppcVar2;\n      ppcVar2 = ppcVar2 + 1;\n      sVar1 = strlen(__s);\n      iVar4 = iVar4 + (int)sVar1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1 != ppcVar2);\n    if (param_4 < 1) {\n      iVar5 = 0;\n      goto LAB_001011e6;\n    }\n  }\n  lVar3 = 0;\n  iVar5 = 0;\n  do {\n    ppcVar2 = param_3 + lVar3;\n    lVar3 = lVar3 + 1;\n    sVar1 = strlen(*ppcVar2);\n    iVar5 = iVar5 + (int)sVar1;\n  } while ((int)lVar3 < param_4);\nLAB_001011e6:\n  if (iVar4 <= iVar5) {\n    param_3 = param_1;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 75,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(int param_1)\n\n{\n  bool bVar1;\n  int local_1c;\n  int local_10;\n  int local_c;\n  \n  if (param_1 < 2) {\n    bVar1 = false;\n  }\n  else {\n    local_10 = 0;\n    local_1c = param_1;\n    for (local_c = 2; local_c * local_c <= local_1c; local_c = local_c + 1) {\n      for (; local_1c % local_c == 0; local_1c = local_1c / local_c) {\n        local_10 = local_10 + 1;\n      }\n    }\n    if (1 < local_1c) {\n      local_10 = local_10 + 1;\n    }\n    bVar1 = local_10 == 3;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 75,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (param_1 < 2) {\n    return false;\n  }\n  iVar2 = 2;\n  iVar4 = 0;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar4 = iVar4 + 1;\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n    if (param_1 < 2) goto LAB_001011b8;\n  }\n  iVar4 = iVar4 + 1;\nLAB_001011b8:\n  return iVar4 == 3;\n}"
    },
    {
        "task_id": 75,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0_part_0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  iVar4 = 0;\n  iVar2 = 2;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        iVar4 = iVar4 + 1;\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return iVar4 + (uint)(1 < param_1) == 3;\n}\n\n// Function: func0\nundefined8 func0(int param_1)\n\n{\n  undefined8 uVar1;\n  \n  if (1 < param_1) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 75,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0_part_0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  iVar4 = 0;\n  iVar2 = 2;\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        iVar4 = iVar4 + 1;\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return iVar4 + (uint)(1 < param_1) == 3;\n}\n\n// Function: func0\nbool func0(int param_1)\n\n{\n  long lVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  bool bVar5;\n  \n  bVar5 = false;\n  if (1 < param_1) {\n    iVar4 = 0;\n    iVar2 = 2;\n    if (param_1 < 4) {\n      return false;\n    }\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        iVar4 = iVar4 + 1;\n        lVar1 = (long)param_1;\n        param_1 = (int)(lVar1 / (long)iVar2);\n        iVar3 = (int)((long)((ulong)(uint)(param_1 >> 0x1f) << 0x20 |\n                            lVar1 / (long)iVar2 & 0xffffffffU) % (long)iVar2);\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n    if (param_1 < 2) {\n      return iVar4 == 3;\n    }\n    bVar5 = iVar4 == 2;\n  }\n  return bVar5;\n}"
    },
    {
        "task_id": 76,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 1;\n  for (local_c = 0; (local_10 <= param_1 && (local_c < 100)); local_c = local_c + 1) {\n    if (local_10 == param_1) {\n      return 1;\n    }\n    local_10 = local_10 * param_2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 76,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1 != 1) {\n    iVar2 = 0;\n    iVar1 = 1;\n    while( true ) {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if ((param_1 < iVar1) || (99 < iVar2)) break;\n      if (param_1 == iVar1) {\n        return 1;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 76,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1 != 1) {\n    iVar2 = 0;\n    iVar1 = 1;\n    do {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if (param_1 < iVar1) {\n        return 0;\n      }\n      if (99 < iVar2) {\n        return 0;\n      }\n    } while (param_1 != iVar1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 76,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1 != 1) {\n    iVar2 = 0;\n    iVar1 = 1;\n    do {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if (param_1 < iVar1) {\n        return 0;\n      }\n      if (99 < iVar2) {\n        return 0;\n      }\n    } while (param_1 != iVar1);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 77,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(uint param_1)\n\n{\n  uint uVar1;\n  int local_c;\n  \n  local_c = 0;\n  while( true ) {\n    uVar1 = (int)param_1 >> 0x1f;\n    if ((int)((uVar1 ^ param_1) - uVar1) < local_c * local_c * local_c) {\n      return 0;\n    }\n    if (local_c * local_c * local_c == (uVar1 ^ param_1) - uVar1) break;\n    local_c = local_c + 1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 77,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(uint param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = ((int)param_1 >> 0x1f ^ param_1) - ((int)param_1 >> 0x1f);\n  if (param_1 == 0) {\n    return 1;\n  }\n  iVar3 = 1;\n  iVar1 = 1;\n  do {\n    if (iVar2 == iVar1) {\n      return 1;\n    }\n    iVar3 = iVar3 + 1;\n    iVar1 = iVar3 * iVar3 * iVar3;\n  } while (iVar1 <= iVar2);\n  return 0;\n}"
    },
    {
        "task_id": 77,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(uint param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = ((int)param_1 >> 0x1f ^ param_1) - ((int)param_1 >> 0x1f);\n  if (param_1 != 0) {\n    iVar3 = 1;\n    iVar1 = 1;\n    while (iVar2 != iVar1) {\n      iVar3 = iVar3 + 1;\n      iVar1 = iVar3 * iVar3 * iVar3;\n      if (iVar2 < iVar1) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}"
    },
    {
        "task_id": 77,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(uint param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = ((int)param_1 >> 0x1f ^ param_1) - ((int)param_1 >> 0x1f);\n  if (param_1 != 0) {\n    iVar3 = 1;\n    iVar1 = 1;\n    while (iVar2 != iVar1) {\n      iVar3 = iVar3 + 1;\n      iVar1 = iVar3 * iVar3 * iVar3;\n      if (iVar2 < iVar1) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}"
    },
    {
        "task_id": 78,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  int local_28;\n  int local_24;\n  \n  local_28 = 0;\n  local_24 = 0;\n  while( true ) {\n    sVar2 = strlen(param_1);\n    if (sVar2 <= (ulong)(long)local_24) break;\n    pcVar1 = strchr(\"2357BD\",(int)param_1[local_24]);\n    if (pcVar1 != (char *)0x0) {\n      local_28 = local_28 + 1;\n    }\n    local_24 = local_24 + 1;\n  }\n  return local_28;\n}"
    },
    {
        "task_id": 78,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  char *pcVar2;\n  ulong uVar3;\n  int iVar4;\n  char *pcVar5;\n  \n  uVar3 = 0xffffffffffffffff;\n  pcVar5 = param_1;\n  do {\n    if (uVar3 == 0) break;\n    uVar3 = uVar3 - 1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  pcVar5 = param_1 + (~uVar3 - 1);\n  iVar4 = 0;\n  for (; param_1 != pcVar5; param_1 = param_1 + 1) {\n    pcVar2 = strchr(\"2357BD\",(int)*param_1);\n    iVar4 = (iVar4 + 1) - (uint)(pcVar2 == (char *)0x0);\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 78,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  char *pcVar3;\n  int iVar4;\n  \n  iVar4 = 0;\n  sVar2 = strlen(param_1);\n  pcVar1 = param_1 + sVar2;\n  for (; param_1 != pcVar1; param_1 = param_1 + 1) {\n    pcVar3 = strchr(\"2357BD\",(int)*param_1);\n    iVar4 = (iVar4 + 1) - (uint)(pcVar3 == (char *)0x0);\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 78,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  char *pcVar3;\n  int iVar4;\n  \n  sVar2 = strlen(param_1);\n  if (sVar2 != 0) {\n    pcVar1 = param_1 + sVar2;\n    iVar4 = 0;\n    do {\n      pcVar3 = strchr(\"2357BD\",(int)*param_1);\n      iVar4 = (iVar4 + 1) - (uint)(pcVar3 == (char *)0x0);\n      param_1 = param_1 + 1;\n    } while (param_1 != pcVar1);\n    return iVar4;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 79,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(int param_1)\n\n{\n  char cVar1;\n  void *__ptr;\n  char *__dest;\n  ulong uVar2;\n  char *pcVar3;\n  byte bVar4;\n  int local_2c;\n  int local_24;\n  \n  bVar4 = 0;\n  __ptr = malloc(0x40);\n  if (__ptr == (void *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    local_24 = 0x3e;\n    *(undefined *)((long)__ptr + 0x3f) = 0;\n    local_2c = param_1;\n    if (param_1 == 0) {\n      local_24 = 0x3d;\n      *(undefined *)((long)__ptr + 0x3e) = 0x30;\n    }\n    else {\n      for (; 0 < local_2c; local_2c = local_2c / 2) {\n        cVar1 = (char)(local_2c >> 0x1f);\n        *(byte *)((long)__ptr + (long)local_24) = ((char)local_2c - cVar1 & 1U) + cVar1 + '0';\n        local_24 = local_24 + -1;\n      }\n    }\n    *(undefined *)((long)__ptr + (long)local_24) = 0x62;\n    *(undefined *)((long)__ptr + (long)(local_24 + -1)) = 100;\n    __dest = (char *)malloc((long)(0x41 - (local_24 + -1)));\n    if (__dest == (char *)0x0) {\n      free(__ptr);\n      __dest = (char *)0x0;\n    }\n    else {\n      strcpy(__dest,(char *)((long)(local_24 + -1) + (long)__ptr));\n      uVar2 = 0xffffffffffffffff;\n      pcVar3 = __dest;\n      do {\n        if (uVar2 == 0) break;\n        uVar2 = uVar2 - 1;\n        cVar1 = *pcVar3;\n        pcVar3 = pcVar3 + (ulong)bVar4 * -2 + 1;\n      } while (cVar1 != '\\0');\n      *(undefined2 *)(__dest + (~uVar2 - 1)) = 0x6264;\n      *(undefined *)((long)(__dest + (~uVar2 - 1)) + 2) = 0;\n      free(__ptr);\n    }\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 79,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(int param_1)\n\n{\n  char cVar1;\n  bool bVar2;\n  void *__ptr;\n  char *__dest;\n  ulong uVar3;\n  long lVar4;\n  int iVar5;\n  char *pcVar6;\n  byte bVar7;\n  \n  bVar7 = 0;\n  __ptr = malloc(0x40);\n  if (__ptr == (void *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    *(undefined *)((long)__ptr + 0x3f) = 0;\n    if (param_1 == 0) {\n      *(undefined *)((long)__ptr + 0x3e) = 0x30;\n      iVar5 = 0x3d;\n    }\n    else {\n      lVar4 = 0x3d;\n      iVar5 = 0x3e;\n      if (0 < param_1) {\n        do {\n          iVar5 = (int)lVar4;\n          cVar1 = (char)(param_1 >> 0x1f);\n          *(byte *)((long)__ptr + lVar4 + 1) = ((char)param_1 - cVar1 & 1U) + cVar1 + '0';\n          lVar4 = lVar4 + -1;\n          bVar2 = 1 < param_1;\n          param_1 = param_1 / 2;\n        } while (bVar2);\n      }\n    }\n    *(undefined *)((long)__ptr + (long)iVar5) = 0x62;\n    pcVar6 = (char *)((long)(iVar5 + -1) + (long)__ptr);\n    *pcVar6 = 'd';\n    __dest = (char *)malloc((long)(0x41 - (iVar5 + -1)));\n    if (__dest == (char *)0x0) {\n      free(__ptr);\n    }\n    else {\n      strcpy(__dest,pcVar6);\n      uVar3 = 0xffffffffffffffff;\n      pcVar6 = __dest;\n      do {\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + (ulong)bVar7 * -2 + 1;\n      } while (cVar1 != '\\0');\n      *(undefined2 *)(__dest + (~uVar3 - 1)) = 0x6264;\n      *(undefined *)((long)(__dest + (~uVar3 - 1)) + 2) = 0;\n      free(__ptr);\n    }\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 79,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(int param_1)\n\n{\n  void *__ptr;\n  long lVar1;\n  char *__dest;\n  undefined2 *puVar2;\n  int iVar3;\n  size_t __size;\n  long lVar4;\n  \n  __ptr = malloc(0x40);\n  if (__ptr == (void *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    *(undefined *)((long)__ptr + 0x3f) = 0;\n    if (param_1 == 0) {\n      *(undefined *)((long)__ptr + 0x3e) = 0x30;\n      __size = 5;\n      lVar4 = 0x3c;\n      lVar1 = 0x3d;\n    }\n    else {\n      lVar1 = 0x3d;\n      if (param_1 < 1) {\n        __size = 4;\n        lVar4 = 0x3d;\n        lVar1 = 0x3e;\n      }\n      else {\n        do {\n          lVar4 = lVar1;\n          *(byte *)((long)__ptr + lVar4 + 1) = ((byte)param_1 & 1) + 0x30;\n          param_1 = param_1 >> 1;\n          lVar1 = lVar4 + -1;\n        } while (param_1 != 0);\n        lVar1 = (long)(int)lVar4;\n        iVar3 = (int)lVar4 + -1;\n        lVar4 = (long)iVar3;\n        __size = (size_t)(0x41 - iVar3);\n      }\n    }\n    *(undefined *)((long)__ptr + lVar1) = 0x62;\n    *(char *)(lVar4 + (long)__ptr) = 'd';\n    __dest = (char *)malloc(__size);\n    if (__dest != (char *)0x0) {\n      puVar2 = (undefined2 *)stpcpy(__dest,(char *)(lVar4 + (long)__ptr));\n      *puVar2 = 0x6264;\n      *(undefined *)(puVar2 + 1) = 0;\n    }\n    free(__ptr);\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 79,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(int param_1)\n\n{\n  void *__ptr;\n  long lVar1;\n  char *__dest;\n  undefined2 *puVar2;\n  int iVar3;\n  size_t __size;\n  long lVar4;\n  \n  __ptr = malloc(0x40);\n  if (__ptr == (void *)0x0) {\n    __dest = (char *)0x0;\n  }\n  else {\n    *(undefined *)((long)__ptr + 0x3f) = 0;\n    if (param_1 == 0) {\n      *(undefined *)((long)__ptr + 0x3e) = 0x30;\n      __size = 5;\n      lVar4 = 0x3c;\n      lVar1 = 0x3d;\n    }\n    else {\n      lVar1 = 0x3d;\n      if (param_1 < 1) {\n        __size = 4;\n        lVar4 = 0x3d;\n        lVar1 = 0x3e;\n      }\n      else {\n        do {\n          lVar4 = lVar1;\n          *(byte *)((long)__ptr + lVar4 + 1) = ((byte)param_1 & 1) + 0x30;\n          param_1 = param_1 >> 1;\n          lVar1 = lVar4 + -1;\n        } while (param_1 != 0);\n        lVar1 = (long)(int)lVar4;\n        iVar3 = (int)lVar4 + -1;\n        lVar4 = (long)iVar3;\n        __size = (size_t)(0x41 - iVar3);\n      }\n    }\n    *(undefined *)((long)__ptr + lVar1) = 0x62;\n    *(char *)(lVar4 + (long)__ptr) = 'd';\n    __dest = (char *)malloc(__size);\n    if (__dest != (char *)0x0) {\n      puVar2 = (undefined2 *)stpcpy(__dest,(char *)(lVar4 + (long)__ptr));\n      *puVar2 = 0x6264;\n      *(undefined *)(puVar2 + 1) = 0;\n    }\n    free(__ptr);\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 80,
        "type": "O0",
        "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  undefined8 uVar2;\n  int local_1c;\n  \n  sVar1 = strlen(param_1);\n  if (sVar1 < 3) {\n    uVar2 = 0;\n  }\n  else {\n    for (local_1c = 2; sVar1 = strlen(param_1), (ulong)(long)local_1c < sVar1;\n        local_1c = local_1c + 1) {\n      if ((param_1[local_1c] == param_1[(long)local_1c + -1]) ||\n         (param_1[local_1c] == param_1[(long)local_1c + -2])) {\n        return 0;\n      }\n    }\n    uVar2 = 1;\n  }\n  return uVar2;\n}"
    },
    {
        "task_id": 80,
        "type": "O1",
        "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char cVar1;\n  ulong uVar2;\n  char *pcVar3;\n  \n  uVar2 = 0xffffffffffffffff;\n  pcVar3 = param_1;\n  do {\n    if (uVar2 == 0) break;\n    uVar2 = uVar2 - 1;\n    cVar1 = *pcVar3;\n    pcVar3 = pcVar3 + 1;\n  } while (cVar1 != '\\0');\n  if (2 < ~uVar2 - 1) {\n    pcVar3 = param_1 + (~uVar2 - 3);\n    while( true ) {\n      if (param_1[2] == param_1[1]) {\n        return 0;\n      }\n      if (param_1[2] == *param_1) break;\n      param_1 = param_1 + 1;\n      if (param_1 == pcVar3) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 80,
        "type": "O2",
        "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  \n  sVar2 = strlen(param_1);\n  if (2 < sVar2) {\n    pcVar1 = param_1 + (sVar2 - 2);\n    while ((param_1[2] != param_1[1] && (param_1[2] != *param_1))) {\n      param_1 = param_1 + 1;\n      if (param_1 == pcVar1) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 80,
        "type": "O3",
        "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  \n  sVar2 = strlen(param_1);\n  if (2 < sVar2) {\n    pcVar1 = param_1 + (sVar2 - 2);\n    while ((param_1[2] != param_1[1] && (param_1[2] != *param_1))) {\n      param_1 = param_1 + 1;\n      if (param_1 == pcVar1) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 81,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2)\n\n{\n  void *pvVar1;\n  int local_14;\n  \n  pvVar1 = malloc((long)param_2 << 3);\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    if ((double)*(float *)(param_1 + (long)local_14 * 4) < _DAT_00102100) {\n      if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102108) {\n        if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102110) {\n          if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102118) {\n            if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102120) {\n              if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102128) {\n                if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102130) {\n                  if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102138) {\n                    if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102140) {\n                      if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102148) {\n                        if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102150) {\n                          if ((double)*(float *)(param_1 + (long)local_14 * 4) <= _DAT_00102158) {\n                            *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102028;\n                          }\n                          else {\n                            *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102025;\n                          }\n                        }\n                        else {\n                          *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102023;\n                        }\n                      }\n                      else {\n                        *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102020;\n                      }\n                    }\n                    else {\n                      *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_0010201d;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_0010201b;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102018;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102015;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102013;\n            }\n          }\n          else {\n            *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102010;\n          }\n        }\n        else {\n          *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_0010200d;\n        }\n      }\n      else {\n        *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_0010200b;\n      }\n    }\n    else {\n      *(undefined **)((long)pvVar1 + (long)local_14 * 8) = &DAT_00102008;\n    }\n  }\n  return pvVar1;\n}"
    },
    {
        "task_id": 81,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  double dVar1;\n  double dVar2;\n  double dVar3;\n  void *pvVar4;\n  undefined *puVar5;\n  ulong uVar6;\n  bool bVar7;\n  double dVar8;\n  \n  pvVar4 = malloc((long)param_2 << 3);\n  dVar3 = DAT_00102110;\n  dVar2 = DAT_00102108;\n  dVar1 = DAT_00102100;\n  if (0 < param_2) {\n    uVar6 = 0;\n    do {\n      dVar8 = (double)*(float *)(param_1 + uVar6 * 4);\n      if (dVar8 < dVar1) {\n        if (dVar8 <= dVar2) {\n          if (dVar8 <= dVar3) {\n            if (dVar8 == _DAT_00102118) {\n              if (dVar8 <= _DAT_00102120) {\n                if (dVar8 <= _DAT_00102128) {\n                  if (dVar8 <= _DAT_00102130) {\n                    if (dVar8 <= _DAT_00102138) {\n                      if (dVar8 <= _DAT_00102140) {\n                        if (dVar8 <= _DAT_00102148) {\n                          if (dVar8 <= _DAT_00102150) {\n                            puVar5 = &DAT_00102021;\n                            if (dVar8 <= DAT_00102158) {\n                              puVar5 = &DAT_00102024;\n                            }\n                            *(undefined **)((long)pvVar4 + uVar6 * 8) = puVar5;\n                          }\n                          else {\n                            *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_0010201f;\n                          }\n                        }\n                        else {\n                          *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_0010201c;\n                        }\n                      }\n                      else {\n                        *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102019;\n                      }\n                    }\n                    else {\n                      *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102017;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102014;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102011;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_0010200f;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_0010200c;\n            }\n          }\n          else {\n            *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102009;\n          }\n        }\n        else {\n          *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102007;\n        }\n      }\n      else {\n        *(undefined **)((long)pvVar4 + uVar6 * 8) = &DAT_00102004;\n      }\n      bVar7 = uVar6 != param_2 - 1;\n      uVar6 = uVar6 + 1;\n    } while (bVar7);\n  }\n  return;\n}"
    },
    {
        "task_id": 81,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  double dVar1;\n  double dVar2;\n  double dVar3;\n  void *pvVar4;\n  ulong uVar5;\n  undefined *puVar6;\n  double dVar7;\n  \n  pvVar4 = malloc((long)param_2 << 3);\n  dVar3 = DAT_00102110;\n  dVar2 = DAT_00102108;\n  dVar1 = DAT_00102100;\n  if (0 < param_2) {\n    uVar5 = 0;\n    while( true ) {\n      dVar7 = (double)*(float *)(param_1 + uVar5 * 4);\n      if (dVar1 <= dVar7) {\n        *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102004;\n      }\n      else if (dVar7 <= dVar2) {\n        if (dVar7 <= dVar3) {\n          if (dVar7 <= _DAT_00102118) {\n            if (dVar7 <= _DAT_00102120) {\n              if (_DAT_00102128 < dVar7) {\n                *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102011;\n              }\n              else if (dVar7 <= _DAT_00102130) {\n                if (_DAT_00102138 < dVar7) {\n                  *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102017;\n                }\n                else if (dVar7 <= _DAT_00102140) {\n                  if (dVar7 <= _DAT_00102148) {\n                    if (dVar7 <= _DAT_00102150) {\n                      puVar6 = &DAT_00102021;\n                      if (dVar7 <= DAT_00102158) {\n                        puVar6 = &DAT_00102024;\n                      }\n                      *(undefined **)((long)pvVar4 + uVar5 * 8) = puVar6;\n                    }\n                    else {\n                      *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010201f;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010201c;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102019;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102014;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010200f;\n            }\n          }\n          else {\n            *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010200c;\n          }\n        }\n        else {\n          *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102009;\n        }\n      }\n      else {\n        *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102007;\n      }\n      if (param_2 - 1 == uVar5) break;\n      uVar5 = uVar5 + 1;\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 81,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  double dVar1;\n  double dVar2;\n  double dVar3;\n  void *pvVar4;\n  ulong uVar5;\n  undefined *puVar6;\n  double dVar7;\n  \n  pvVar4 = malloc((long)param_2 << 3);\n  dVar3 = DAT_00102110;\n  dVar2 = DAT_00102108;\n  dVar1 = DAT_00102100;\n  if (0 < param_2) {\n    uVar5 = 0;\n    while( true ) {\n      dVar7 = (double)*(float *)(param_1 + uVar5 * 4);\n      if (dVar1 <= dVar7) {\n        *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102004;\n      }\n      else if (dVar7 <= dVar2) {\n        if (dVar7 <= dVar3) {\n          if (dVar7 <= _DAT_00102118) {\n            if (dVar7 <= _DAT_00102120) {\n              if (_DAT_00102128 < dVar7) {\n                *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102011;\n              }\n              else if (dVar7 <= _DAT_00102130) {\n                if (_DAT_00102138 < dVar7) {\n                  *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102017;\n                }\n                else if (dVar7 <= _DAT_00102140) {\n                  if (dVar7 <= _DAT_00102148) {\n                    if (dVar7 <= _DAT_00102150) {\n                      puVar6 = &DAT_00102021;\n                      if (dVar7 <= DAT_00102158) {\n                        puVar6 = &DAT_00102024;\n                      }\n                      *(undefined **)((long)pvVar4 + uVar5 * 8) = puVar6;\n                    }\n                    else {\n                      *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010201f;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010201c;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102019;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102014;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010200f;\n            }\n          }\n          else {\n            *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_0010200c;\n          }\n        }\n        else {\n          *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102009;\n        }\n      }\n      else {\n        *(undefined **)((long)pvVar4 + uVar5 * 8) = &DAT_00102007;\n      }\n      if (param_2 - 1 == uVar5) break;\n      uVar5 = uVar5 + 1;\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 82,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  undefined8 uVar3;\n  int local_10;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (iVar1 < 2) {\n    uVar3 = 0;\n  }\n  else {\n    for (local_10 = 2; local_10 * local_10 <= iVar1; local_10 = local_10 + 1) {\n      if (iVar1 % local_10 == 0) {\n        return 0;\n      }\n    }\n    uVar3 = 1;\n  }\n  return uVar3;\n}"
    },
    {
        "task_id": 82,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  ulong uVar4;\n  \n  uVar4 = 0xffffffffffffffff;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *param_1;\n    param_1 = param_1 + 1;\n  } while (cVar1 != '\\0');\n  uVar4 = ~uVar4 - 1;\n  iVar2 = (int)uVar4;\n  if (1 < iVar2) {\n    if (iVar2 < 4) {\n      return 1;\n    }\n    if ((uVar4 & 1) == 0) {\n      return 0;\n    }\n    iVar3 = 2;\n    do {\n      iVar3 = iVar3 + 1;\n      if (iVar2 < iVar3 * iVar3) {\n        return 1;\n      }\n    } while ((int)((long)((ulong)(uint)(iVar2 >> 0x1f) << 0x20 | uVar4 & 0xffffffff) % (long)iVar3)\n             != 0);\n  }\n  return 0;\n}"
    },
    {
        "task_id": 82,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  int iVar3;\n  undefined8 uVar4;\n  \n  sVar2 = strlen(param_1);\n  uVar4 = 0;\n  iVar1 = (int)sVar2;\n  if (1 < iVar1) {\n    if (3 < iVar1) {\n      if ((sVar2 & 1) == 0) {\n        return 0;\n      }\n      iVar3 = 2;\n      while (iVar3 = iVar3 + 1, iVar3 * iVar3 <= iVar1) {\n        if ((int)((long)((ulong)(uint)(iVar1 >> 0x1f) << 0x20 | sVar2 & 0xffffffff) % (long)iVar3)\n            == 0) {\n          return 0;\n        }\n      }\n    }\n    uVar4 = 1;\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 82,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  int iVar3;\n  undefined8 uVar4;\n  \n  sVar2 = strlen(param_1);\n  uVar4 = 0;\n  iVar1 = (int)sVar2;\n  if (1 < iVar1) {\n    if (3 < iVar1) {\n      if ((sVar2 & 1) == 0) {\n        return 0;\n      }\n      iVar3 = 2;\n      while (iVar3 = iVar3 + 1, iVar3 * iVar3 <= iVar1) {\n        if ((int)((long)((ulong)(uint)(iVar1 >> 0x1f) << 0x20 | sVar2 & 0xffffffff) % (long)iVar3)\n            == 0) {\n          return 0;\n        }\n      }\n    }\n    uVar4 = 1;\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 83,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int local_10;\n  int local_c;\n  \n  if (param_1 < 1) {\n    local_10 = 0;\n  }\n  else if (param_1 == 1) {\n    local_10 = 1;\n  }\n  else {\n    local_10 = 0x12;\n    for (local_c = 2; local_c < param_1; local_c = local_c + 1) {\n      local_10 = local_10 * 10;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 83,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  iVar1 = 0;\n  if ((0 < param_1) && (iVar1 = param_1, param_1 != 1)) {\n    if (2 < param_1) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      do {\n        iVar1 = iVar1 * 10;\n        iVar2 = iVar2 + 1;\n      } while (param_1 != iVar2);\n      return iVar1;\n    }\n    iVar1 = 0x12;\n  }\n  return iVar1;\n}"
    },
    {
        "task_id": 83,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  iVar1 = 0;\n  if ((0 < param_1) && (iVar1 = 1, param_1 != 1)) {\n    if (param_1 != 2) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      do {\n        iVar2 = iVar2 + 1;\n        iVar1 = iVar1 * 10;\n      } while (param_1 != iVar2);\n      return iVar1;\n    }\n    iVar1 = 0x12;\n  }\n  return iVar1;\n}"
    },
    {
        "task_id": 83,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  iVar1 = 0;\n  if ((0 < param_1) && (iVar1 = 1, param_1 != 1)) {\n    if (param_1 != 2) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      do {\n        iVar2 = iVar2 + 1;\n        iVar1 = iVar1 * 10;\n      } while (param_1 != iVar2);\n      return iVar1;\n    }\n    iVar1 = 0x12;\n  }\n  return iVar1;\n}"
    },
    {
        "task_id": 84,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(uint param_1)\n\n{\n  undefined uVar1;\n  char cVar2;\n  undefined *puVar3;\n  long in_FS_OFFSET;\n  int local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  char local_16 [6];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sprintf(local_16,\"%d\",(ulong)param_1);\n  local_30 = 0;\n  for (local_2c = 0; local_16[local_2c] != '\\0'; local_2c = local_2c + 1) {\n    local_30 = local_30 + local_16[local_2c] + -0x30;\n  }\n  puVar3 = (undefined *)malloc(0x21);\n  local_28 = 0;\n  if (local_30 == 0) {\n    local_28 = 1;\n    *puVar3 = 0x30;\n  }\n  else {\n    for (; 0 < local_30; local_30 = local_30 / 2) {\n      cVar2 = (char)(local_30 >> 0x1f);\n      puVar3[local_28] = ((char)local_30 - cVar2 & 1U) + cVar2 + '0';\n      local_28 = local_28 + 1;\n    }\n  }\n  puVar3[local_28] = 0;\n  for (local_24 = 0; local_24 < local_28 / 2; local_24 = local_24 + 1) {\n    uVar1 = puVar3[local_24];\n    puVar3[local_24] = puVar3[(long)(local_28 - local_24) + -1];\n    puVar3[(long)(local_28 - local_24) + -1] = uVar1;\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return puVar3;\n}"
    },
    {
        "task_id": 84,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 param_1)\n\n{\n  undefined uVar1;\n  bool bVar2;\n  char cVar3;\n  ulong uVar4;\n  undefined *puVar5;\n  ulong uVar6;\n  undefined *puVar7;\n  int iVar8;\n  char *pcVar9;\n  long lVar10;\n  int iVar11;\n  long in_FS_OFFSET;\n  char local_16;\n  char local_15 [5];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  __sprintf_chk(&local_16,1,6,&DAT_00102004,param_1);\n  if (local_16 == '\\0') {\n    puVar5 = (undefined *)malloc(0x21);\nLAB_001012d3:\n    *puVar5 = 0x30;\n    iVar8 = 1;\n  }\n  else {\n    pcVar9 = &local_16;\n    iVar11 = 0;\n    do {\n      iVar11 = iVar11 + -0x30 + (int)local_16;\n      pcVar9 = pcVar9 + 1;\n      local_16 = *pcVar9;\n    } while (local_16 != '\\0');\n    puVar5 = (undefined *)malloc(0x21);\n    if (iVar11 == 0) goto LAB_001012d3;\n    iVar8 = 0;\n    uVar4 = 1;\n    if (0 < iVar11) {\n      do {\n        uVar6 = uVar4;\n        cVar3 = (char)(iVar11 >> 0x1f);\n        puVar5[uVar6 - 1] = ((char)iVar11 - cVar3 & 1U) + cVar3 + '0';\n        bVar2 = 1 < iVar11;\n        uVar4 = uVar6 + 1;\n        iVar11 = iVar11 / 2;\n      } while (bVar2);\n      iVar11 = (int)uVar6;\n      puVar5[iVar11] = 0;\n      if (1 < iVar11) {\n        puVar7 = puVar5 + (long)iVar11 + -1;\n        lVar10 = 0;\n        do {\n          uVar1 = puVar5[lVar10];\n          puVar5[lVar10] = *puVar7;\n          *puVar7 = uVar1;\n          lVar10 = lVar10 + 1;\n          puVar7 = puVar7 + -1;\n        } while ((int)lVar10 < (int)(((uint)(uVar6 >> 0x1f) & 1) + iVar11) >> 1);\n      }\n      goto LAB_001012b3;\n    }\n  }\n  puVar5[iVar8] = 0;\nLAB_001012b3:\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 84,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 param_1)\n\n{\n  undefined uVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  char *pcVar4;\n  long lVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  int iVar8;\n  long lVar9;\n  long in_FS_OFFSET;\n  char local_16;\n  char local_15 [5];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  pcVar4 = &local_16;\n  __sprintf_chk(pcVar4,1,6,&DAT_00102004,param_1);\n  if (local_16 == '\\0') {\n    puVar2 = (undefined *)malloc(0x21);\nLAB_0010145a:\n    *puVar2 = 0x30;\n    puVar2 = puVar2 + 1;\n  }\n  else {\n    iVar8 = 0;\n    do {\n      pcVar4 = pcVar4 + 1;\n      iVar8 = iVar8 + -0x30 + (int)local_16;\n      local_16 = *pcVar4;\n    } while (local_16 != '\\0');\n    puVar2 = (undefined *)malloc(0x21);\n    if (iVar8 == 0) goto LAB_0010145a;\n    lVar9 = 1;\n    if (0 < iVar8) {\n      do {\n        lVar5 = lVar9;\n        puVar2[lVar5 + -1] = ((byte)iVar8 & 1) + 0x30;\n        iVar8 = iVar8 >> 1;\n        lVar9 = lVar5 + 1;\n      } while (iVar8 != 0);\n      lVar9 = (long)(int)lVar5;\n      iVar8 = (int)lVar5 >> 1;\n      puVar2[lVar9] = 0;\n      if (iVar8 != 0) {\n        puVar3 = puVar2;\n        puVar6 = puVar2 + lVar9 + -1;\n        do {\n          uVar1 = *puVar3;\n          puVar7 = puVar6 + -1;\n          *puVar3 = *puVar6;\n          *puVar6 = uVar1;\n          puVar3 = puVar3 + 1;\n          puVar6 = puVar7;\n        } while (puVar2 + ((lVar9 + -2) - (ulong)(iVar8 - 1)) != puVar7);\n      }\n      goto LAB_00101433;\n    }\n  }\n  *puVar2 = 0;\nLAB_00101433:\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 84,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined4 param_1)\n\n{\n  undefined uVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  long lVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  int iVar7;\n  long lVar8;\n  long in_FS_OFFSET;\n  char local_16;\n  char local_15;\n  char local_14;\n  char local_13;\n  char local_12;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  __sprintf_chk(&local_16,1,6,&DAT_00102004,param_1);\n  if (local_16 == '\\0') {\n    puVar2 = (undefined *)malloc(0x21);\nLAB_0010147a:\n    *puVar2 = 0x30;\n    puVar2 = puVar2 + 1;\n  }\n  else {\n    iVar7 = local_16 + -0x30;\n    if (local_15 != '\\0') {\n      iVar7 = local_16 + -0x60 + (int)local_15;\n      if (local_14 != '\\0') {\n        iVar7 = iVar7 + -0x30 + (int)local_14;\n        if (local_13 != '\\0') {\n          iVar7 = iVar7 + -0x30 + (int)local_13;\n          if (local_12 != '\\0') {\n            iVar7 = iVar7 + -0x30 + (int)local_12;\n          }\n        }\n      }\n    }\n    puVar2 = (undefined *)malloc(0x21);\n    if (iVar7 == 0) goto LAB_0010147a;\n    lVar8 = 1;\n    if (0 < iVar7) {\n      do {\n        lVar4 = lVar8;\n        puVar2[lVar4 + -1] = ((byte)iVar7 & 1) + 0x30;\n        iVar7 = iVar7 >> 1;\n        lVar8 = lVar4 + 1;\n      } while (iVar7 != 0);\n      lVar8 = (long)(int)lVar4;\n      iVar7 = (int)lVar4 >> 1;\n      puVar2[lVar8] = 0;\n      if (iVar7 != 0) {\n        puVar3 = puVar2;\n        puVar5 = puVar2 + lVar8 + -1;\n        do {\n          uVar1 = *puVar3;\n          puVar6 = puVar5 + -1;\n          *puVar3 = *puVar5;\n          *puVar5 = uVar1;\n          puVar3 = puVar3 + 1;\n          puVar5 = puVar6;\n        } while (puVar6 != puVar2 + ((lVar8 + -2) - (ulong)(iVar7 - 1)));\n      }\n      goto LAB_00101453;\n    }\n  }\n  *puVar2 = 0;\nLAB_00101453:\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 85,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; local_c * 2 + 1 < param_2; local_c = local_c + 1) {\n    if ((*(uint *)(param_1 + ((long)(local_c * 2) + 1) * 4) & 1) == 0) {\n      local_10 = local_10 + *(int *)(param_1 + ((long)(local_c * 2) + 1) * 4);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 85,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  \n  if (param_2 < 2) {\n    iVar2 = 0;\n  }\n  else {\n    puVar1 = (uint *)(param_1 + 4);\n    iVar2 = 0;\n    do {\n      if ((*puVar1 & 1) == 0) {\n        iVar2 = iVar2 + *puVar1;\n      }\n      puVar1 = puVar1 + 2;\n    } while (puVar1 != (uint *)(param_1 + 0xc + (ulong)(param_2 - 2U >> 1) * 8));\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 85,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  \n  if (1 < param_2) {\n    puVar1 = (uint *)(param_1 + 4);\n    iVar2 = 0;\n    do {\n      if ((*puVar1 & 1) == 0) {\n        iVar2 = iVar2 + *puVar1;\n      }\n      puVar1 = puVar1 + 2;\n    } while (puVar1 != (uint *)(param_1 + 0xc + (ulong)(param_2 - 2U >> 1) * 8));\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 85,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint *puVar4;\n  long lVar5;\n  int iVar6;\n  uint uVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  \n  if (param_2 < 2) {\n    iVar8 = 0;\n  }\n  else {\n    uVar7 = param_2 - 2;\n    if (uVar7 < 8) {\n      iVar6 = 0;\n      iVar8 = 0;\n      uVar7 = 0;\n    }\n    else {\n      iVar8 = 0;\n      iVar9 = 0;\n      iVar10 = 0;\n      iVar11 = 0;\n      lVar5 = param_1;\n      do {\n        puVar1 = (uint *)(lVar5 + 4);\n        puVar3 = (uint *)(lVar5 + 0xc);\n        puVar2 = (uint *)(lVar5 + 0x14);\n        puVar4 = (uint *)(lVar5 + 0x1c);\n        lVar5 = lVar5 + 0x20;\n        iVar8 = iVar8 + (-(uint)((*puVar1 & _DAT_00102010) == 0) & *puVar1);\n        iVar9 = iVar9 + (-(uint)((*puVar3 & _UNK_00102014) == 0) & *puVar3);\n        iVar10 = iVar10 + (-(uint)((*puVar2 & _UNK_00102018) == 0) & *puVar2);\n        iVar11 = iVar11 + (-(uint)((*puVar4 & _UNK_0010201c) == 0) & *puVar4);\n      } while (lVar5 != (ulong)(uVar7 >> 3) * 0x20 + param_1);\n      iVar6 = (uVar7 >> 3) * 4;\n      uVar7 = uVar7 & 0xfffffff8;\n      iVar8 = iVar8 + iVar10 + iVar9 + iVar11;\n    }\n    uVar7 = *(uint *)(param_1 + 4 + (long)(int)uVar7 * 4);\n    iVar6 = iVar6 * 2;\n    if ((uVar7 & 1) == 0) {\n      iVar8 = iVar8 + uVar7;\n    }\n    if (iVar6 + 3 < param_2) {\n      uVar7 = *(uint *)(param_1 + 4 + (long)(iVar6 + 2) * 4);\n      if ((uVar7 & 1) == 0) {\n        iVar8 = iVar8 + uVar7;\n      }\n      if (iVar6 + 5 < param_2) {\n        uVar7 = *(uint *)(param_1 + 4 + (long)(iVar6 + 4) * 4);\n        if ((uVar7 & 1) == 0) {\n          iVar8 = iVar8 + uVar7;\n        }\n        if (iVar6 + 7 < param_2) {\n          uVar7 = *(uint *)(param_1 + 4 + (long)(iVar6 + 6) * 4);\n          if ((uVar7 & 1) == 0) {\n            iVar8 = iVar8 + uVar7;\n          }\n          return iVar8;\n        }\n      }\n    }\n  }\n  return iVar8;\n}"
    },
    {
        "task_id": 86,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1)\n\n{\n  char cVar1;\n  size_t sVar2;\n  void *pvVar3;\n  long in_FS_OFFSET;\n  int local_6c;\n  int local_68;\n  int local_64;\n  int local_60;\n  int local_5c;\n  int local_58;\n  char acStack_48 [56];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar2 = strlen(param_1);\n  pvVar3 = malloc((long)((int)sVar2 + 2));\n  local_6c = 0;\n  local_68 = 0;\n  for (local_64 = 0; local_64 <= (int)sVar2; local_64 = local_64 + 1) {\n    if ((param_1[local_64] == ' ') || (param_1[local_64] == '\\0')) {\n      for (local_60 = 0; local_5c = local_60, local_60 < local_68 + -1; local_60 = local_60 + 1) {\n        while (local_5c = local_5c + 1, local_5c < local_68) {\n          if (acStack_48[local_5c] < acStack_48[local_60]) {\n            cVar1 = acStack_48[local_60];\n            acStack_48[local_60] = acStack_48[local_5c];\n            acStack_48[local_5c] = cVar1;\n          }\n        }\n      }\n      if (0 < local_6c) {\n        *(undefined *)((long)pvVar3 + (long)local_6c) = 0x20;\n        local_6c = local_6c + 1;\n      }\n      for (local_58 = 0; local_58 < local_68; local_58 = local_58 + 1) {\n        *(char *)((long)local_6c + (long)pvVar3) = acStack_48[local_58];\n        local_6c = local_6c + 1;\n      }\n      local_68 = 0;\n    }\n    else {\n      acStack_48[local_68] = param_1[local_64];\n      local_68 = local_68 + 1;\n    }\n  }\n  *(undefined *)((long)pvVar3 + (long)local_6c) = 0;\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return pvVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 86,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1)\n\n{\n  ulong uVar1;\n  byte bVar2;\n  char cVar3;\n  void *pvVar4;\n  char *pcVar5;\n  long lVar6;\n  ulong uVar7;\n  long lVar8;\n  int iVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  int iVar12;\n  int iVar13;\n  long in_FS_OFFSET;\n  byte local_78 [56];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  uVar7 = 0xffffffffffffffff;\n  pbVar11 = param_1;\n  do {\n    if (uVar7 == 0) break;\n    uVar7 = uVar7 - 1;\n    bVar2 = *pbVar11;\n    pbVar11 = pbVar11 + 1;\n  } while (bVar2 != 0);\n  uVar1 = ~uVar7 - 1;\n  pvVar4 = malloc((long)((int)~uVar7 + 1));\n  if ((int)uVar1 < 0) {\n    iVar9 = 0;\n  }\n  else {\n    pbVar11 = param_1 + (uVar1 & 0xffffffff) + 1;\n    iVar13 = 0;\n    iVar9 = 0;\n    do {\n      if ((*param_1 & 0xdf) == 0) {\n        if (1 < iVar13) {\n          iVar12 = 0;\n          pbVar10 = local_78;\n          do {\n            iVar12 = iVar12 + 1;\n            if (iVar12 < iVar13) {\n              pcVar5 = (char *)pbVar10;\n              do {\n                cVar3 = *pbVar10;\n                if (pcVar5[1] < cVar3) {\n                  *pbVar10 = pcVar5[1];\n                  pcVar5[1] = cVar3;\n                }\n                pcVar5 = pcVar5 + 1;\n              } while (pcVar5 != (char *)pbVar10 + (ulong)(uint)((iVar13 + -1) - iVar12) + 1);\n            }\n            pbVar10 = (byte *)((char *)pbVar10 + 1);\n          } while (iVar12 != iVar13 + -1);\n        }\n        if (0 < iVar9) {\n          *(undefined *)((long)pvVar4 + (long)iVar9) = 0x20;\n          iVar9 = iVar9 + 1;\n        }\n        iVar12 = 0;\n        if (0 < iVar13) {\n          lVar8 = (long)iVar9;\n          lVar6 = lVar8;\n          do {\n            *(byte *)((long)pvVar4 + lVar6) = local_78[lVar6 - lVar8];\n            lVar6 = lVar6 + 1;\n          } while (lVar8 + 1 + (ulong)(iVar13 - 1) != lVar6);\n          iVar9 = iVar9 + iVar13;\n          iVar12 = 0;\n        }\n      }\n      else {\n        local_78[iVar13] = *param_1;\n        iVar12 = iVar13 + 1;\n      }\n      iVar13 = iVar12;\n      param_1 = param_1 + 1;\n    } while (param_1 != pbVar11);\n  }\n  *(undefined *)((long)pvVar4 + (long)iVar9) = 0;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return pvVar4;\n}"
    },
    {
        "task_id": 86,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(byte *param_1)\n\n{\n  byte *pbVar1;\n  char cVar2;\n  size_t sVar3;\n  undefined *puVar4;\n  char *pcVar5;\n  long lVar6;\n  long lVar7;\n  undefined *puVar8;\n  byte *pbVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  long in_FS_OFFSET;\n  byte local_68 [56];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen((char *)param_1);\n  puVar4 = (undefined *)malloc((long)((int)sVar3 + 2));\n  puVar8 = puVar4;\n  if (-1 < (int)sVar3) {\n    iVar10 = 0;\n    iVar11 = 0;\n    pbVar1 = param_1 + (sVar3 & 0xffffffff) + 1;\nLAB_00101487:\n    do {\n      if ((*param_1 & 0xdf) == 0) {\n        iVar12 = 0;\n        pbVar9 = local_68;\n        if (1 < iVar10) {\n          do {\n            iVar12 = iVar12 + 1;\n            if (iVar12 < iVar10) {\n              pcVar5 = (char *)pbVar9;\n              do {\n                cVar2 = *pbVar9;\n                if (pcVar5[1] < cVar2) {\n                  *pbVar9 = pcVar5[1];\n                  pcVar5[1] = cVar2;\n                }\n                pcVar5 = pcVar5 + 1;\n              } while (pcVar5 != (char *)pbVar9 + 1 + (uint)((iVar10 + -1) - iVar12));\n            }\n            pbVar9 = (byte *)((char *)pbVar9 + 1);\n          } while (iVar12 != iVar10 + -1);\n        }\n        if (iVar11 != 0) {\n          lVar6 = (long)iVar11;\n          iVar11 = iVar11 + 1;\n          puVar4[lVar6] = 0x20;\n        }\n        if (iVar10 != 0) {\n          lVar7 = (long)iVar11;\n          lVar6 = lVar7;\n          do {\n            puVar4[lVar6] = local_68[lVar6 - lVar7];\n            lVar6 = lVar6 + 1;\n          } while (lVar7 + 1 + (ulong)(iVar10 - 1) != lVar6);\n          param_1 = param_1 + 1;\n          iVar11 = iVar11 + iVar10;\n          iVar10 = 0;\n          if (param_1 == pbVar1) break;\n          goto LAB_00101487;\n        }\n      }\n      else {\n        lVar6 = (long)iVar10;\n        iVar10 = iVar10 + 1;\n        local_68[lVar6] = *param_1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pbVar1);\n    puVar8 = puVar4 + iVar11;\n  }\n  *puVar8 = 0;\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return puVar4;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 86,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(byte *param_1)\n\n{\n  int iVar1;\n  uint uVar2;\n  byte *pbVar3;\n  char cVar4;\n  size_t sVar5;\n  undefined *puVar6;\n  char *pcVar7;\n  long lVar8;\n  undefined *puVar9;\n  int iVar10;\n  byte *pbVar11;\n  int iVar12;\n  int iVar13;\n  long in_FS_OFFSET;\n  byte local_78 [56];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar5 = strlen((char *)param_1);\n  puVar6 = (undefined *)malloc((long)((int)sVar5 + 2));\n  puVar9 = puVar6;\n  if (-1 < (int)sVar5) {\n    iVar13 = 0;\n    pbVar3 = param_1 + (sVar5 & 0xffffffff) + 1;\n    iVar10 = 0;\n    do {\n      while ((*param_1 & 0xdf) != 0) {\n        lVar8 = (long)iVar10;\n        iVar10 = iVar10 + 1;\n        local_78[lVar8] = *param_1;\nLAB_00101491:\n        param_1 = param_1 + 1;\n        if (param_1 == pbVar3) goto LAB_00101535;\n      }\n      iVar1 = iVar10 + -1;\n      iVar12 = 0;\n      pbVar11 = local_78;\n      if (1 < iVar10) {\n        do {\n          while (iVar12 = iVar12 + 1, iVar12 < iVar10) {\n            pcVar7 = (char *)pbVar11;\n            do {\n              cVar4 = *pbVar11;\n              if (pcVar7[1] < cVar4) {\n                *pbVar11 = pcVar7[1];\n                pcVar7[1] = cVar4;\n              }\n              pcVar7 = pcVar7 + 1;\n            } while ((char *)pbVar11 + 1 + (uint)(iVar1 - iVar12) != pcVar7);\n            pbVar11 = (byte *)((char *)pbVar11 + 1);\n            if (iVar1 == iVar12) goto LAB_001014f9;\n          }\n          pbVar11 = (byte *)((char *)pbVar11 + 1);\n        } while (iVar1 != iVar12);\n      }\nLAB_001014f9:\n      if (iVar13 != 0) {\n        lVar8 = (long)iVar13;\n        iVar13 = iVar13 + 1;\n        puVar6[lVar8] = 0x20;\n      }\n      if (iVar10 == 0) goto LAB_00101491;\n      lVar8 = (long)iVar13;\n      uVar2 = iVar10 - 1;\n      param_1 = param_1 + 1;\n      iVar13 = iVar13 + iVar10;\n      iVar10 = 0;\n      memcpy(puVar6 + lVar8,local_78,(ulong)uVar2 + 1);\n    } while (param_1 != pbVar3);\nLAB_00101535:\n    puVar9 = puVar6 + iVar13;\n  }\n  *puVar9 = 0;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return puVar6;\n}"
    },
    {
        "task_id": 87,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,long param_3,int param_4,int *param_5)\n\n{\n  void *pvVar1;\n  void *pvVar2;\n  int local_2c;\n  int local_28;\n  int local_24;\n  \n  pvVar1 = malloc(800);\n  local_2c = 0;\n  for (local_28 = 0; local_28 < param_2; local_28 = local_28 + 1) {\n    local_24 = *(int *)(param_3 + (long)local_28 * 4);\n    while (local_24 = local_24 + -1, -1 < local_24) {\n      if (param_4 == *(int *)(*(long *)(param_1 + (long)local_28 * 8) + (long)local_24 * 4)) {\n        pvVar2 = malloc(8);\n        *(void **)((long)local_2c * 8 + (long)pvVar1) = pvVar2;\n        **(int **)((long)pvVar1 + (long)local_2c * 8) = local_28;\n        *(int *)(*(long *)((long)pvVar1 + (long)local_2c * 8) + 4) = local_24;\n        local_2c = local_2c + 1;\n      }\n    }\n  }\n  *param_5 = local_2c;\n  return pvVar1;\n}"
    },
    {
        "task_id": 87,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long *param_1,int param_2,long param_3,int param_4,int *param_5)\n\n{\n  void *pvVar1;\n  undefined4 *puVar2;\n  int iVar3;\n  long lVar4;\n  int iVar5;\n  ulong uVar6;\n  bool bVar7;\n  \n  pvVar1 = malloc(800);\n  if (param_2 < 1) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    uVar6 = 0;\n    do {\n      iVar3 = *(int *)(param_3 + uVar6 * 4) + -1;\n      if (-1 < iVar3) {\n        lVar4 = (long)iVar3 << 2;\n        do {\n          if (*(int *)(*param_1 + lVar4) == param_4) {\n            puVar2 = (undefined4 *)malloc(8);\n            *(undefined4 **)((long)pvVar1 + (long)iVar5 * 8) = puVar2;\n            *puVar2 = (int)uVar6;\n            puVar2[1] = iVar3;\n            iVar5 = iVar5 + 1;\n          }\n          iVar3 = iVar3 + -1;\n          lVar4 = lVar4 + -4;\n        } while (iVar3 != -1);\n      }\n      param_1 = param_1 + 1;\n      bVar7 = uVar6 != param_2 - 1;\n      uVar6 = uVar6 + 1;\n    } while (bVar7);\n  }\n  *param_5 = iVar5;\n  return pvVar1;\n}"
    },
    {
        "task_id": 87,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,long param_3,int param_4,int *param_5)\n\n{\n  long lVar1;\n  void *pvVar2;\n  undefined4 *puVar3;\n  int iVar4;\n  long lVar5;\n  long lVar6;\n  ulong uVar7;\n  int iVar8;\n  bool bVar9;\n  \n  pvVar2 = malloc(800);\n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar8 = 0;\n    uVar7 = 0;\n    do {\n      iVar4 = *(int *)(param_3 + uVar7 * 4) + -1;\n      if (-1 < iVar4) {\n        lVar6 = (long)iVar4;\n        lVar1 = *(long *)(param_1 + uVar7 * 8);\n        do {\n          while (*(int *)(lVar1 + lVar6 * 4) != param_4) {\n            lVar6 = lVar6 + -1;\n            if ((int)lVar6 < 0) goto LAB_00101488;\n          }\n          puVar3 = (undefined4 *)malloc(8);\n          lVar5 = (long)iVar8;\n          iVar8 = iVar8 + 1;\n          puVar3[1] = (int)lVar6;\n          lVar6 = lVar6 + -1;\n          *(undefined4 **)((long)pvVar2 + lVar5 * 8) = puVar3;\n          *puVar3 = (int)uVar7;\n        } while (-1 < (int)lVar6);\n      }\nLAB_00101488:\n      bVar9 = param_2 - 1 != uVar7;\n      uVar7 = uVar7 + 1;\n    } while (bVar9);\n  }\n  *param_5 = iVar8;\n  return pvVar2;\n}"
    },
    {
        "task_id": 87,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,long param_3,int param_4,int *param_5)\n\n{\n  long lVar1;\n  void *pvVar2;\n  undefined4 *puVar3;\n  int iVar4;\n  long lVar5;\n  long lVar6;\n  ulong uVar7;\n  int iVar8;\n  bool bVar9;\n  \n  pvVar2 = malloc(800);\n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar8 = 0;\n    uVar7 = 0;\n    do {\n      iVar4 = *(int *)(param_3 + uVar7 * 4) + -1;\n      if (-1 < iVar4) {\n        lVar6 = (long)iVar4;\n        lVar1 = *(long *)(param_1 + uVar7 * 8);\n        do {\n          while (*(int *)(lVar1 + lVar6 * 4) != param_4) {\n            lVar6 = lVar6 + -1;\n            if ((int)lVar6 < 0) goto LAB_00101498;\n          }\n          puVar3 = (undefined4 *)malloc(8);\n          lVar5 = (long)iVar8;\n          iVar8 = iVar8 + 1;\n          puVar3[1] = (int)lVar6;\n          lVar6 = lVar6 + -1;\n          *(undefined4 **)((long)pvVar2 + lVar5 * 8) = puVar3;\n          *puVar3 = (int)uVar7;\n        } while (-1 < (int)lVar6);\n      }\nLAB_00101498:\n      bVar9 = param_2 - 1 != uVar7;\n      uVar7 = uVar7 + 1;\n    } while (bVar9);\n  }\n  *param_5 = iVar8;\n  return pvVar2;\n}"
    },
    {
        "task_id": 88,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  void *pvVar4;\n  int local_20;\n  int local_1c;\n  int local_18;\n  \n  *param_4 = param_2;\n  if (param_2 == 0) {\n    *param_3 = (void *)0x0;\n  }\n  else {\n    pvVar4 = malloc((long)param_2 << 2);\n    *param_3 = pvVar4;\n    if (*param_3 == (void *)0x0) {\n                    /* WARNING: Subroutine does not return */\n      exit(1);\n    }\n    for (local_20 = 0; local_20 < param_2; local_20 = local_20 + 1) {\n      *(int *)((long)local_20 * 4 + (long)*param_3) = param_1[local_20];\n    }\n    iVar1 = *param_1;\n    iVar2 = param_1[(long)param_2 + -1];\n    for (local_1c = 0; local_18 = local_1c, local_1c < param_2 + -1; local_1c = local_1c + 1) {\n      while (local_18 = local_18 + 1, local_18 < param_2) {\n        if ((iVar1 + iVar2) % 2 == 1) {\n          if (*(int *)((long)*param_3 + (long)local_18 * 4) <\n              *(int *)((long)*param_3 + (long)local_1c * 4)) {\n            uVar3 = *(undefined4 *)((long)*param_3 + (long)local_1c * 4);\n            *(undefined4 *)((long)local_1c * 4 + (long)*param_3) =\n                 *(undefined4 *)((long)*param_3 + (long)local_18 * 4);\n            *(undefined4 *)((long)local_18 * 4 + (long)*param_3) = uVar3;\n          }\n        }\n        else if (*(int *)((long)*param_3 + (long)local_1c * 4) <\n                 *(int *)((long)*param_3 + (long)local_18 * 4)) {\n          uVar3 = *(undefined4 *)((long)*param_3 + (long)local_1c * 4);\n          *(undefined4 *)((long)local_1c * 4 + (long)*param_3) =\n               *(undefined4 *)((long)*param_3 + (long)local_18 * 4);\n          *(undefined4 *)((long)local_18 * 4 + (long)*param_3) = uVar3;\n        }\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 88,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  void *pvVar6;\n  long lVar7;\n  long lVar8;\n  int iVar9;\n  long lVar10;\n  \n  *param_4 = param_2;\n  if (param_2 == 0) {\n    *param_3 = (void *)0x0;\n  }\n  else {\n    pvVar6 = malloc((long)param_2 * 4);\n    *param_3 = pvVar6;\n    if (pvVar6 == (void *)0x0) {\n                    /* WARNING: Subroutine does not return */\n      exit(1);\n    }\n    if (0 < param_2) {\n      lVar7 = 0;\n      do {\n        *(undefined4 *)((long)*param_3 + lVar7) = *(undefined4 *)((long)param_1 + lVar7);\n        lVar7 = lVar7 + 4;\n      } while (lVar7 != (ulong)(param_2 - 1) * 4 + 4);\n    }\n    iVar2 = *param_1;\n    iVar3 = param_1[(long)param_2 + -1];\n    if (1 < param_2) {\n      lVar7 = 0;\n      lVar10 = 0;\n      iVar9 = 0;\n      do {\n        iVar9 = iVar9 + 1;\n        if (iVar9 < param_2) {\n          lVar8 = lVar7 + 4;\n          do {\n            if ((iVar2 + iVar3) % 2 == 1) {\n              piVar1 = (int *)((long)*param_3 + lVar7);\n              iVar4 = *piVar1;\n              iVar5 = *(int *)((long)*param_3 + lVar8);\n              if (iVar5 < iVar4) {\n                *piVar1 = iVar5;\n                *(int *)((long)*param_3 + lVar8) = iVar4;\n              }\n            }\n            else {\n              piVar1 = (int *)((long)*param_3 + lVar7);\n              iVar4 = *piVar1;\n              iVar5 = *(int *)((long)*param_3 + lVar8);\n              if (iVar4 < iVar5) {\n                *piVar1 = iVar5;\n                *(int *)((long)*param_3 + lVar8) = iVar4;\n              }\n            }\n            lVar8 = lVar8 + 4;\n          } while (lVar8 != (lVar10 + 2 + (ulong)(uint)((param_2 + -1) - iVar9)) * 4);\n        }\n        lVar10 = lVar10 + 1;\n        lVar7 = lVar7 + 4;\n      } while (iVar9 != param_2 + -1);\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 88,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0_part_0(int *param_1,int param_2,int **param_3)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int *piVar4;\n  int iVar5;\n  ulong uVar6;\n  long lVar7;\n  int *piVar8;\n  long lVar9;\n  bool bVar10;\n  \n  piVar4 = (int *)malloc((long)param_2 * 4);\n  *param_3 = piVar4;\n  if (piVar4 == (int *)0x0) {\n                    /* WARNING: Subroutine does not return */\n    exit(1);\n  }\n  uVar6 = 0;\n  if (0 < param_2) {\n    do {\n      piVar4[uVar6] = param_1[uVar6];\n      bVar10 = uVar6 != param_2 - 1;\n      uVar6 = uVar6 + 1;\n    } while (bVar10);\n  }\n  iVar1 = *param_1;\n  iVar2 = param_1[(long)param_2 + -1];\n  if (param_2 < 2) {\n    return;\n  }\n  lVar9 = 1;\n  piVar8 = piVar4;\n  do {\n    iVar5 = (int)lVar9;\n    lVar7 = lVar9;\njoined_r0x00101656:\n    if (iVar5 < param_2) {\n      do {\n        iVar5 = *piVar8;\n        iVar3 = piVar4[lVar7];\n        if ((iVar1 + iVar2) % 2 == 1) {\n          if (iVar5 <= iVar3) goto code_r0x00101681;\nLAB_00101664:\n          *piVar8 = iVar3;\n          piVar4[lVar7] = iVar5;\n        }\n        else if (iVar5 < iVar3) goto LAB_00101664;\n        lVar7 = lVar7 + 1;\n        if (param_2 <= (int)lVar7) break;\n      } while( true );\n    }\n    lVar9 = lVar9 + 1;\n    piVar8 = piVar8 + 1;\n    if ((ulong)(param_2 - 2) + 2 == lVar9) {\n      return;\n    }\n  } while( true );\ncode_r0x00101681:\n  lVar7 = lVar7 + 1;\n  iVar5 = (int)lVar7;\n  goto joined_r0x00101656;\n}"
    },
    {
        "task_id": 88,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0_part_0(int *param_1,int param_2,int **param_3)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int *__dest;\n  long lVar4;\n  int *piVar5;\n  long lVar6;\n  long lVar7;\n  \n  __dest = (int *)malloc((long)param_2 * 4);\n  *param_3 = __dest;\n  if (__dest == (int *)0x0) {\n                    /* WARNING: Subroutine does not return */\n    exit(1);\n  }\n  if (0 < param_2) {\n    __dest = (int *)memcpy(__dest,param_1,(ulong)(param_2 - 1) * 4 + 4);\n  }\n  iVar1 = *param_1;\n  iVar2 = param_1[(long)param_2 + -1];\n  if (1 < param_2) {\n    lVar6 = 1;\n    lVar7 = (ulong)(param_2 - 2) + 2;\n    piVar5 = __dest;\n    do {\n      while ((int)lVar6 < param_2) {\n        lVar4 = lVar6;\n        if ((iVar1 + iVar2) % 2 != 1) {\n          do {\n            iVar3 = *piVar5;\n            if (iVar3 < __dest[lVar4]) {\n              *piVar5 = __dest[lVar4];\n              __dest[lVar4] = iVar3;\n            }\n            lVar4 = lVar4 + 1;\n          } while ((int)lVar4 < param_2);\n          break;\n        }\n        do {\n          iVar3 = *piVar5;\n          if (__dest[lVar4] < iVar3) {\n            *piVar5 = __dest[lVar4];\n            __dest[lVar4] = iVar3;\n          }\n          lVar4 = lVar4 + 1;\n        } while ((int)lVar4 < param_2);\n        lVar6 = lVar6 + 1;\n        piVar5 = piVar5 + 1;\n        if (lVar7 == lVar6) {\n          return;\n        }\n      }\n      lVar6 = lVar6 + 1;\n      piVar5 = piVar5 + 1;\n    } while (lVar7 != lVar6);\n  }\n  return;\n}"
    },
    {
        "task_id": 89,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2)\n\n{\n  int iVar1;\n  int local_10;\n  \n  for (local_10 = 0; *(char *)(param_1 + local_10) != '\\0'; local_10 = local_10 + 1) {\n    iVar1 = *(char *)(param_1 + local_10) + -0x5d;\n    *(char *)(param_2 + local_10) = (char)iVar1 + (char)(iVar1 / 0x1a) * -0x1a + 'a';\n  }\n  *(undefined *)(param_2 + local_10) = 0;\n  return;\n}"
    },
    {
        "task_id": 89,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  char cVar1;\n  long lVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    lVar2 = 0;\n  }\n  else {\n    lVar2 = 0;\n    do {\n      *(char *)(param_2 + lVar2) =\n           (char)(cVar1 + -0x5d) + (char)((cVar1 + -0x5d) / 0x1a) * -0x1a + 'a';\n      lVar2 = lVar2 + 1;\n      cVar1 = param_1[lVar2];\n    } while (cVar1 != '\\0');\n  }\n  *(undefined *)(param_2 + lVar2) = 0;\n  return;\n}"
    },
    {
        "task_id": 89,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,undefined *param_2)\n\n{\n  char cVar1;\n  long lVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 != '\\0') {\n    lVar2 = 0;\n    do {\n      param_2[lVar2] = (char)(cVar1 + -0x5d) + (char)((cVar1 + -0x5d) / 0x1a) * -0x1a + 'a';\n      lVar2 = lVar2 + 1;\n      cVar1 = param_1[lVar2];\n    } while (cVar1 != '\\0');\n    param_2 = param_2 + lVar2;\n  }\n  *param_2 = 0;\n  return;\n}"
    },
    {
        "task_id": 89,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,undefined *param_2)\n\n{\n  char cVar1;\n  long lVar2;\n  \n  cVar1 = *param_1;\n  if (cVar1 != '\\0') {\n    lVar2 = 0;\n    do {\n      param_2[lVar2] = (char)(cVar1 + -0x5d) + (char)((cVar1 + -0x5d) / 0x1a) * -0x1a + 'a';\n      lVar2 = lVar2 + 1;\n      cVar1 = param_1[lVar2];\n    } while (cVar1 != '\\0');\n    param_2 = param_2 + lVar2;\n  }\n  *param_2 = 0;\n  return;\n}"
    },
    {
        "task_id": 90,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  if (param_2 < 2) {\n    local_10 = -1;\n  }\n  else {\n    local_14 = 0x7fffffff;\n    local_10 = 0x7fffffff;\n    for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n      if (*(int *)(param_1 + (long)local_c * 4) < local_14) {\n        local_10 = local_14;\n        local_14 = *(int *)(param_1 + (long)local_c * 4);\n      }\n      else if ((*(int *)(param_1 + (long)local_c * 4) < local_10) &&\n              (local_14 != *(int *)(param_1 + (long)local_c * 4))) {\n        local_10 = *(int *)(param_1 + (long)local_c * 4);\n      }\n    }\n    if (local_10 == 0x7fffffff) {\n      local_10 = -1;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 90,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (param_2 < 2) {\n    iVar5 = -1;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar4 = 0x7fffffff;\n    iVar6 = 0x7fffffff;\n    do {\n      iVar2 = *param_1;\n      iVar3 = iVar2;\n      iVar5 = iVar4;\n      if (((iVar4 <= iVar2) && (iVar3 = iVar4, iVar5 = iVar6, iVar2 != iVar4)) && (iVar2 < iVar6)) {\n        iVar5 = iVar2;\n      }\n      iVar4 = iVar3;\n      param_1 = param_1 + 1;\n      iVar6 = iVar5;\n    } while (param_1 != piVar1);\n    if (iVar5 == 0x7fffffff) {\n      iVar5 = -1;\n    }\n  }\n  return iVar5;\n}"
    },
    {
        "task_id": 90,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0_part_0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar4 = 0x7fffffff;\n    iVar3 = 0x7fffffff;\n    do {\n      while( true ) {\n        iVar2 = *param_1;\n        if (iVar3 <= iVar2) break;\n        param_1 = param_1 + 1;\n        iVar4 = iVar3;\n        iVar3 = iVar2;\n        if (param_1 == piVar1) goto LAB_00101396;\n      }\n      if ((iVar2 != iVar3) && (iVar2 < iVar4)) {\n        iVar4 = iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\nLAB_00101396:\n    if (iVar4 != 0x7fffffff) {\n      return iVar4;\n    }\n  }\n  return -1;\n}\n\n// Function: func0\nundefined8 func0(undefined8 param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  \n  if (1 < param_2) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 0xffffffff;\n}"
    },
    {
        "task_id": 90,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0_part_0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (0 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar4 = 0x7fffffff;\n    iVar3 = 0x7fffffff;\n    do {\n      while( true ) {\n        iVar2 = *param_1;\n        if (iVar3 <= iVar2) break;\n        param_1 = param_1 + 1;\n        iVar4 = iVar3;\n        iVar3 = iVar2;\n        if (param_1 == piVar1) goto LAB_00101356;\n      }\n      if ((iVar3 != iVar2) && (iVar2 < iVar4)) {\n        iVar4 = iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\nLAB_00101356:\n    if (iVar4 != 0x7fffffff) {\n      return iVar4;\n    }\n  }\n  return -1;\n}\n\n// Function: func0\nint func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (1 < param_2) {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar4 = 0x7fffffff;\n    iVar3 = 0x7fffffff;\n    do {\n      while (iVar2 = *param_1, iVar2 < iVar3) {\n        param_1 = param_1 + 1;\n        iVar4 = iVar3;\n        iVar3 = iVar2;\n        if (piVar1 == param_1) goto LAB_001013c8;\n      }\n      if ((iVar2 < iVar4) && (iVar2 != iVar3)) {\n        iVar4 = iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (piVar1 != param_1);\nLAB_001013c8:\n    if (iVar4 != 0x7fffffff) {\n      return iVar4;\n    }\n  }\n  return -1;\n}"
    },
    {
        "task_id": 91,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1)\n\n{\n  bool bVar1;\n  bool bVar2;\n  ushort **ppuVar3;\n  int local_10;\n  int local_c;\n  \n  bVar2 = true;\n  bVar1 = false;\n  local_10 = 0;\n  for (local_c = 0; *(char *)(param_1 + local_c) != '\\0'; local_c = local_c + 1) {\n    ppuVar3 = __ctype_b_loc();\n    if ((((*ppuVar3)[*(char *)(param_1 + local_c)] & 0x2000) != 0) && (bVar1)) {\n      bVar1 = false;\n      local_10 = local_10 + 1;\n    }\n    if ((*(char *)(param_1 + local_c) == 'I') && (bVar2)) {\n      bVar1 = true;\n    }\n    else {\n      ppuVar3 = __ctype_b_loc();\n      if (((*ppuVar3)[*(char *)(param_1 + local_c)] & 0x2000) == 0) {\n        bVar1 = false;\n      }\n    }\n    ppuVar3 = __ctype_b_loc();\n    if (((*ppuVar3)[*(char *)(param_1 + local_c)] & 0x2000) == 0) {\n      bVar2 = false;\n    }\n    if (((*(char *)(param_1 + local_c) == '.') || (*(char *)(param_1 + local_c) == '?')) ||\n       (*(char *)(param_1 + local_c) == '!')) {\n      bVar2 = true;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 91,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  bool bVar1;\n  bool bVar2;\n  ushort uVar3;\n  ushort **ppuVar4;\n  byte bVar5;\n  int iVar6;\n  \n  bVar5 = *param_1;\n  iVar6 = 0;\n  if (bVar5 != 0) {\n    ppuVar4 = __ctype_b_loc();\n    uVar3 = (*ppuVar4)[(char)bVar5] & 0x2000;\n    param_1 = param_1 + 1;\n    bVar1 = true;\n    iVar6 = 0;\n    bVar2 = false;\n    while( true ) {\n      if ((bVar1) && (bVar5 == 0x49)) {\n        bVar2 = true;\n        if (uVar3 == 0) {\n          bVar1 = false;\n        }\n      }\n      else {\n        if (uVar3 == 0) {\n          bVar2 = false;\n          bVar1 = false;\n        }\n        if ((bVar5 < 0x40) && ((0x8000400200000000U >> (bVar5 & 0x3f) & 1) != 0)) {\n          bVar1 = true;\n        }\n      }\n      bVar5 = *param_1;\n      if (bVar5 == 0) break;\n      uVar3 = (*ppuVar4)[(char)bVar5] & 0x2000;\n      if ((bVar2) && (uVar3 != 0)) {\n        iVar6 = iVar6 + 1;\n        bVar2 = false;\n      }\n      param_1 = param_1 + 1;\n    }\n  }\n  return iVar6;\n}"
    },
    {
        "task_id": 91,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  bool bVar1;\n  bool bVar2;\n  byte bVar3;\n  ushort **ppuVar4;\n  byte bVar5;\n  int iVar6;\n  \n  bVar5 = *param_1;\n  if (bVar5 == 0) {\n    return 0;\n  }\n  ppuVar4 = __ctype_b_loc();\n  param_1 = param_1 + 1;\n  iVar6 = 0;\n  bVar1 = false;\n  bVar3 = 1;\n  do {\n    while (bVar2 = (bool)(bVar5 == 0x49 & bVar3),\n          (*(byte *)((long)*ppuVar4 + (long)(char)bVar5 * 2 + 1) & 0x20) != 0) {\n      iVar6 = (iVar6 + 1) - (uint)!bVar1;\n      if (!bVar2) goto LAB_001012fb;\n      bVar3 = 1;\nLAB_0010133a:\n      bVar1 = true;\n      bVar5 = *param_1;\n      param_1 = param_1 + 1;\n      if (bVar5 == 0) {\n        return iVar6;\n      }\n    }\n    bVar3 = 0;\n    if (bVar2) goto LAB_0010133a;\nLAB_001012fb:\n    bVar1 = false;\n    if ((bVar5 < 0x40) && ((0x8000400200000000U >> (bVar5 & 0x3f) & 1) != 0)) {\n      bVar3 = 1;\n    }\n    bVar5 = *param_1;\n    param_1 = param_1 + 1;\n    if (bVar5 == 0) {\n      return iVar6;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 91,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte *param_1)\n\n{\n  bool bVar1;\n  bool bVar2;\n  byte bVar3;\n  ushort **ppuVar4;\n  byte bVar5;\n  int iVar6;\n  \n  bVar5 = *param_1;\n  if (bVar5 == 0) {\n    return 0;\n  }\n  ppuVar4 = __ctype_b_loc();\n  param_1 = param_1 + 1;\n  iVar6 = 0;\n  bVar1 = false;\n  bVar3 = 1;\n  do {\n    while (bVar2 = (bool)(bVar5 == 0x49 & bVar3),\n          (*(byte *)((long)*ppuVar4 + (long)(char)bVar5 * 2 + 1) & 0x20) != 0) {\n      iVar6 = (iVar6 + 1) - (uint)!bVar1;\n      if (!bVar2) goto LAB_001012fb;\n      bVar3 = 1;\nLAB_0010133a:\n      bVar1 = true;\n      bVar5 = *param_1;\n      param_1 = param_1 + 1;\n      if (bVar5 == 0) {\n        return iVar6;\n      }\n    }\n    bVar3 = 0;\n    if (bVar2) goto LAB_0010133a;\nLAB_001012fb:\n    bVar1 = false;\n    if ((bVar5 < 0x40) && ((0x8000400200000000U >> (bVar5 & 0x3f) & 1) != 0)) {\n      bVar3 = 1;\n    }\n    bVar5 = *param_1;\n    param_1 = param_1 + 1;\n    if (bVar5 == 0) {\n      return iVar6;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 92,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,float param_2,float param_3)\n\n{\n  undefined8 uVar1;\n  float fVar2;\n  \n  fVar2 = roundf(param_1);\n  if (fVar2 == param_1) {\n    fVar2 = roundf(param_2);\n    if (fVar2 == param_2) {\n      fVar2 = roundf(param_3);\n      if (fVar2 == param_3) {\n        if (((param_1 + param_2 == param_3) || (param_1 + param_3 == param_2)) ||\n           (param_2 + param_3 == param_1)) {\n          uVar1 = 1;\n        }\n        else {\n          uVar1 = 0;\n        }\n      }\n      else {\n        uVar1 = 0;\n      }\n    }\n    else {\n      uVar1 = 0;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}"
    },
    {
        "task_id": 92,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  bool bVar1;\n  float fVar2;\n  \n  fVar2 = roundf(param_1);\n  if (fVar2 == param_1) {\n    fVar2 = roundf(param_2);\n    if (fVar2 == param_2) {\n      fVar2 = roundf(param_3);\n      if (fVar2 == param_3) {\n        bVar1 = param_2 + param_3 == param_1;\n      }\n      else {\n        bVar1 = false;\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n  }\n  else {\n    bVar1 = false;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 92,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  fVar1 = roundf(param_1);\n  if (((fVar1 == param_1) && (fVar1 = roundf(param_2), fVar1 == param_2)) &&\n     (fVar1 = roundf(param_3), fVar1 == param_3)) {\n    return param_2 + param_3 == param_1;\n  }\n  return false;\n}"
    },
    {
        "task_id": 92,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  float fVar1;\n  \n  fVar1 = roundf(param_1);\n  if (((fVar1 == param_1) && (fVar1 = roundf(param_2), fVar1 == param_2)) &&\n     (fVar1 = roundf(param_3), fVar1 == param_3)) {\n    return param_2 + param_3 == param_1;\n  }\n  return false;\n}"
    },
    {
        "task_id": 93,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2)\n\n{\n  int iVar1;\n  ushort **ppuVar2;\n  char local_19;\n  int local_18;\n  int local_14;\n  \n  local_18 = 0;\n  do {\n    if (*(char *)(param_1 + local_18) == '\\0') {\n      *(undefined *)(param_2 + local_18) = 0;\n      return;\n    }\n    local_19 = *(char *)(param_1 + local_18);\n    ppuVar2 = __ctype_b_loc();\n    if (((*ppuVar2)[local_19] & 0x200) == 0) {\n      ppuVar2 = __ctype_b_loc();\n      if (((*ppuVar2)[local_19] & 0x100) != 0) {\n        iVar1 = tolower((int)local_19);\n        local_19 = (char)iVar1;\n      }\n    }\n    else {\n      iVar1 = toupper((int)local_19);\n      local_19 = (char)iVar1;\n    }\n    for (local_14 = 0; \"aeiouAEIOU\"[local_14] != '\\0'; local_14 = local_14 + 1) {\n      if (local_19 == \"aeiouAEIOU\"[local_14]) {\n        if (local_14 < 10) {\n          local_19 = local_19 + '\\x02';\n        }\n        break;\n      }\n    }\n    *(char *)(local_18 + param_2) = local_19;\n    local_18 = local_18 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 93,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  ushort **ppuVar1;\n  __int32_t **pp_Var2;\n  long lVar3;\n  char cVar4;\n  char cVar5;\n  long lVar6;\n  \n  cVar5 = *param_1;\n  if (cVar5 == '\\0') {\n    lVar6 = 0;\n  }\n  else {\n    ppuVar1 = __ctype_b_loc();\n    lVar6 = 0;\n    do {\n      if (((*ppuVar1)[cVar5] & 0x200) == 0) {\n        if (((*ppuVar1)[cVar5] & 0x100) != 0) {\n          pp_Var2 = __ctype_tolower_loc();\n          cVar5 = *(char *)(*pp_Var2 + cVar5);\n        }\n      }\n      else {\n        pp_Var2 = __ctype_toupper_loc();\n        cVar5 = *(char *)(*pp_Var2 + cVar5);\n      }\n      cVar4 = 'a';\n      lVar3 = 0;\n      do {\n        if (cVar5 == cVar4) {\n          if ((int)lVar3 < 10) {\n            cVar5 = cVar5 + '\\x02';\n          }\n          break;\n        }\n        cVar4 = \"aeiouAEIOU\"[lVar3 + 1];\n        lVar3 = lVar3 + 1;\n      } while (cVar4 != '\\0');\n      *(char *)(param_2 + lVar6) = cVar5;\n      lVar6 = lVar6 + 1;\n      cVar5 = param_1[lVar6];\n    } while (cVar5 != '\\0');\n  }\n  *(undefined *)(param_2 + lVar6) = 0;\n  return;\n}"
    },
    {
        "task_id": 93,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,undefined *param_2)\n\n{\n  ushort **ppuVar1;\n  __int32_t **pp_Var2;\n  long lVar3;\n  char cVar4;\n  char cVar5;\n  long lVar6;\n  \n  cVar5 = *param_1;\n  if (cVar5 != '\\0') {\n    ppuVar1 = __ctype_b_loc();\n    lVar6 = 0;\n    do {\n      if (((*ppuVar1)[cVar5] & 0x200) == 0) {\n        if (((*ppuVar1)[cVar5] & 0x100) != 0) {\n          pp_Var2 = __ctype_tolower_loc();\n          cVar5 = *(char *)(*pp_Var2 + cVar5);\n        }\n      }\n      else {\n        pp_Var2 = __ctype_toupper_loc();\n        cVar5 = *(char *)(*pp_Var2 + cVar5);\n      }\n      cVar4 = 'a';\n      lVar3 = 0;\n      do {\n        if (cVar5 == cVar4) {\n          if ((int)lVar3 < 10) {\n            cVar5 = cVar5 + '\\x02';\n          }\n          break;\n        }\n        cVar4 = \"aeiouAEIOU\"[lVar3 + 1];\n        lVar3 = lVar3 + 1;\n      } while (cVar4 != '\\0');\n      param_2[lVar6] = cVar5;\n      lVar6 = lVar6 + 1;\n      cVar5 = param_1[lVar6];\n    } while (cVar5 != '\\0');\n    param_2 = param_2 + lVar6;\n  }\n  *param_2 = 0;\n  return;\n}"
    },
    {
        "task_id": 93,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,undefined *param_2)\n\n{\n  ushort **ppuVar1;\n  __int32_t **pp_Var2;\n  long lVar3;\n  char cVar4;\n  char cVar5;\n  long lVar6;\n  \n  cVar5 = *param_1;\n  if (cVar5 != '\\0') {\n    ppuVar1 = __ctype_b_loc();\n    lVar6 = 0;\n    do {\n      if (((*ppuVar1)[cVar5] & 0x200) == 0) {\n        if (((*ppuVar1)[cVar5] & 0x100) != 0) {\n          pp_Var2 = __ctype_tolower_loc();\n          cVar5 = *(char *)(*pp_Var2 + cVar5);\n        }\n      }\n      else {\n        pp_Var2 = __ctype_toupper_loc();\n        cVar5 = *(char *)(*pp_Var2 + cVar5);\n      }\n      cVar4 = 'a';\n      lVar3 = 0;\n      do {\n        if (cVar5 == cVar4) {\n          if ((int)lVar3 < 10) {\n            cVar5 = cVar5 + '\\x02';\n          }\n          break;\n        }\n        cVar4 = \"aeiouAEIOU\"[lVar3 + 1];\n        lVar3 = lVar3 + 1;\n      } while (cVar4 != '\\0');\n      param_2[lVar6] = cVar5;\n      lVar6 = lVar6 + 1;\n      cVar5 = param_1[lVar6];\n    } while (cVar5 != '\\0');\n    param_2 = param_2 + lVar6;\n  }\n  *param_2 = 0;\n  return;\n}"
    },
    {
        "task_id": 94,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  bool bVar2;\n  int iVar3;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_10;\n  \n  local_20 = 0;\n  local_1c = 0;\n  local_18 = 0;\n  do {\n    if (param_2 <= local_18) {\n      for (; 0 < local_20; local_20 = local_20 / 10) {\n        local_1c = local_1c + local_20 % 10;\n      }\n      return local_1c;\n    }\n    iVar1 = *(int *)(param_1 + (long)local_18 * 4);\n    iVar3 = local_20;\n    if (1 < iVar1) {\n      bVar2 = true;\n      for (local_10 = 2; local_10 * local_10 <= iVar1; local_10 = local_10 + 1) {\n        if (iVar1 % local_10 == 0) {\n          bVar2 = false;\n          break;\n        }\n      }\n      if ((bVar2) && (iVar3 = iVar1, iVar1 <= local_20)) {\n        iVar3 = local_20;\n      }\n    }\n    local_20 = iVar3;\n    local_18 = local_18 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 94,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  bool bVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  \n  if (param_2 < 1) {\n    iVar4 = 0;\n  }\n  else {\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    uVar6 = 0;\n    uVar5 = 0;\n    do {\n      uVar2 = *param_1;\n      if (1 < (int)uVar2) {\n        if ((int)uVar2 < 4) {\nLAB_001011c6:\n          bVar3 = (int)uVar5 < (int)uVar2;\n          uVar5 = uVar6;\n          if (bVar3) {\n            uVar5 = uVar2;\n            uVar6 = uVar2;\n          }\n        }\n        else if ((uVar2 & 1) != 0) {\n          iVar4 = 2;\n          do {\n            iVar4 = iVar4 + 1;\n            if ((int)uVar2 < iVar4 * iVar4) goto LAB_001011c6;\n          } while ((int)uVar2 % iVar4 != 0);\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n    if ((int)uVar5 < 1) {\n      iVar4 = 0;\n    }\n    else {\n      iVar4 = 0;\n      do {\n        iVar4 = iVar4 + (int)uVar5 % 10;\n        bVar3 = 9 < (int)uVar5;\n        uVar5 = (int)uVar5 / 10;\n      } while (bVar3);\n    }\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 94,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  uVar3 = 0;\n  puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    uVar2 = *param_1;\n    if (1 < (int)uVar2) {\n      if ((int)uVar2 < 4) {\nLAB_001016cd:\n        if ((int)uVar3 < (int)uVar2) {\n          uVar3 = uVar2;\n        }\n      }\n      else if ((uVar2 & 1) != 0) {\n        iVar4 = 2;\n        do {\n          iVar4 = iVar4 + 1;\n          if ((int)uVar2 < iVar4 * iVar4) goto LAB_001016cd;\n        } while ((int)uVar2 % iVar4 != 0);\n      }\n    }\n    param_1 = param_1 + 1;\n    if (param_1 == puVar1) {\n      iVar4 = 0;\n      for (; uVar3 != 0; uVar3 = uVar3 / 10) {\n        iVar4 = iVar4 + uVar3 % 10;\n      }\n      return iVar4;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 94,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  uVar3 = 0;\n  puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    uVar2 = *param_1;\n    if (1 < (int)uVar2) {\n      if ((int)uVar2 < 4) {\nLAB_0010159d:\n        if ((int)uVar3 < (int)uVar2) {\n          uVar3 = uVar2;\n        }\n      }\n      else if ((uVar2 & 1) != 0) {\n        iVar4 = 2;\n        do {\n          iVar4 = iVar4 + 1;\n          if ((int)uVar2 < iVar4 * iVar4) goto LAB_0010159d;\n        } while ((int)uVar2 % iVar4 != 0);\n      }\n    }\n    param_1 = param_1 + 1;\n    if (param_1 == puVar1) {\n      iVar4 = 0;\n      for (; uVar3 != 0; uVar3 = uVar3 / 10) {\n        iVar4 = iVar4 + uVar3 % 10;\n      }\n      return iVar4;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 95,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  long lVar1;\n  undefined8 uVar2;\n  ushort **ppuVar3;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  if (param_2 == 0) {\n    uVar2 = 0;\n  }\n  else {\n    local_20 = 0;\n    local_1c = 0;\n    for (local_18 = 0; local_18 < param_2; local_18 = local_18 + 1) {\n      lVar1 = *(long *)(param_1 + (long)local_18 * 0x10);\n      for (local_14 = 0; *(char *)(lVar1 + local_14) != '\\0'; local_14 = local_14 + 1) {\n        ppuVar3 = __ctype_b_loc();\n        if (((*ppuVar3)[*(byte *)(lVar1 + local_14)] & 0x400) == 0) {\n          return 0;\n        }\n        ppuVar3 = __ctype_b_loc();\n        if (((*ppuVar3)[*(byte *)(lVar1 + local_14)] & 0x100) != 0) {\n          local_1c = 1;\n        }\n        ppuVar3 = __ctype_b_loc();\n        if (((*ppuVar3)[*(byte *)(lVar1 + local_14)] & 0x200) != 0) {\n          local_20 = 1;\n        }\n        if (local_20 + local_1c == 2) {\n          return 0;\n        }\n      }\n    }\n    uVar2 = 1;\n  }\n  return uVar2;\n}"
    },
    {
        "task_id": 95,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(byte **param_1,int param_2)\n\n{\n  ushort uVar1;\n  ushort **ppuVar2;\n  byte bVar3;\n  byte *pbVar4;\n  int iVar5;\n  int iVar6;\n  byte **local_48;\n  \n  if (param_2 == 0) {\n    return param_2;\n  }\n  if (param_2 < 1) {\n    return 1;\n  }\n  iVar6 = 0;\n  iVar5 = 0;\n  local_48 = param_1;\n  do {\n    pbVar4 = *local_48;\n    bVar3 = *pbVar4;\n    if (bVar3 != 0) {\n      ppuVar2 = __ctype_b_loc();\n      do {\n        pbVar4 = pbVar4 + 1;\n        uVar1 = (*ppuVar2)[bVar3];\n        if ((uVar1 & 0x400) == 0) {\n          return 0;\n        }\n        if ((uVar1 & 0x100) == 0) {\n          if ((uVar1 & 0x200) != 0) {\n            iVar5 = 1;\n          }\n        }\n        else {\n          iVar6 = 1;\n          if ((uVar1 & 0x200) != 0) {\n            return 0;\n          }\n        }\n        if (iVar5 + iVar6 == 2) {\n          return 0;\n        }\n        bVar3 = *pbVar4;\n      } while (bVar3 != 0);\n    }\n    local_48 = local_48 + 2;\n    if (local_48 == param_1 + (ulong)(param_2 - 1) * 2 + 2) {\n      return 1;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 95,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(byte **param_1,int param_2)\n\n{\n  byte **ppbVar1;\n  byte bVar2;\n  ushort uVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (param_2 < 1) {\n    return 1;\n  }\n  iVar7 = 0;\n  ppbVar1 = param_1 + (ulong)(param_2 - 1) * 2 + 2;\n  iVar6 = 0;\n  do {\n    pbVar5 = *param_1;\n    bVar2 = *pbVar5;\n    if (bVar2 != 0) {\n      ppuVar4 = __ctype_b_loc();\n      do {\n        pbVar5 = pbVar5 + 1;\n        uVar3 = (*ppuVar4)[bVar2];\n        if ((uVar3 & 0x400) == 0) {\n          return 0;\n        }\n        if ((uVar3 & 0x100) == 0) {\n          if ((uVar3 & 0x200) != 0) {\n            iVar6 = 1;\n          }\n        }\n        else {\n          if ((uVar3 & 0x200) != 0) {\n            return 0;\n          }\n          iVar7 = 1;\n        }\n        if (iVar6 + iVar7 == 2) {\n          return 0;\n        }\n        bVar2 = *pbVar5;\n      } while (bVar2 != 0);\n    }\n    param_1 = param_1 + 2;\n    if (ppbVar1 == param_1) {\n      return 1;\n    }\n  } while( true );\n}\n\n// Function: func0\nundefined8 func0(undefined8 param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  \n  if (param_2 != 0) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 95,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(byte **param_1,int param_2)\n\n{\n  byte **ppbVar1;\n  byte bVar2;\n  ushort uVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (param_2 < 1) {\n    return 1;\n  }\n  iVar7 = 0;\n  ppbVar1 = param_1 + (ulong)(param_2 - 1) * 2 + 2;\n  iVar6 = 0;\n  do {\n    pbVar5 = *param_1;\n    bVar2 = *pbVar5;\n    if (bVar2 != 0) {\n      ppuVar4 = __ctype_b_loc();\n      do {\n        pbVar5 = pbVar5 + 1;\n        uVar3 = (*ppuVar4)[bVar2];\n        if ((uVar3 & 0x400) == 0) {\n          return 0;\n        }\n        if ((uVar3 & 0x100) == 0) {\n          if ((uVar3 & 0x200) != 0) {\n            iVar6 = 1;\n          }\n        }\n        else {\n          if ((uVar3 & 0x200) != 0) {\n            return 0;\n          }\n          iVar7 = 1;\n        }\n        if (iVar6 + iVar7 == 2) {\n          return 0;\n        }\n        bVar2 = *pbVar5;\n      } while (bVar2 != 0);\n    }\n    param_1 = param_1 + 2;\n    if (ppbVar1 == param_1) {\n      return 1;\n    }\n  } while( true );\n}\n\n// Function: func0\nundefined8 func0(byte **param_1,int param_2)\n\n{\n  byte **ppbVar1;\n  byte bVar2;\n  ushort uVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (param_2 == 0) {\n    return 0;\n  }\n  if (param_2 < 1) {\n    return 1;\n  }\n  iVar7 = 0;\n  ppbVar1 = param_1 + (ulong)(param_2 - 1) * 2 + 2;\n  iVar6 = 0;\n  do {\n    pbVar5 = *param_1;\n    bVar2 = *pbVar5;\n    if (bVar2 != 0) {\n      ppuVar4 = __ctype_b_loc();\n      do {\n        pbVar5 = pbVar5 + 1;\n        uVar3 = (*ppuVar4)[bVar2];\n        if ((uVar3 & 0x400) == 0) {\n          return 0;\n        }\n        if ((uVar3 & 0x100) == 0) {\n          if ((uVar3 & 0x200) != 0) {\n            iVar6 = 1;\n          }\n        }\n        else {\n          if ((uVar3 & 0x200) != 0) {\n            return 0;\n          }\n          iVar7 = 1;\n        }\n        if (iVar6 + iVar7 == 2) {\n          return 0;\n        }\n        bVar2 = *pbVar5;\n      } while (bVar2 != 0);\n    }\n    param_1 = param_1 + 2;\n    if (ppbVar1 == param_1) {\n      return 1;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 96,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1,int *param_2)\n\n{\n  int iVar1;\n  bool bVar2;\n  void *pvVar3;\n  int local_20;\n  int local_1c;\n  \n  pvVar3 = malloc((long)param_1 << 2);\n  *param_2 = 0;\n  local_20 = 2;\n  do {\n    if (param_1 <= local_20) {\n      return pvVar3;\n    }\n    bVar2 = true;\n    local_1c = 0;\n    while( true ) {\n      if ((*param_2 <= local_1c) ||\n         (iVar1 = *(int *)((long)pvVar3 + (long)local_1c * 4), local_20 < iVar1 * iVar1))\n      goto LAB_00101243;\n      if (local_20 % iVar1 == 0) break;\n      local_1c = local_1c + 1;\n    }\n    bVar2 = false;\nLAB_00101243:\n    if (bVar2) {\n      *(int *)((long)*param_2 * 4 + (long)pvVar3) = local_20;\n      *param_2 = *param_2 + 1;\n    }\n    local_20 = local_20 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 96,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(int param_1,int *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  int *piVar4;\n  int iVar5;\n  \n  piVar3 = (int *)malloc((long)param_1 << 2);\n  *param_2 = 0;\n  iVar5 = 2;\n  if (2 < param_1) {\n    do {\n      iVar1 = *param_2;\n      if (0 < iVar1) {\n        piVar4 = piVar3;\n        do {\n          iVar2 = *piVar4;\n          if (iVar5 < iVar2 * iVar2) break;\n          if (iVar5 % iVar2 == 0) goto LAB_001011ef;\n          piVar4 = piVar4 + 1;\n        } while (piVar4 != piVar3 + (ulong)(iVar1 - 1) + 1);\n      }\n      piVar3[iVar1] = iVar5;\n      *param_2 = iVar1 + 1;\nLAB_001011ef:\n      iVar5 = iVar5 + 1;\n    } while (param_1 != iVar5);\n  }\n  return piVar3;\n}"
    },
    {
        "task_id": 96,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(int param_1,int *param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  int *piVar3;\n  int iVar4;\n  int iVar5;\n  \n  piVar2 = (int *)malloc((long)param_1 << 2);\n  *param_2 = 0;\n  iVar5 = 0;\n  iVar4 = 2;\n  if (param_1 < 3) {\n    return piVar2;\n  }\n  do {\n    if (0 < iVar5) {\n      piVar3 = piVar2;\n      do {\n        iVar1 = *piVar3;\n        if (iVar4 < iVar1 * iVar1) break;\n        if (iVar4 % iVar1 == 0) goto LAB_00101786;\n        piVar3 = piVar3 + 1;\n      } while (piVar3 != piVar2 + (ulong)(iVar5 - 1) + 1);\n    }\n    piVar2[iVar5] = iVar4;\n    *param_2 = iVar5 + 1;\nLAB_00101786:\n    iVar4 = iVar4 + 1;\n    if (param_1 == iVar4) {\n      return piVar2;\n    }\n    iVar5 = *param_2;\n  } while( true );\n}"
    },
    {
        "task_id": 96,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(int param_1,int *param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  \n  piVar2 = (int *)malloc((long)param_1 << 2);\n  *param_2 = 0;\n  iVar6 = 0;\n  iVar5 = 2;\n  if (2 < param_1) {\n    do {\n      if (iVar6 != 0) {\n        piVar4 = piVar2;\n        do {\n          iVar1 = *piVar4;\n          if (iVar5 < iVar1 * iVar1) break;\n          if (iVar5 % iVar1 == 0) goto LAB_001016f6;\n          piVar4 = piVar4 + 1;\n        } while (piVar4 != piVar2 + (ulong)(iVar6 - 1) + 1);\n      }\n      lVar3 = (long)iVar6;\n      iVar6 = iVar6 + 1;\n      piVar2[lVar3] = iVar5;\n      *param_2 = iVar6;\nLAB_001016f6:\n      iVar5 = iVar5 + 1;\n    } while (param_1 != iVar5);\n  }\n  return piVar2;\n}"
    },
    {
        "task_id": 97,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint param_1,uint param_2)\n\n{\n  return ((int)(((int)param_1 >> 0x1f ^ param_1) - ((int)param_1 >> 0x1f)) % 10) *\n         ((int)(((int)param_2 >> 0x1f ^ param_2) - ((int)param_2 >> 0x1f)) % 10);\n}"
    },
    {
        "task_id": 97,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint param_1,uint param_2)\n\n{\n  return ((int)((param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f)) % 10) *\n         ((int)((param_2 ^ (int)param_2 >> 0x1f) - ((int)param_2 >> 0x1f)) % 10);\n}"
    },
    {
        "task_id": 97,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint param_1,uint param_2)\n\n{\n  return (((param_2 ^ (int)param_2 >> 0x1f) - ((int)param_2 >> 0x1f)) % 10) *\n         (((param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f)) % 10);\n}"
    },
    {
        "task_id": 97,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint param_1,uint param_2)\n\n{\n  return (((param_2 ^ (int)param_2 >> 0x1f) - ((int)param_2 >> 0x1f)) % 10) *\n         (((param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f)) % 10);\n}"
    },
    {
        "task_id": 98,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  int local_28;\n  int local_24;\n  \n  local_28 = 0;\n  local_24 = 0;\n  while( true ) {\n    if (param_1[local_24] == '\\0') {\n      return local_28;\n    }\n    sVar2 = strlen(param_1);\n    if (sVar2 <= (ulong)(long)(local_24 * 2)) break;\n    pcVar1 = strchr(\"AEIOU\",(int)param_1[local_24 * 2]);\n    if (pcVar1 != (char *)0x0) {\n      local_28 = local_28 + 1;\n    }\n    local_24 = local_24 + 1;\n  }\n  return local_28;\n}"
    },
    {
        "task_id": 98,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  char cVar1;\n  char *pcVar2;\n  ulong uVar3;\n  ulong uVar4;\n  int iVar5;\n  \n  if (*param_1 == '\\0') {\n    iVar5 = 0;\n  }\n  else {\n    uVar3 = 0xffffffffffffffff;\n    pcVar2 = param_1;\n    do {\n      if (uVar3 == 0) break;\n      uVar3 = uVar3 - 1;\n      cVar1 = *pcVar2;\n      pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    uVar4 = 0;\n    iVar5 = 0;\n    do {\n      if (uVar4 == ~uVar3 >> 1) {\n        return iVar5;\n      }\n      pcVar2 = strchr(\"AEIOU\",(int)param_1[uVar4 * 2]);\n      iVar5 = (iVar5 + 1) - (uint)(pcVar2 == (char *)0x0);\n      uVar4 = uVar4 + 1;\n    } while (param_1[uVar4] != '\\0');\n  }\n  return iVar5;\n}"
    },
    {
        "task_id": 98,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  ulong uVar3;\n  int iVar4;\n  \n  if (*param_1 == '\\0') {\n    iVar4 = 0;\n  }\n  else {\n    uVar3 = 0;\n    iVar4 = 0;\n    sVar1 = strlen(param_1);\n    do {\n      if (uVar3 == sVar1 + 1 >> 1) {\n        return iVar4;\n      }\n      pcVar2 = strchr(\"AEIOU\",(int)param_1[uVar3 * 2]);\n      iVar4 = (iVar4 + 1) - (uint)(pcVar2 == (char *)0x0);\n      uVar3 = uVar3 + 1;\n    } while (param_1[uVar3] != '\\0');\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 98,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  ulong uVar3;\n  int iVar4;\n  \n  if (*param_1 == '\\0') {\n    iVar4 = 0;\n  }\n  else {\n    uVar3 = 0;\n    iVar4 = 0;\n    sVar1 = strlen(param_1);\n    do {\n      if (sVar1 + 1 >> 1 == uVar3) {\n        return iVar4;\n      }\n      pcVar2 = strchr(\"AEIOU\",(int)param_1[uVar3 * 2]);\n      iVar4 = (iVar4 + 1) - (uint)(pcVar2 == (char *)0x0);\n      uVar3 = uVar3 + 1;\n    } while (param_1[uVar3] != '\\0');\n  }\n  return iVar4;\n}"
    },
    {
        "task_id": 99,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  double dVar1;\n  \n  dVar1 = atof(param_1);\n  if (0.0 <= dVar1) {\n    dVar1 = floor(DAT_001020a0 + dVar1);\n  }\n  else {\n    dVar1 = ceil(dVar1 - DAT_001020a0);\n  }\n  return (int)dVar1;\n}"
    },
    {
        "task_id": 99,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(param_1,(char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 = dVar1 - _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      dVar1 = (double)(~DAT_001020b0 & (ulong)dVar1 |\n                      (ulong)((double)(long)dVar1 +\n                             (double)(-(ulong)((double)(long)dVar1 < dVar1) & DAT_001020a8)));\n    }\n  }\n  else {\n    dVar1 = dVar1 + _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      dVar1 = (double)(~DAT_001020b0 & (ulong)dVar1 |\n                      (ulong)((double)(long)dVar1 -\n                             (double)(-(ulong)(dVar1 < (double)(long)dVar1) & DAT_001020a8)));\n    }\n  }\n  return (int)dVar1;\n}"
    },
    {
        "task_id": 99,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(param_1,(char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 = dVar1 - _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      return (int)(double)(~DAT_001020b0 & (ulong)dVar1 |\n                          (ulong)((double)(long)dVar1 +\n                                 (double)(-(ulong)((double)(long)dVar1 < dVar1) & DAT_001020a8)));\n    }\n  }\n  else {\n    dVar1 = dVar1 + _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      return (int)(double)(~DAT_001020b0 & (ulong)dVar1 |\n                          (ulong)((double)(long)dVar1 -\n                                 (double)(-(ulong)(dVar1 < (double)(long)dVar1) & DAT_001020a8)));\n    }\n  }\n  return (int)dVar1;\n}"
    },
    {
        "task_id": 99,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(char *param_1)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(param_1,(char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 = dVar1 - _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      return (int)(double)(~DAT_001020b0 & (ulong)dVar1 |\n                          (ulong)((double)(long)dVar1 +\n                                 (double)(-(ulong)((double)(long)dVar1 < dVar1) & DAT_001020a8)));\n    }\n  }\n  else {\n    dVar1 = dVar1 + _DAT_00102098;\n    if ((double)((ulong)dVar1 & DAT_001020b0) < DAT_001020a0) {\n      return (int)(double)(~DAT_001020b0 & (ulong)dVar1 |\n                          (ulong)((double)(long)dVar1 -\n                                 (double)(-(ulong)(dVar1 < (double)(long)dVar1) & DAT_001020a8)));\n    }\n  }\n  return (int)dVar1;\n}"
    },
    {
        "task_id": 100,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(int param_1)\n\n{\n  int *piVar1;\n  int local_14;\n  \n  piVar1 = (int *)malloc((long)param_1 << 2);\n  *piVar1 = param_1;\n  for (local_14 = 1; local_14 < param_1; local_14 = local_14 + 1) {\n    piVar1[local_14] = piVar1[(long)local_14 + -1] + 2;\n  }\n  return piVar1;\n}"
    },
    {
        "task_id": 100,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  int *piVar1;\n  int *piVar2;\n  \n  piVar2 = (int *)malloc((long)param_1 << 2);\n  *piVar2 = param_1;\n  if (1 < param_1) {\n    piVar1 = piVar2 + (ulong)(param_1 - 2) + 1;\n    do {\n      piVar2[1] = *piVar2 + 2;\n      piVar2 = piVar2 + 1;\n    } while (piVar2 != piVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 100,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint uVar3;\n  ulong uVar4;\n  \n  uVar4 = (ulong)(int)param_1;\n  puVar2 = (uint *)malloc(uVar4 << 2);\n  *puVar2 = param_1;\n  if (1 < (int)param_1) {\n    puVar1 = puVar2 + (ulong)(param_1 - 2) + 1;\n    do {\n      puVar2 = puVar2 + 1;\n      uVar3 = (int)uVar4 + 2;\n      uVar4 = (ulong)uVar3;\n      *puVar2 = uVar3;\n    } while (puVar2 != puVar1);\n  }\n  return;\n}"
    },
    {
        "task_id": 100,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  piVar1 = (int *)malloc((long)param_1 << 2);\n  *piVar1 = param_1;\n  if (1 < param_1) {\n    iVar2 = param_1 + 2;\n    do {\n      piVar1 = piVar1 + 1;\n      *piVar1 = iVar2;\n      iVar2 = iVar2 + 2;\n    } while (iVar2 != param_1 * 3);\n  }\n  return;\n}"
    },
    {
        "task_id": 101,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *__s;\n  char *pcVar3;\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  void *local_28;\n  \n  local_38 = 10;\n  local_28 = malloc(0x50);\n  sVar2 = strlen(param_1);\n  __s = (char *)malloc(sVar2 + 1);\n  local_34 = 0;\n  local_30 = 0;\n  for (local_2c = 0; param_1[local_2c] != '\\0'; local_2c = local_2c + 1) {\n    if ((param_1[local_2c] == ' ') || (param_1[local_2c] == ',')) {\n      if (0 < local_30) {\n        __s[local_30] = '\\0';\n        iVar1 = local_34 + 1;\n        pcVar3 = strdup(__s);\n        *(char **)((long)local_34 * 8 + (long)local_28) = pcVar3;\n        local_30 = 0;\n        local_34 = iVar1;\n        if (local_38 <= iVar1) {\n          local_38 = local_38 << 1;\n          local_28 = realloc(local_28,(long)local_38 * 8);\n        }\n      }\n    }\n    else {\n      __s[local_30] = param_1[local_2c];\n      local_30 = local_30 + 1;\n    }\n  }\n  if (0 < local_30) {\n    __s[local_30] = '\\0';\n    pcVar3 = strdup(__s);\n    *(char **)((long)local_34 * 8 + (long)local_28) = pcVar3;\n    local_34 = local_34 + 1;\n  }\n  free(__s);\n  *param_2 = local_34;\n  return local_28;\n}"
    },
    {
        "task_id": 101,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int *param_2)\n\n{\n  char cVar1;\n  void *__ptr;\n  char *pcVar2;\n  char *pcVar3;\n  char *pcVar4;\n  ulong uVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  byte bVar10;\n  \n  bVar10 = 0;\n  __ptr = malloc(0x50);\n  uVar5 = 0xffffffffffffffff;\n  pcVar2 = param_1;\n  do {\n    if (uVar5 == 0) break;\n    uVar5 = uVar5 - 1;\n    cVar1 = *pcVar2;\n    pcVar2 = pcVar2 + (ulong)bVar10 * -2 + 1;\n  } while (cVar1 != '\\0');\n  pcVar2 = (char *)malloc(~uVar5);\n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    iVar8 = 0;\n  }\n  else {\n    iVar6 = 0;\n    iVar7 = 0;\n    iVar8 = 10;\n    pcVar4 = param_1 + 1;\n    do {\n      if ((cVar1 == ' ') || (cVar1 == ',')) {\n        if (0 < iVar6) {\n          pcVar2[iVar6] = '\\0';\n          iVar9 = iVar7 + 1;\n          pcVar3 = strdup(pcVar2);\n          *(char **)((long)__ptr + (long)iVar7 * 8) = pcVar3;\n          iVar6 = 0;\n          iVar7 = iVar9;\n          if (iVar8 <= iVar9) {\n            iVar8 = iVar8 * 2;\n            __ptr = realloc(__ptr,(long)iVar8 << 3);\n            iVar6 = 0;\n          }\n        }\n      }\n      else {\n        pcVar2[iVar6] = cVar1;\n        iVar6 = iVar6 + 1;\n      }\n      cVar1 = *pcVar4;\n      pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    iVar8 = iVar7;\n    if (0 < iVar6) {\n      pcVar2[iVar6] = '\\0';\n      iVar8 = iVar7 + 1;\n      pcVar4 = strdup(pcVar2);\n      *(char **)((long)__ptr + (long)iVar7 * 8) = pcVar4;\n    }\n  }\n  free(pcVar2);\n  *param_2 = iVar8;\n  return __ptr;\n}"
    },
    {
        "task_id": 101,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,undefined4 *param_2)\n\n{\n  char cVar1;\n  void *__ptr;\n  size_t sVar2;\n  char *__s;\n  char *pcVar3;\n  char *pcVar4;\n  long lVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  ulong uVar9;\n  \n  __ptr = malloc(0x50);\n  sVar2 = strlen(param_1);\n  __s = (char *)malloc(sVar2 + 1);\n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    uVar9 = 0;\n  }\n  else {\n    iVar7 = 0;\n    uVar9 = 0;\n    iVar8 = 10;\n    pcVar4 = param_1 + 1;\nLAB_001016d5:\n    do {\n      if ((cVar1 == ' ') || (cVar1 == ',')) {\n        if (iVar7 != 0) {\n          __s[iVar7] = '\\0';\n          iVar6 = (int)uVar9 + 1;\n          pcVar3 = strdup(__s);\n          *(char **)((long)__ptr + uVar9 * 8) = pcVar3;\n          uVar9 = (ulong)iVar6;\n          iVar7 = 0;\n          if (iVar8 <= iVar6) {\n            iVar8 = iVar8 * 2;\n            __ptr = realloc(__ptr,(long)iVar8 << 3);\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\n            if (cVar1 == '\\0') break;\n            goto LAB_001016d5;\n          }\n        }\n      }\n      else {\n        lVar5 = (long)iVar7;\n        iVar7 = iVar7 + 1;\n        __s[lVar5] = cVar1;\n      }\n      cVar1 = *pcVar4;\n      pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    if (iVar7 != 0) {\n      __s[iVar7] = '\\0';\n      pcVar4 = strdup(__s);\n      *(char **)((long)__ptr + uVar9 * 8) = pcVar4;\n      uVar9 = (ulong)((int)uVar9 + 1);\n    }\n  }\n  free(__s);\n  *param_2 = (int)uVar9;\n  return __ptr;\n}"
    },
    {
        "task_id": 101,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,undefined4 *param_2)\n\n{\n  char cVar1;\n  void *__ptr;\n  size_t sVar2;\n  char *__s;\n  char *pcVar3;\n  char *pcVar4;\n  long lVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  ulong uVar9;\n  \n  __ptr = malloc(0x50);\n  sVar2 = strlen(param_1);\n  __s = (char *)malloc(sVar2 + 1);\n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    uVar9 = 0;\n  }\n  else {\n    iVar7 = 0;\n    uVar9 = 0;\n    iVar8 = 10;\n    pcVar4 = param_1 + 1;\nLAB_00101705:\n    do {\n      if ((cVar1 == ' ') || (cVar1 == ',')) {\n        if (iVar7 != 0) {\n          __s[iVar7] = '\\0';\n          iVar6 = (int)uVar9 + 1;\n          pcVar3 = strdup(__s);\n          *(char **)((long)__ptr + uVar9 * 8) = pcVar3;\n          uVar9 = (ulong)iVar6;\n          iVar7 = 0;\n          if (iVar8 <= iVar6) {\n            iVar8 = iVar8 * 2;\n            __ptr = realloc(__ptr,(long)iVar8 << 3);\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\n            if (cVar1 == '\\0') break;\n            goto LAB_00101705;\n          }\n        }\n      }\n      else {\n        lVar5 = (long)iVar7;\n        iVar7 = iVar7 + 1;\n        __s[lVar5] = cVar1;\n      }\n      cVar1 = *pcVar4;\n      pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    if (iVar7 != 0) {\n      __s[iVar7] = '\\0';\n      pcVar4 = strdup(__s);\n      *(char **)((long)__ptr + uVar9 * 8) = pcVar4;\n      uVar9 = (ulong)((int)uVar9 + 1);\n    }\n  }\n  free(__s);\n  *param_2 = (int)uVar9;\n  return __ptr;\n}"
    },
    {
        "task_id": 102,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  if (param_2 < param_1) {\n    param_2 = -1;\n  }\n  else if ((param_2 == param_1) && (param_2 % 2 == 1)) {\n    param_2 = -1;\n  }\n  else if (param_2 % 2 == 1) {\n    param_2 = param_2 + -1;\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 102,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  if (param_2 < param_1) {\n    return -1;\n  }\n  if (param_2 != param_1) {\n    return param_2 - (uint)(param_2 % 2 == 1);\n  }\n  if (param_2 % 2 == 1) {\n    param_2 = -1;\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 102,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  if (param_2 < param_1) {\n    return -1;\n  }\n  if (param_2 != param_1) {\n    return param_2 - (uint)(param_2 % 2 == 1);\n  }\n  if (param_2 % 2 == 1) {\n    param_2 = -1;\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 102,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1,int param_2)\n\n{\n  if (param_2 < param_1) {\n    return -1;\n  }\n  if (param_2 != param_1) {\n    return param_2 - (uint)(param_2 % 2 == 1);\n  }\n  if (param_2 % 2 == 1) {\n    param_2 = -1;\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 103,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(int param_1,int param_2)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined *puVar3;\n  int local_18;\n  int local_14;\n  \n  if (param_2 < param_1) {\n    puVar3 = &DAT_00102008;\n  }\n  else {\n    local_18 = (param_1 + param_2) / 2;\n    puVar3 = (undefined *)malloc(0x21);\n    *puVar3 = 0;\n    puVar3[0x20] = 0;\n    local_14 = 0x1f;\n    do {\n      cVar2 = (char)(local_18 >> 0x1f);\n      iVar1 = local_14 + -1;\n      puVar3[local_14] = ((char)local_18 - cVar2 & 1U) + cVar2 + '0';\n      local_18 = local_18 / 2;\n      local_14 = iVar1;\n    } while (0 < local_18);\n    puVar3 = puVar3 + (long)iVar1 + 1;\n  }\n  return puVar3;\n}"
    },
    {
        "task_id": 103,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(int param_1,int param_2)\n\n{\n  char cVar1;\n  long lVar2;\n  undefined *puVar3;\n  long lVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (param_2 < param_1) {\n    return &DAT_00102004;\n  }\n  iVar5 = (param_1 + param_2) - (param_1 + param_2 >> 0x1f);\n  puVar3 = (undefined *)malloc(0x21);\n  *puVar3 = 0;\n  puVar3[0x20] = 0;\n  lVar2 = 0x1e;\n  do {\n    lVar4 = lVar2;\n    iVar6 = iVar5 >> 1;\n    cVar1 = (char)(iVar5 >> 0x1f);\n    puVar3[lVar4 + 1] = ((char)iVar6 - cVar1 & 1U) + cVar1 + '0';\n    iVar5 = iVar6 - (iVar5 >> 0x1f);\n    lVar2 = lVar4 + -1;\n  } while (1 < iVar6);\n  return puVar3 + (long)(int)lVar4 + 1;\n}"
    },
    {
        "task_id": 103,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0_part_0(int param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  \n  iVar4 = (param_2 + param_1) - (param_2 + param_1 >> 0x1f);\n  puVar1 = (undefined *)malloc(0x21);\n  lVar3 = 0x1e;\n  *puVar1 = 0;\n  puVar1[0x20] = 0;\n  do {\n    iVar5 = iVar4 >> 1;\n    iVar2 = (int)lVar3;\n    puVar1[lVar3 + 1] = ((char)iVar5 + (char)-(iVar4 >> 0x1f) & 1U) + (char)(iVar4 >> 0x1f) + '0';\n    lVar3 = lVar3 + -1;\n    iVar4 = -(iVar4 >> 0x1f) + iVar5;\n  } while (1 < iVar5);\n  return puVar1 + (long)iVar2 + 1;\n}\n\n// Function: func0\nundefined * func0(int param_1,int param_2)\n\n{\n  undefined *puVar1;\n  \n  if (param_2 < param_1) {\n    return &DAT_00102004;\n  }\n  puVar1 = (undefined *)func0_part_0();\n  return puVar1;\n}"
    },
    {
        "task_id": 103,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0_part_0(int param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  \n  iVar4 = (param_2 + param_1) - (param_2 + param_1 >> 0x1f);\n  puVar1 = (undefined *)malloc(0x21);\n  lVar3 = 0x1e;\n  *puVar1 = 0;\n  puVar1[0x20] = 0;\n  do {\n    iVar5 = iVar4 >> 1;\n    iVar2 = (int)lVar3;\n    puVar1[lVar3 + 1] = ((char)iVar5 + (char)-(iVar4 >> 0x1f) & 1U) + (char)(iVar4 >> 0x1f) + '0';\n    lVar3 = lVar3 + -1;\n    iVar4 = -(iVar4 >> 0x1f) + iVar5;\n  } while (1 < iVar5);\n  return puVar1 + (long)iVar2 + 1;\n}\n\n// Function: func0\nundefined * func0(int param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  long lVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < param_1) {\n    return &DAT_00102004;\n  }\n  iVar4 = (param_1 + param_2) - (param_1 + param_2 >> 0x1f);\n  puVar1 = (undefined *)malloc(0x21);\n  lVar3 = 0x1e;\n  *puVar1 = 0;\n  puVar1[0x20] = 0;\n  do {\n    iVar5 = iVar4 >> 1;\n    iVar2 = (int)lVar3;\n    puVar1[lVar3 + 1] = ((char)iVar5 + (char)-(iVar4 >> 0x1f) & 1U) + (char)(iVar4 >> 0x1f) + '0';\n    lVar3 = lVar3 + -1;\n    iVar4 = -(iVar4 >> 0x1f) + iVar5;\n  } while (1 < iVar5);\n  return puVar1 + (long)iVar2 + 1;\n}"
    },
    {
        "task_id": 104,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,void **param_3,int *param_4)\n\n{\n  undefined4 uVar1;\n  bool bVar2;\n  void *pvVar3;\n  int local_1c;\n  uint local_18;\n  int local_14;\n  int local_10;\n  \n  pvVar3 = malloc((long)param_2 << 2);\n  *param_3 = pvVar3;\n  *param_4 = 0;\n  for (local_1c = 0; local_1c < param_2; local_1c = local_1c + 1) {\n    local_18 = *(uint *)(param_1 + (long)local_1c * 4);\n    bVar2 = false;\n    if (local_18 == 0) {\n      bVar2 = true;\n    }\n    while ((0 < (int)local_18 && (!bVar2))) {\n      if ((local_18 & 1) == 0) {\n        bVar2 = true;\n      }\n      local_18 = (int)local_18 / 10;\n    }\n    if (!bVar2) {\n      *(undefined4 *)((long)*param_3 + (long)*param_4 * 4) =\n           *(undefined4 *)((long)local_1c * 4 + param_1);\n      *param_4 = *param_4 + 1;\n    }\n  }\n  for (local_14 = 0; local_14 < *param_4 + -1; local_14 = local_14 + 1) {\n    for (local_10 = 0; local_10 < (*param_4 - local_14) + -1; local_10 = local_10 + 1) {\n      if (*(int *)((long)*param_3 + ((long)local_10 + 1) * 4) <\n          *(int *)((long)*param_3 + (long)local_10 * 4)) {\n        uVar1 = *(undefined4 *)((long)*param_3 + (long)local_10 * 4);\n        *(undefined4 *)((long)local_10 * 4 + (long)*param_3) =\n             *(undefined4 *)((long)*param_3 + ((long)local_10 + 1) * 4);\n        *(undefined4 *)(((long)local_10 + 1) * 4 + (long)*param_3) = uVar1;\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 104,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int *piVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  bool bVar5;\n  void *pvVar6;\n  long lVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  pvVar6 = malloc((long)param_2 << 2);\n  *param_3 = pvVar6;\n  *param_4 = 0;\n  if (0 < param_2) {\n    puVar2 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      uVar10 = *param_1;\n      uVar9 = uVar10;\n      if ((int)uVar10 < 1) {\n        if (uVar10 != 0) goto LAB_00101227;\n      }\n      else {\n        do {\n          if ((uVar9 & 1) == 0) goto LAB_00101212;\n          bVar5 = 9 < (int)uVar9;\n          uVar9 = (int)uVar9 / 10;\n        } while (bVar5);\nLAB_00101227:\n        *(uint *)((long)*param_3 + (long)*param_4 * 4) = uVar10;\n        *param_4 = *param_4 + 1;\n      }\nLAB_00101212:\n      param_1 = param_1 + 1;\n    } while (puVar2 != param_1);\n    if (1 < *param_4) {\n      uVar10 = 0;\n      do {\n        lVar7 = 0;\n        iVar8 = 0;\n        if (1 < (int)(*param_4 - uVar10)) {\n          do {\n            piVar1 = (int *)((long)*param_3 + lVar7);\n            iVar3 = *piVar1;\n            lVar7 = lVar7 + 4;\n            iVar4 = *(int *)((long)*param_3 + lVar7);\n            if (iVar4 < iVar3) {\n              *piVar1 = iVar4;\n              *(int *)((long)*param_3 + lVar7) = iVar3;\n            }\n            iVar8 = iVar8 + 1;\n          } while (iVar8 < (int)(~uVar10 + *param_4));\n        }\n        uVar10 = uVar10 + 1;\n      } while ((int)uVar10 < *param_4 + -1);\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 104,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2,int **param_3,int *param_4)\n\n{\n  uint *puVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  ulong uVar5;\n  int *piVar6;\n  long lVar7;\n  byte bVar8;\n  int iVar9;\n  \n  piVar2 = (int *)malloc((long)param_2 << 2);\n  *param_3 = piVar2;\n  *param_4 = 0;\n  if (0 < param_2) {\n    iVar9 = 0;\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      while (uVar3 = *param_1, uVar3 == 0) {\nLAB_001014f6:\n        param_1 = param_1 + 1;\n        if (param_1 == puVar1) goto LAB_001014ff;\n      }\n      if (0 < (int)uVar3) {\n        uVar5 = (ulong)uVar3;\n        do {\n          iVar4 = (int)uVar5;\n          bVar8 = ~(byte)uVar5 & 1;\n          uVar5 = uVar5 / 10;\n          if (iVar4 < 10) {\n            if (bVar8 == 0) goto LAB_00101555;\n            break;\n          }\n        } while (bVar8 == 0);\n        goto LAB_001014f6;\n      }\nLAB_00101555:\n      lVar7 = (long)iVar9;\n      param_1 = param_1 + 1;\n      iVar9 = iVar9 + 1;\n      piVar2[lVar7] = uVar3;\n      *param_4 = iVar9;\n    } while (param_1 != puVar1);\nLAB_001014ff:\n    uVar3 = iVar9 - 1;\n    if (0 < (int)uVar3) {\n      do {\n        uVar3 = uVar3 - 1;\n        piVar6 = piVar2;\n        do {\n          iVar9 = *piVar6;\n          if (piVar6[1] < iVar9) {\n            *piVar6 = piVar6[1];\n            piVar6[1] = iVar9;\n          }\n          piVar6 = piVar6 + 1;\n        } while (piVar2 + (ulong)uVar3 + 1 != piVar6);\n      } while (uVar3 != 0);\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 104,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2,int **param_3,int *param_4)\n\n{\n  uint *puVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  ulong uVar5;\n  int *piVar6;\n  long lVar7;\n  byte bVar8;\n  int iVar9;\n  \n  piVar2 = (int *)malloc((long)param_2 << 2);\n  *param_3 = piVar2;\n  *param_4 = 0;\n  if (0 < param_2) {\n    iVar9 = 0;\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      while (uVar3 = *param_1, uVar3 == 0) {\nLAB_001014c6:\n        param_1 = param_1 + 1;\n        if (puVar1 == param_1) goto LAB_001014cf;\n      }\n      if (0 < (int)uVar3) {\n        uVar5 = (ulong)uVar3;\n        do {\n          iVar4 = (int)uVar5;\n          bVar8 = ~(byte)uVar5 & 1;\n          uVar5 = uVar5 / 10;\n          if (iVar4 < 10) {\n            if (bVar8 == 0) goto LAB_00101525;\n            break;\n          }\n        } while (bVar8 == 0);\n        goto LAB_001014c6;\n      }\nLAB_00101525:\n      lVar7 = (long)iVar9;\n      param_1 = param_1 + 1;\n      iVar9 = iVar9 + 1;\n      piVar2[lVar7] = uVar3;\n      *param_4 = iVar9;\n    } while (puVar1 != param_1);\nLAB_001014cf:\n    uVar3 = iVar9 - 1;\n    if (0 < (int)uVar3) {\n      do {\n        uVar3 = uVar3 - 1;\n        piVar6 = piVar2;\n        do {\n          iVar9 = *piVar6;\n          if (piVar6[1] < iVar9) {\n            *piVar6 = piVar6[1];\n            piVar6[1] = iVar9;\n          }\n          piVar6 = piVar6 + 1;\n        } while (piVar2 + (ulong)uVar3 + 1 != piVar6);\n      } while (uVar3 != 0);\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 105,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,void **param_3,int *param_4)\n\n{\n  undefined4 uVar1;\n  void *pvVar2;\n  long in_FS_OFFSET;\n  int local_74;\n  int local_70;\n  char *local_68 [4];\n  undefined *local_48;\n  undefined *local_40;\n  undefined *local_38;\n  char *local_30;\n  char *local_28;\n  undefined *local_20;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_68[0] = \"\";\n  local_68[1] = &DAT_00102009;\n  local_68[2] = &DAT_0010200d;\n  local_68[3] = \"Three\";\n  local_48 = &DAT_00102017;\n  local_40 = &DAT_0010201c;\n  local_38 = &DAT_00102021;\n  local_30 = \"Seven\";\n  local_28 = \"Eight\";\n  local_20 = &DAT_00102031;\n  for (local_74 = 0; local_74 < param_2 + -1; local_74 = local_74 + 1) {\n    for (local_70 = 0; local_70 < (param_2 - local_74) + -1; local_70 = local_70 + 1) {\n      if (*(int *)(param_1 + ((long)local_70 + 1) * 4) < *(int *)(param_1 + (long)local_70 * 4)) {\n        uVar1 = *(undefined4 *)(param_1 + (long)local_70 * 4);\n        *(undefined4 *)(param_1 + (long)local_70 * 4) =\n             *(undefined4 *)(param_1 + ((long)local_70 + 1) * 4);\n        *(undefined4 *)(((long)local_70 + 1) * 4 + param_1) = uVar1;\n      }\n    }\n  }\n  *param_4 = 0;\n  for (local_74 = param_2 + -1; -1 < local_74; local_74 = local_74 + -1) {\n    if ((0 < *(int *)(param_1 + (long)local_74 * 4)) &&\n       (*(int *)(param_1 + (long)local_74 * 4) < 10)) {\n      *param_4 = *param_4 + 1;\n    }\n  }\n  pvVar2 = malloc((long)*param_4 << 3);\n  *param_3 = pvVar2;\n  local_74 = param_2 + -1;\n  local_70 = 0;\n  while ((-1 < local_74 && (local_70 < *param_4))) {\n    if ((0 < *(int *)(param_1 + (long)local_74 * 4)) &&\n       (*(int *)(param_1 + (long)local_74 * 4) < 10)) {\n      *(char **)((long)*param_3 + (long)local_70 * 8) =\n           local_68[*(int *)(param_1 + (long)local_74 * 4)];\n      local_70 = local_70 + 1;\n    }\n    local_74 = local_74 + -1;\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 105,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  void *pvVar4;\n  int iVar5;\n  long lVar6;\n  long in_FS_OFFSET;\n  char *local_88 [11];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"\";\n  local_88[1] = &DAT_00102004;\n  local_88[2] = &DAT_00102008;\n  local_88[3] = \"Three\";\n  local_88[4] = &DAT_00102012;\n  local_88[5] = &DAT_00102017;\n  local_88[6] = &DAT_0010201c;\n  local_88[7] = \"Seven\";\n  local_88[8] = \"Eight\";\n  local_88[9] = &DAT_0010202c;\n  param_2 = param_2 + -1;\n  iVar5 = param_2;\n  if (param_2 < 1) {\n    *param_4 = 0;\n    if (param_2 != 0) {\n      pvVar4 = malloc(0);\n      *param_3 = pvVar4;\n      goto LAB_001012c5;\n    }\n  }\n  else {\n    do {\n      if (0 < iVar5) {\n        piVar2 = param_1;\n        do {\n          iVar1 = *piVar2;\n          if (piVar2[1] < iVar1) {\n            *piVar2 = piVar2[1];\n            piVar2[1] = iVar1;\n          }\n          piVar2 = piVar2 + 1;\n        } while (piVar2 != param_1 + (ulong)(iVar5 - 1) + 1);\n      }\n      iVar5 = iVar5 + -1;\n    } while (iVar5 != 0);\n    *param_4 = 0;\n  }\n  lVar6 = (long)param_2;\n  lVar3 = lVar6;\n  do {\n    if (param_1[lVar3] - 1U < 9) {\n      *param_4 = *param_4 + 1;\n    }\n    lVar3 = lVar3 + -1;\n  } while (-1 < (int)lVar3);\n  pvVar4 = malloc((long)*param_4 << 3);\n  *param_3 = pvVar4;\n  iVar5 = 0;\n  do {\n    if (*param_4 <= iVar5) break;\n    if (param_1[lVar6] - 1U < 9) {\n      *(char **)((long)*param_3 + (long)iVar5 * 8) = local_88[param_1[lVar6]];\n      iVar5 = iVar5 + 1;\n    }\n    lVar6 = lVar6 + -1;\n  } while (-1 < (int)lVar6);\nLAB_001012c5:\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 105,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int *piVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  long lVar7;\n  uint uVar8;\n  long in_FS_OFFSET;\n  char *local_88 [4];\n  undefined *local_68;\n  undefined *local_60;\n  undefined *local_58;\n  char *local_50;\n  char *local_48;\n  undefined *local_40;\n  long local_30;\n  \n  uVar6 = param_2 - 1;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"\";\n  local_88[1] = &DAT_00102004;\n  local_88[2] = &DAT_00102008;\n  local_88[3] = \"Three\";\n  local_68 = &DAT_00102012;\n  local_60 = &DAT_00102017;\n  local_58 = &DAT_0010201c;\n  local_50 = \"Seven\";\n  local_48 = \"Eight\";\n  local_40 = &DAT_0010202c;\n  uVar8 = uVar6;\n  if ((int)uVar6 < 1) {\n    *param_4 = 0;\n    if (uVar6 != 0) {\n      pvVar3 = malloc(0);\n      *param_3 = pvVar3;\n      goto LAB_00101747;\n    }\n  }\n  else {\n    do {\n      uVar8 = uVar8 - 1;\n      piVar1 = param_1;\n      do {\n        iVar4 = *piVar1;\n        if (piVar1[1] < iVar4) {\n          *piVar1 = piVar1[1];\n          piVar1[1] = iVar4;\n        }\n        piVar1 = piVar1 + 1;\n      } while (param_1 + (ulong)uVar8 + 1 != piVar1);\n    } while (uVar8 != 0);\n    *param_4 = 0;\n  }\n  lVar7 = (long)(int)uVar6;\n  iVar4 = 0;\n  lVar2 = lVar7;\n  do {\n    if (param_1[lVar2] - 1U < 9) {\n      iVar4 = iVar4 + 1;\n      *param_4 = iVar4;\n    }\n    lVar2 = lVar2 + -1;\n  } while (-1 < (int)lVar2);\n  pvVar3 = malloc((long)iVar4 * 8);\n  iVar4 = *param_4;\n  iVar5 = 0;\n  *param_3 = pvVar3;\n  do {\n    if (iVar4 <= iVar5) break;\n    if (param_1[lVar7] - 1U < 9) {\n      lVar2 = (long)iVar5;\n      iVar5 = iVar5 + 1;\n      *(char **)((long)pvVar3 + lVar2 * 8) = local_88[param_1[lVar7]];\n    }\n    lVar7 = lVar7 + -1;\n  } while (-1 < (int)lVar7);\nLAB_00101747:\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 105,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n\n{\n  int *piVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  long lVar7;\n  uint uVar8;\n  long in_FS_OFFSET;\n  char *local_88 [4];\n  undefined *local_68;\n  undefined *puStack_60;\n  undefined *local_58;\n  char *pcStack_50;\n  char *local_48;\n  undefined *puStack_40;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"\";\n  local_88[1] = &DAT_00102004;\n  local_88[2] = &DAT_00102008;\n  local_88[3] = \"Three\";\n  local_68 = &DAT_00102012;\n  puStack_60 = &DAT_00102017;\n  local_58 = &DAT_0010201c;\n  pcStack_50 = \"Seven\";\n  uVar6 = param_2 - 1;\n  local_48 = \"Eight\";\n  puStack_40 = &DAT_0010202c;\n  uVar8 = uVar6;\n  if ((int)uVar6 < 1) {\n    *param_4 = 0;\n    if (uVar6 != 0) {\n      pvVar3 = malloc(0);\n      *param_3 = pvVar3;\n      goto LAB_00101737;\n    }\n  }\n  else {\n    do {\n      uVar8 = uVar8 - 1;\n      piVar1 = param_1;\n      do {\n        iVar4 = *piVar1;\n        if (piVar1[1] < iVar4) {\n          *piVar1 = piVar1[1];\n          piVar1[1] = iVar4;\n        }\n        piVar1 = piVar1 + 1;\n      } while (piVar1 != param_1 + (ulong)uVar8 + 1);\n    } while (uVar8 != 0);\n    *param_4 = 0;\n  }\n  lVar7 = (long)(int)uVar6;\n  iVar4 = 0;\n  lVar2 = lVar7;\n  do {\n    if (param_1[lVar2] - 1U < 9) {\n      iVar4 = iVar4 + 1;\n      *param_4 = iVar4;\n    }\n    lVar2 = lVar2 + -1;\n  } while (-1 < (int)lVar2);\n  pvVar3 = malloc((long)iVar4 * 8);\n  iVar4 = *param_4;\n  iVar5 = 0;\n  *param_3 = pvVar3;\n  do {\n    if (iVar4 <= iVar5) break;\n    if (param_1[lVar7] - 1U < 9) {\n      lVar2 = (long)iVar5;\n      iVar5 = iVar5 + 1;\n      *(char **)((long)pvVar3 + lVar2 * 8) = local_88[param_1[lVar7]];\n    }\n    lVar7 = lVar7 + -1;\n  } while (-1 < (int)lVar7);\nLAB_00101737:\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 106,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(int param_1)\n\n{\n  void *pvVar1;\n  int local_1c;\n  int local_18;\n  uint local_14;\n  \n  pvVar1 = malloc((long)param_1 << 2);\n  local_1c = 0;\n  local_18 = 1;\n  for (local_14 = 1; (int)local_14 <= param_1; local_14 = local_14 + 1) {\n    local_1c = local_1c + local_14;\n    local_18 = local_18 * local_14;\n    if ((local_14 & 1) == 0) {\n      *(int *)((long)(int)local_14 * 4 + -4 + (long)pvVar1) = local_18;\n    }\n    else {\n      *(int *)((long)(int)local_14 * 4 + -4 + (long)pvVar1) = local_1c;\n    }\n  }\n  return pvVar1;\n}"
    },
    {
        "task_id": 106,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  void *pvVar1;\n  int iVar2;\n  ulong uVar3;\n  int iVar4;\n  int iVar5;\n  \n  pvVar1 = malloc((long)param_1 << 2);\n  if (0 < param_1) {\n    uVar3 = 1;\n    iVar4 = 1;\n    iVar2 = 0;\n    do {\n      iVar2 = iVar2 + (int)uVar3;\n      iVar4 = iVar4 * (int)uVar3;\n      iVar5 = iVar4;\n      if ((uVar3 & 1) != 0) {\n        iVar5 = iVar2;\n      }\n      *(int *)((long)pvVar1 + uVar3 * 4 + -4) = iVar5;\n      uVar3 = uVar3 + 1;\n    } while (uVar3 != (ulong)(param_1 - 1) + 2);\n  }\n  return;\n}"
    },
    {
        "task_id": 106,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  void *pvVar1;\n  int iVar2;\n  ulong uVar3;\n  int iVar4;\n  int iVar5;\n  \n  pvVar1 = malloc((long)param_1 << 2);\n  if (0 < param_1) {\n    uVar3 = 1;\n    iVar4 = 1;\n    iVar2 = 0;\n    do {\n      iVar4 = iVar4 * (int)uVar3;\n      iVar2 = iVar2 + (int)uVar3;\n      iVar5 = iVar4;\n      if ((uVar3 & 1) != 0) {\n        iVar5 = iVar2;\n      }\n      *(int *)((long)pvVar1 + uVar3 * 4 + -4) = iVar5;\n      uVar3 = uVar3 + 1;\n    } while (uVar3 != (ulong)(param_1 - 1) + 2);\n  }\n  return;\n}"
    },
    {
        "task_id": 106,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  void *pvVar1;\n  int iVar2;\n  ulong uVar3;\n  int iVar4;\n  int iVar5;\n  \n  pvVar1 = malloc((long)param_1 << 2);\n  if (0 < param_1) {\n    uVar3 = 1;\n    iVar4 = 1;\n    iVar2 = 0;\n    do {\n      iVar4 = iVar4 * (int)uVar3;\n      iVar2 = iVar2 + (int)uVar3;\n      iVar5 = iVar4;\n      if ((uVar3 & 1) != 0) {\n        iVar5 = iVar2;\n      }\n      *(int *)((long)pvVar1 + uVar3 * 4 + -4) = iVar5;\n      uVar3 = uVar3 + 1;\n    } while (uVar3 != (ulong)(param_1 - 1) + 2);\n  }\n  return;\n}"
    },
    {
        "task_id": 107,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "int * func0(int param_1)\n\n{\n  int *piVar1;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  \n  piVar1 = (int *)malloc(8);\n  *piVar1 = 0;\n  piVar1[1] = 0;\n  for (local_20 = 1; (int)local_20 <= param_1; local_20 = local_20 + 1) {\n    local_1c = 0;\n    for (local_18 = local_20; local_18 != 0; local_18 = (int)local_18 / 10) {\n      local_1c = local_1c * 10 + (int)local_18 % 10;\n    }\n    if (local_20 == local_1c) {\n      if ((local_20 & 1) == 0) {\n        *piVar1 = *piVar1 + 1;\n      }\n      else {\n        piVar1[1] = piVar1[1] + 1;\n      }\n    }\n  }\n  return piVar1;\n}"
    },
    {
        "task_id": 107,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int *piVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  piVar3 = (int *)malloc(8);\n  *piVar3 = 0;\n  piVar3[1] = 0;\n  if (0 < param_1) {\n    uVar5 = 1;\n    do {\n      uVar4 = 0;\n      uVar2 = uVar5;\n      if (uVar5 == 0) {\nLAB_001011dd:\n        *piVar3 = *piVar3 + 1;\n      }\n      else {\n        do {\n          uVar1 = (int)uVar2 / 10;\n          uVar4 = (int)uVar2 % 10 + uVar4 * 10;\n          uVar2 = uVar1;\n        } while (uVar1 != 0);\n        if (uVar4 == uVar5) {\n          if ((uVar5 & 1) == 0) goto LAB_001011dd;\n          piVar3[1] = piVar3[1] + 1;\n        }\n      }\n      uVar5 = uVar5 + 1;\n    } while (param_1 + 1U != uVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 107,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  undefined8 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  puVar1 = (undefined8 *)malloc(8);\n  *puVar1 = 0;\n  if (0 < param_1) {\n    uVar4 = 1;\n    do {\n      uVar3 = 0;\n      uVar2 = uVar4;\n      do {\n        uVar3 = uVar2 % 10 + uVar3 * 10;\n        uVar2 = uVar2 / 10;\n      } while (uVar2 != 0);\n      if (uVar4 == uVar3) {\n        if ((uVar4 & 1) == 0) {\n          *(int *)puVar1 = *(int *)puVar1 + 1;\n        }\n        else {\n          *(int *)((long)puVar1 + 4) = *(int *)((long)puVar1 + 4) + 1;\n        }\n      }\n      uVar4 = uVar4 + 1;\n    } while (param_1 + 1U != uVar4);\n  }\n  return;\n}"
    },
    {
        "task_id": 107,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  undefined8 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  puVar1 = (undefined8 *)malloc(8);\n  *puVar1 = 0;\n  if (0 < param_1) {\n    uVar4 = 1;\n    do {\n      uVar3 = 0;\n      uVar2 = uVar4;\n      do {\n        uVar3 = uVar2 % 10 + uVar3 * 10;\n        uVar2 = uVar2 / 10;\n      } while (uVar2 != 0);\n      if (uVar4 == uVar3) {\n        if ((uVar4 & 1) == 0) {\n          *(int *)puVar1 = *(int *)puVar1 + 1;\n        }\n        else {\n          *(int *)((long)puVar1 + 4) = *(int *)((long)puVar1 + 4) + 1;\n        }\n      }\n      uVar4 = uVar4 + 1;\n    } while (uVar4 != param_1 + 1U);\n  }\n  return;\n}"
    },
    {
        "task_id": 108,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int local_18;\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_18 = 0;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    if (*(int *)(param_1 + (long)local_14 * 4) < 1) {\n      local_10 = 0;\n      uVar1 = *(uint *)(param_1 + (long)local_14 * 4);\n      uVar2 = (int)uVar1 >> 0x1f;\n      for (local_c = (uVar1 ^ uVar2) - uVar2; 9 < local_c; local_c = local_c / 10) {\n        local_10 = local_10 + local_c % 10;\n      }\n      if (0 < local_10 - local_c) {\n        local_18 = local_18 + 1;\n      }\n    }\n    else {\n      local_18 = local_18 + 1;\n    }\n  }\n  return local_18;\n}"
    },
    {
        "task_id": 108,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  bool bVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (param_2 < 1) {\n    iVar7 = 0;\n  }\n  else {\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar7 = 0;\n    do {\n      uVar2 = *param_1;\n      if ((int)uVar2 < 1) {\n        iVar5 = (uVar2 ^ (int)uVar2 >> 0x1f) - ((int)uVar2 >> 0x1f);\n        if (9 < iVar5) {\n          iVar6 = 0;\n          do {\n            iVar4 = iVar5 / 10;\n            iVar6 = iVar6 + iVar5 % 10;\n            bVar3 = 99 < iVar5;\n            iVar5 = iVar4;\n          } while (bVar3);\n          iVar7 = iVar7 + (uint)(0 < iVar6 - iVar4);\n        }\n      }\n      else {\n        iVar7 = iVar7 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n  }\n  return iVar7;\n}"
    },
    {
        "task_id": 108,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  bool bVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (0 < param_2) {\n    iVar7 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar2 = *param_1;\n      if (iVar2 < 1) {\n        if (iVar2 < -9) {\n          iVar6 = 0;\n          uVar5 = -iVar2;\n          do {\n            uVar4 = uVar5 / 10;\n            iVar6 = iVar6 + uVar5 % 10;\n            bVar3 = 99 < (int)uVar5;\n            uVar5 = uVar4;\n          } while (bVar3);\n          iVar7 = iVar7 + (uint)(0 < (int)(iVar6 - uVar4));\n        }\n      }\n      else {\n        iVar7 = iVar7 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n    return iVar7;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 108,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  bool bVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  int iVar7;\n  \n  if (0 < param_2) {\n    iVar7 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar2 = *param_1;\n      if (iVar2 < 1) {\n        if (iVar2 < -9) {\n          iVar6 = 0;\n          uVar5 = -iVar2;\n          do {\n            uVar4 = uVar5 / 10;\n            iVar6 = iVar6 + uVar5 % 10;\n            bVar3 = 99 < (int)uVar5;\n            uVar5 = uVar4;\n          } while (bVar3);\n          iVar7 = iVar7 + (uint)(0 < (int)(iVar6 - uVar4));\n        }\n      }\n      else {\n        iVar7 = iVar7 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (piVar1 != param_1);\n    return iVar7;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 109,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(int *param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  if (param_2 == 0) {\n    uVar1 = 1;\n  }\n  else {\n    for (local_c = 1; local_c < param_2; local_c = local_c + 1) {\n      if (param_1[local_c] < param_1[(long)local_c + -1]) {\n        local_10 = local_10 + 1;\n      }\n    }\n    if (*param_1 < param_1[(long)param_2 + -1]) {\n      local_10 = local_10 + 1;\n    }\n    if (local_10 < 2) {\n      uVar1 = 1;\n    }\n    else {\n      uVar1 = 0;\n    }\n  }\n  return uVar1;\n}"
    },
    {
        "task_id": 109,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(int *param_1,int param_2)\n\n{\n  bool bVar1;\n  int *piVar2;\n  int iVar3;\n  \n  bVar1 = true;\n  if (param_2 != 0) {\n    if (param_2 < 2) {\n      iVar3 = 0;\n    }\n    else {\n      iVar3 = 0;\n      piVar2 = param_1;\n      do {\n        iVar3 = iVar3 + (uint)(piVar2[1] < *piVar2);\n        piVar2 = piVar2 + 1;\n      } while (piVar2 != param_1 + (ulong)(param_2 - 2) + 1);\n    }\n    bVar1 = (int)(iVar3 + (uint)(*param_1 < param_1[(long)param_2 + -1])) < 2;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 109,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0_part_0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int *piVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    iVar4 = 0;\n  }\n  else {\n    iVar4 = 0;\n    piVar3 = param_1;\n    do {\n      iVar2 = *piVar3;\n      piVar1 = piVar3 + 1;\n      piVar3 = piVar3 + 1;\n      iVar4 = iVar4 + (uint)(*piVar1 < iVar2);\n    } while (piVar3 != param_1 + (ulong)(param_2 - 2) + 1);\n  }\n  return (int)(iVar4 + (uint)(*param_1 < param_1[(long)param_2 + -1])) < 2;\n}\n\n// Function: func0\nundefined8 func0(undefined8 param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  \n  if (param_2 != 0) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 109,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0_part_0(int *param_1,int param_2)\n\n{\n  uint uVar1;\n  int *piVar2;\n  int *piVar3;\n  int *piVar4;\n  int *piVar5;\n  int *piVar6;\n  int *piVar7;\n  int *piVar8;\n  int *piVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  \n  if (param_2 < 2) {\n    iVar11 = 0;\n  }\n  else {\n    uVar1 = param_2 - 1;\n    if (param_2 - 2U < 3) {\n      iVar11 = 0;\n      iVar10 = 1;\n    }\n    else {\n      iVar11 = 0;\n      iVar12 = 0;\n      iVar13 = 0;\n      iVar14 = 0;\n      piVar9 = param_1;\n      do {\n        iVar10 = *piVar9;\n        piVar3 = piVar9 + 1;\n        piVar4 = piVar9 + 2;\n        piVar5 = piVar9 + 3;\n        piVar2 = piVar9 + 1;\n        piVar6 = piVar9 + 2;\n        piVar7 = piVar9 + 3;\n        piVar8 = piVar9 + 4;\n        piVar9 = piVar9 + 4;\n        iVar11 = iVar11 + (uint)(*piVar2 < iVar10);\n        iVar12 = iVar12 + (uint)(*piVar6 < *piVar3);\n        iVar13 = iVar13 + (uint)(*piVar7 < *piVar4);\n        iVar14 = iVar14 + (uint)(*piVar8 < *piVar5);\n      } while (piVar9 != param_1 + (ulong)(uVar1 >> 2) * 4);\n      iVar10 = (uVar1 & 0xfffffffc) + 1;\n      iVar11 = iVar11 + iVar13 + iVar12 + iVar14;\n      if (uVar1 == (uVar1 & 0xfffffffc)) goto LAB_001013f2;\n    }\n    iVar12 = iVar10;\n    if ((iVar10 + 1 < (int)uVar1) && (iVar10 < param_2)) {\n      iVar12 = param_1[iVar10];\n      iVar11 = iVar11 + (uint)(iVar12 < (param_1 + iVar10)[-1]) +\n               (uint)(param_1[(long)iVar10 + 1] < iVar12);\n      iVar13 = iVar10 + 2;\n      iVar12 = iVar13;\n      if (iVar10 + 3 < (int)uVar1) {\n        iVar11 = iVar11 + (uint)(param_1[iVar13] < param_1[(long)iVar10 + 1]) +\n                 (uint)(param_1[(long)iVar13 + 1] < param_1[iVar13]);\n        iVar12 = iVar10 + 4;\n        if (iVar10 + 5 < (int)uVar1) {\n          iVar11 = iVar11 + (uint)(param_1[iVar12] < param_1[(long)iVar13 + 1]);\n          if (param_1[(long)iVar12 + 1] < param_1[iVar12]) {\n            iVar11 = iVar11 + 1;\n          }\n          iVar12 = iVar10 + 6;\n        }\n      }\n    }\n    if (param_1[iVar12] < param_1[(long)iVar12 + -1]) {\n      iVar11 = iVar11 + 1;\n    }\n    iVar10 = iVar12 + 1;\n    if (iVar10 < param_2) {\n      if (param_1[iVar10] < param_1[(long)iVar10 + -1]) {\n        iVar11 = iVar11 + 1;\n      }\n      iVar12 = iVar12 + 2;\n      if ((iVar12 < param_2) && (param_1[iVar12] < param_1[(long)iVar12 + -1])) {\n        iVar11 = iVar11 + 1;\n      }\n    }\n  }\nLAB_001013f2:\n  iVar11 = iVar11 + (uint)(*param_1 < param_1[(long)param_2 + -1]);\n  return CONCAT31((int3)((uint)iVar11 >> 8),iVar11 < 2);\n}\n\n// Function: func0\nundefined4 func0(int *param_1,int param_2)\n\n{\n  uint uVar1;\n  int *piVar2;\n  int *piVar3;\n  int *piVar4;\n  int *piVar5;\n  int *piVar6;\n  int *piVar7;\n  int *piVar8;\n  int *piVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  \n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_2 < 2) {\n    iVar11 = 0;\n  }\n  else {\n    uVar1 = param_2 - 1;\n    if (param_2 - 2U < 3) {\n      iVar11 = 0;\n      iVar10 = 1;\n    }\n    else {\n      iVar11 = 0;\n      iVar12 = 0;\n      iVar13 = 0;\n      iVar14 = 0;\n      piVar9 = param_1;\n      do {\n        iVar10 = *piVar9;\n        piVar3 = piVar9 + 1;\n        piVar4 = piVar9 + 2;\n        piVar5 = piVar9 + 3;\n        piVar2 = piVar9 + 1;\n        piVar6 = piVar9 + 2;\n        piVar7 = piVar9 + 3;\n        piVar8 = piVar9 + 4;\n        piVar9 = piVar9 + 4;\n        iVar11 = iVar11 + (uint)(*piVar2 < iVar10);\n        iVar12 = iVar12 + (uint)(*piVar6 < *piVar3);\n        iVar13 = iVar13 + (uint)(*piVar7 < *piVar4);\n        iVar14 = iVar14 + (uint)(*piVar8 < *piVar5);\n      } while (piVar9 != param_1 + (ulong)(uVar1 >> 2) * 4);\n      iVar10 = (uVar1 & 0xfffffffc) + 1;\n      iVar11 = iVar11 + iVar13 + iVar12 + iVar14;\n      if (uVar1 == (uVar1 & 0xfffffffc)) goto LAB_001015a5;\n    }\n    iVar12 = iVar10;\n    if ((iVar10 + 1 < (int)uVar1) && (iVar10 < param_2)) {\n      iVar12 = param_1[iVar10];\n      iVar11 = iVar11 + (uint)(iVar12 < (param_1 + iVar10)[-1]) +\n               (uint)(param_1[(long)iVar10 + 1] < iVar12);\n      iVar13 = iVar10 + 2;\n      iVar12 = iVar13;\n      if (iVar10 + 3 < (int)uVar1) {\n        iVar11 = iVar11 + (uint)(param_1[iVar13] < param_1[(long)iVar10 + 1]) +\n                 (uint)(param_1[(long)iVar13 + 1] < param_1[iVar13]);\n        iVar12 = iVar10 + 4;\n        if (iVar10 + 5 < (int)uVar1) {\n          iVar11 = iVar11 + (uint)(param_1[iVar12] < param_1[(long)iVar13 + 1]);\n          if (param_1[(long)iVar12 + 1] < param_1[iVar12]) {\n            iVar11 = iVar11 + 1;\n          }\n          iVar12 = iVar10 + 6;\n        }\n      }\n    }\n    if (param_1[iVar12] < param_1[(long)iVar12 + -1]) {\n      iVar11 = iVar11 + 1;\n    }\n    iVar10 = iVar12 + 1;\n    if (iVar10 < param_2) {\n      if (param_1[iVar10] < param_1[(long)iVar10 + -1]) {\n        iVar11 = iVar11 + 1;\n      }\n      iVar12 = iVar12 + 2;\n      if ((iVar12 < param_2) && (param_1[iVar12] < param_1[(long)iVar12 + -1])) {\n        iVar11 = iVar11 + 1;\n      }\n    }\n  }\nLAB_001015a5:\n  iVar11 = iVar11 + (uint)(*param_1 < param_1[(long)param_2 + -1]);\n  return CONCAT31((int3)((uint)iVar11 >> 8),iVar11 < 2);\n}"
    },
    {
        "task_id": 110,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(long param_1,int param_2,long param_3,int param_4)\n\n{\n  undefined *puVar1;\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0;\n  for (local_10 = 0; local_10 < param_2; local_10 = local_10 + 1) {\n    if ((*(uint *)(param_1 + (long)local_10 * 4) & 1) == 0) {\n      local_14 = local_14 + 1;\n    }\n  }\n  for (local_c = 0; local_c < param_4; local_c = local_c + 1) {\n    if ((*(uint *)(param_3 + (long)local_c * 4) & 1) == 0) {\n      local_14 = local_14 + 1;\n    }\n  }\n  if (local_14 < param_2) {\n    puVar1 = &DAT_0010200c;\n  }\n  else {\n    puVar1 = &DAT_00102008;\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 110,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(uint *param_1,int param_2,long param_3,int param_4)\n\n{\n  uint *puVar1;\n  int iVar2;\n  undefined1 *puVar3;\n  long lVar4;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n    if (param_4 < 1) {\n      return &DAT_00102004;\n    }\n  }\n  else {\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar2 = 0;\n    do {\n      iVar2 = iVar2 + (uint)((*param_1 & 1) == 0);\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n    if (param_4 < 1) goto LAB_001011b6;\n  }\n  lVar4 = 0;\n  do {\n    iVar2 = iVar2 + (uint)((*(uint *)(param_3 + lVar4 * 4) & 1) == 0);\n    lVar4 = lVar4 + 1;\n  } while ((int)lVar4 < param_4);\nLAB_001011b6:\n  puVar3 = &DAT_00102008;\n  if (param_2 <= iVar2) {\n    puVar3 = &DAT_00102004;\n  }\n  return puVar3;\n}"
    },
    {
        "task_id": 110,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(uint *param_1,int param_2,long param_3,int param_4)\n\n{\n  uint *puVar1;\n  int iVar2;\n  undefined *puVar3;\n  long lVar4;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n    if (param_4 < 1) {\n      return &DAT_00102007;\n    }\n  }\n  else {\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar2 = 0;\n    do {\n      iVar2 = iVar2 + (uint)((*param_1 & 1) == 0);\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n    if (param_4 < 1) goto LAB_001014ff;\n  }\n  lVar4 = 0;\n  do {\n    iVar2 = iVar2 + (uint)((*(uint *)(param_3 + lVar4 * 4) & 1) == 0);\n    lVar4 = lVar4 + 1;\n  } while ((int)lVar4 < param_4);\nLAB_001014ff:\n  puVar3 = &DAT_00102007;\n  if (iVar2 < param_2) {\n    puVar3 = &DAT_00102004;\n  }\n  return puVar3;\n}"
    },
    {
        "task_id": 110,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(uint *param_1,uint param_2,uint *param_3,uint param_4)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint *puVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  if ((int)param_2 < 1) {\n    iVar8 = 0;\n    if ((int)param_4 < 1) {\n      return &DAT_00102007;\n    }\n  }\n  else {\n    if (param_2 - 1 < 4) {\n      uVar7 = 0;\n      iVar8 = 0;\nLAB_001014f4:\n      iVar8 = iVar8 + (uint)((param_1[(int)uVar7] & 1) == 0);\n      if ((int)(uVar7 + 1) < (int)param_2) {\n        iVar8 = iVar8 + (uint)((param_1[(int)(uVar7 + 1)] & 1) == 0);\n        if ((int)(uVar7 + 2) < (int)param_2) {\n          iVar8 = iVar8 + (uint)((param_1[(int)(uVar7 + 2)] & 1) == 0);\n          if ((int)(uVar7 + 3) < (int)param_2) {\n            iVar8 = iVar8 + (uint)((param_1[(int)(uVar7 + 3)] & 1) == 0);\n          }\n        }\n      }\n    }\n    else {\n      iVar8 = 0;\n      iVar9 = 0;\n      iVar10 = 0;\n      iVar11 = 0;\n      puVar4 = param_1;\n      do {\n        uVar7 = *puVar4;\n        puVar1 = puVar4 + 1;\n        puVar2 = puVar4 + 2;\n        puVar3 = puVar4 + 3;\n        puVar4 = puVar4 + 4;\n        iVar8 = iVar8 + (uint)((uVar7 & _DAT_00102290) == 0);\n        iVar9 = iVar9 + (uint)((*puVar1 & _UNK_00102294) == 0);\n        iVar10 = iVar10 + (uint)((*puVar2 & _UNK_00102298) == 0);\n        iVar11 = iVar11 + (uint)((*puVar3 & _UNK_0010229c) == 0);\n      } while (puVar4 != param_1 + (ulong)(param_2 >> 2) * 4);\n      uVar7 = param_2 & 0xfffffffc;\n      iVar8 = iVar8 + iVar10 + iVar9 + iVar11;\n      if ((param_2 & 3) != 0) goto LAB_001014f4;\n    }\n    if ((int)param_4 < 1) goto LAB_0010163b;\n  }\n  uVar7 = 1;\n  if (0 < (int)param_4) {\n    uVar7 = param_4;\n  }\n  if ((int)param_4 < 5) {\n    uVar6 = 0;\n  }\n  else {\n    iVar9 = 0;\n    iVar10 = 0;\n    iVar11 = 0;\n    iVar12 = 0;\n    puVar4 = param_3;\n    do {\n      uVar6 = *puVar4;\n      puVar1 = puVar4 + 1;\n      puVar2 = puVar4 + 2;\n      puVar3 = puVar4 + 3;\n      puVar4 = puVar4 + 4;\n      iVar9 = iVar9 + (uint)((uVar6 & _DAT_00102290) == 0);\n      iVar10 = iVar10 + (uint)((*puVar1 & _UNK_00102294) == 0);\n      iVar11 = iVar11 + (uint)((*puVar2 & _UNK_00102298) == 0);\n      iVar12 = iVar12 + (uint)((*puVar3 & _UNK_0010229c) == 0);\n    } while (puVar4 != param_3 + (ulong)(uVar7 >> 2) * 4);\n    iVar8 = iVar8 + iVar9 + iVar11 + iVar10 + iVar12;\n    uVar6 = uVar7 & 0xfffffffc;\n    if ((uVar7 & 3) == 0) goto LAB_0010163b;\n  }\n  iVar8 = iVar8 + (uint)((param_3[(int)uVar6] & 1) == 0);\n  if ((int)(uVar6 + 1) < (int)param_4) {\n    iVar8 = iVar8 + (uint)((param_3[(int)(uVar6 + 1)] & 1) == 0);\n    if ((int)(uVar6 + 2) < (int)param_4) {\n      iVar8 = iVar8 + (uint)((param_3[(int)(uVar6 + 2)] & 1) == 0);\n      if ((int)(uVar6 + 3) < (int)param_4) {\n        iVar8 = iVar8 + (uint)((param_3[(int)(uVar6 + 3)] & 1) == 0);\n      }\n    }\n  }\nLAB_0010163b:\n  puVar5 = &DAT_00102007;\n  if (iVar8 < (int)param_2) {\n    puVar5 = &DAT_00102004;\n  }\n  return puVar5;\n}"
    },
    {
        "task_id": 111,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2,int *param_3,long param_4)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  long in_FS_OFFSET;\n  int local_90;\n  int local_8c;\n  int local_88;\n  char *local_80;\n  undefined8 local_78 [13];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar3 = local_78;\n  for (lVar2 = 0xd; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  local_90 = 0;\n  local_8c = 0;\n  for (local_80 = param_1; *local_80 != '\\0'; local_80 = local_80 + 1) {\n    if (*local_80 != ' ') {\n      iVar1 = *local_80 + -0x61;\n      *(int *)((long)local_78 + (long)iVar1 * 4) = *(int *)((long)local_78 + (long)iVar1 * 4) + 1;\n      if (local_90 < *(int *)((long)local_78 + (long)iVar1 * 4)) {\n        local_90 = *(int *)((long)local_78 + (long)iVar1 * 4);\n      }\n    }\n  }\n  for (local_88 = 0; local_88 < 0x1a; local_88 = local_88 + 1) {\n    *(undefined4 *)((long)local_88 * 4 + param_2) =\n         *(undefined4 *)((long)local_78 + (long)local_88 * 4);\n    if (local_90 == *(int *)((long)local_78 + (long)local_88 * 4)) {\n      *(char *)(param_4 + local_8c) = (char)local_88 + 'a';\n      local_8c = local_8c + 1;\n    }\n  }\n  *param_3 = local_90;\n  *(undefined *)(param_4 + local_8c) = 0;\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 111,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2,int *param_3,long param_4)\n\n{\n  int iVar1;\n  char cVar2;\n  int iVar3;\n  long lVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long in_FS_OFFSET;\n  undefined8 local_78 [13];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar6 = local_78;\n  for (lVar4 = 0xd; lVar4 != 0; lVar4 = lVar4 + -1) {\n    *puVar6 = 0;\n    puVar6 = puVar6 + 1;\n  }\n  cVar2 = *param_1;\n  if (cVar2 == '\\0') {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    do {\n      if (cVar2 != ' ') {\n        iVar3 = *(int *)((long)local_78 + (long)(cVar2 + -0x61) * 4) + 1;\n        *(int *)((long)local_78 + (long)(cVar2 + -0x61) * 4) = iVar3;\n        if (iVar5 < iVar3) {\n          iVar5 = iVar3;\n        }\n      }\n      param_1 = param_1 + 1;\n      cVar2 = *param_1;\n    } while (cVar2 != '\\0');\n  }\n  lVar4 = 0;\n  iVar3 = 0;\n  do {\n    iVar1 = *(int *)((long)local_78 + lVar4 * 4);\n    *(int *)(param_2 + lVar4 * 4) = iVar1;\n    if (iVar1 == iVar5) {\n      *(char *)(param_4 + iVar3) = (char)lVar4 + 'a';\n      iVar3 = iVar3 + 1;\n    }\n    lVar4 = lVar4 + 1;\n  } while (lVar4 != 0x1a);\n  *param_3 = iVar5;\n  *(undefined *)(param_4 + iVar3) = 0;\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 111,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2,int *param_3,long param_4)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *puVar4;\n  char *pcVar5;\n  long lVar6;\n  int iVar7;\n  long in_FS_OFFSET;\n  undefined8 local_78;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar4 = &local_78;\n  for (lVar3 = 0xd; lVar3 != 0; lVar3 = lVar3 + -1) {\n    *puVar4 = 0;\n    puVar4 = puVar4 + 1;\n  }\n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    local_78._0_4_ = 0;\n    iVar7 = 0;\n  }\n  else {\n    iVar7 = 0;\n    do {\n      if (cVar1 != ' ') {\n        iVar2 = *(int *)((long)&local_78 + (long)(cVar1 + -0x61) * 4) + 1;\n        *(int *)((long)&local_78 + (long)(cVar1 + -0x61) * 4) = iVar2;\n        if (iVar7 < iVar2) {\n          iVar7 = iVar2;\n        }\n      }\n      cVar1 = param_1[1];\n      param_1 = param_1 + 1;\n    } while (cVar1 != '\\0');\n  }\n  lVar3 = 0;\n  iVar2 = 0;\n  lVar6 = 0;\n  while( true ) {\n    *(int *)(param_2 + lVar3 * 4) = (int)local_78;\n    pcVar5 = (char *)(param_4 + lVar6);\n    if (iVar7 == (int)local_78) {\n      iVar2 = iVar2 + 1;\n      lVar6 = (long)iVar2;\n      *pcVar5 = (char)lVar3 + 'a';\n      pcVar5 = (char *)(param_4 + lVar6);\n    }\n    lVar3 = lVar3 + 1;\n    if (lVar3 == 0x1a) break;\n    local_78._0_4_ = *(int *)((long)&local_78 + lVar3 * 4);\n  }\n  *param_3 = iVar7;\n  *pcVar5 = '\\0';\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 111,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2,int *param_3,long param_4)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  long lVar4;\n  undefined8 *puVar5;\n  char *pcVar6;\n  long lVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  undefined8 local_78 [13];\n  long local_10;\n  \n  iVar8 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar5 = local_78;\n  for (lVar4 = 0xd; lVar4 != 0; lVar4 = lVar4 + -1) {\n    *puVar5 = 0;\n    puVar5 = puVar5 + 1;\n  }\n  cVar1 = *param_1;\n  while (cVar1 != '\\0') {\n    while (cVar1 == ' ') {\n      cVar1 = param_1[1];\n      param_1 = param_1 + 1;\n      if (cVar1 == '\\0') goto LAB_001015b6;\n    }\n    iVar3 = *(int *)((long)local_78 + (long)(cVar1 + -0x61) * 4) + 1;\n    *(int *)((long)local_78 + (long)(cVar1 + -0x61) * 4) = iVar3;\n    if (iVar8 < iVar3) {\n      iVar8 = iVar3;\n    }\n    pcVar6 = param_1 + 1;\n    param_1 = param_1 + 1;\n    cVar1 = *pcVar6;\n  }\nLAB_001015b6:\n  lVar4 = 0;\n  iVar3 = 0;\n  lVar7 = 0;\n  do {\n    iVar2 = *(int *)((long)local_78 + lVar4 * 4);\n    pcVar6 = (char *)(param_4 + lVar7);\n    *(int *)(param_2 + lVar4 * 4) = iVar2;\n    if (iVar2 == iVar8) {\n      iVar3 = iVar3 + 1;\n      lVar7 = (long)iVar3;\n      *pcVar6 = (char)lVar4 + 'a';\n      pcVar6 = (char *)(param_4 + lVar7);\n    }\n    lVar4 = lVar4 + 1;\n  } while (lVar4 != 0x1a);\n  *param_3 = iVar8;\n  *pcVar6 = '\\0';\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 112,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2,char *param_3,char *param_4)\n\n{\n  bool bVar1;\n  size_t sVar2;\n  char *__s;\n  char *__src;\n  int local_2c;\n  int local_28;\n  int local_24;\n  char *local_18;\n  \n  sVar2 = strlen(param_1);\n  __s = (char *)malloc((long)((int)sVar2 + 1));\n  local_2c = 0;\n  for (local_28 = 0; param_1[local_28] != '\\0'; local_28 = local_28 + 1) {\n    bVar1 = false;\n    for (local_18 = param_2; *local_18 != '\\0'; local_18 = local_18 + 1) {\n      if (param_1[local_28] == *local_18) {\n        bVar1 = true;\n        break;\n      }\n    }\n    if (!bVar1) {\n      __s[local_2c] = param_1[local_28];\n      local_2c = local_2c + 1;\n    }\n  }\n  __s[local_2c] = '\\0';\n  sVar2 = strlen(__s);\n  bVar1 = true;\n  local_24 = 0;\n  do {\n    if ((int)sVar2 / 2 <= local_24) {\nLAB_00101355:\n      strcpy(param_3,__s);\n      if (bVar1) {\n        __src = \"True\";\n      }\n      else {\n        __src = \"False\";\n      }\n      strcpy(param_4,__src);\n      free(__s);\n      return;\n    }\n    if (__s[local_24] != __s[((int)sVar2 + -1) - local_24]) {\n      bVar1 = false;\n      goto LAB_00101355;\n    }\n    local_24 = local_24 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 112,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2,char *param_3,char *param_4)\n\n{\n  char cVar1;\n  char cVar2;\n  int iVar3;\n  char *pcVar4;\n  char cVar5;\n  long lVar6;\n  ulong uVar7;\n  char *pcVar8;\n  char *pcVar9;\n  byte bVar10;\n  \n  bVar10 = 0;\n  lVar6 = -1;\n  pcVar4 = param_1;\n  do {\n    if (lVar6 == 0) break;\n    lVar6 = lVar6 + -1;\n    cVar5 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar5 != '\\0');\n  pcVar4 = (char *)malloc((long)(int)~(uint)lVar6);\n  cVar5 = *param_1;\n  if (cVar5 == '\\0') {\n    iVar3 = 0;\n  }\n  else {\n    cVar1 = *param_2;\n    iVar3 = 0;\n    cVar2 = cVar1;\n    pcVar8 = param_2;\n    pcVar9 = param_1 + 1;\njoined_r0x001012d3:\n    do {\n      if (cVar2 == '\\0') {\n        pcVar4[iVar3] = cVar5;\n        iVar3 = iVar3 + 1;\n      }\n      else if (cVar2 != cVar5) {\n        cVar2 = pcVar8[1];\n        pcVar8 = pcVar8 + 1;\n        goto joined_r0x001012d3;\n      }\n      cVar5 = *pcVar9;\n      cVar2 = cVar1;\n      pcVar8 = param_2;\n      pcVar9 = pcVar9 + 1;\n    } while (cVar5 != '\\0');\n  }\n  pcVar4[iVar3] = '\\0';\n  uVar7 = 0xffffffffffffffff;\n  pcVar8 = pcVar4;\n  do {\n    if (uVar7 == 0) break;\n    uVar7 = uVar7 - 1;\n    cVar5 = *pcVar8;\n    pcVar8 = pcVar8 + (ulong)bVar10 * -2 + 1;\n  } while (cVar5 != '\\0');\n  iVar3 = (int)(~uVar7 - 1);\n  if (1 < iVar3) {\n    pcVar8 = pcVar4 + (long)iVar3 + -1;\n    lVar6 = 0;\n    do {\n      if (pcVar4[lVar6] != *pcVar8) {\n        strcpy(param_3,pcVar4);\n        pcVar8 = \"False\";\n        goto LAB_00101284;\n      }\n      lVar6 = lVar6 + 1;\n      pcVar8 = pcVar8 + -1;\n    } while ((int)lVar6 < (int)(((uint)(~uVar7 - 1 >> 0x1f) & 1) + iVar3) >> 1);\n  }\n  strcpy(param_3,pcVar4);\n  pcVar8 = \"True\";\nLAB_00101284:\n  strcpy(param_4,pcVar8);\n  free(pcVar4);\n  return;\n}"
    },
    {
        "task_id": 112,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2,void *param_3,char *param_4)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint *__src;\n  uint *puVar6;\n  long lVar7;\n  char cVar8;\n  uint *puVar9;\n  undefined *puVar10;\n  char *pcVar11;\n  char *pcVar12;\n  int iVar13;\n  bool bVar14;\n  \n  sVar5 = strlen(param_1);\n  __src = (uint *)malloc((long)((int)sVar5 + 1));\n  cVar8 = *param_1;\n  puVar6 = __src;\n  if (cVar8 != '\\0') {\n    cVar1 = *param_2;\n    iVar13 = 0;\n    cVar2 = cVar1;\n    pcVar11 = param_2;\n    pcVar12 = param_1 + 1;\n    do {\n      while( true ) {\n        while (cVar2 == '\\0') {\n          lVar7 = (long)iVar13;\n          iVar13 = iVar13 + 1;\n          *(char *)((long)__src + lVar7) = cVar8;\n          cVar8 = *pcVar12;\n          cVar2 = cVar1;\n          pcVar11 = param_2;\n          pcVar12 = pcVar12 + 1;\n          if (cVar8 == '\\0') goto LAB_001015ef;\n        }\n        if (cVar8 == cVar2) break;\n        cVar2 = pcVar11[1];\n        pcVar11 = pcVar11 + 1;\n      }\n      cVar8 = *pcVar12;\n      pcVar12 = pcVar12 + 1;\n      cVar2 = cVar1;\n      pcVar11 = param_2;\n    } while (cVar8 != '\\0');\nLAB_001015ef:\n    puVar6 = (uint *)((long)iVar13 + (long)__src);\n  }\n  *(undefined *)puVar6 = 0;\n  puVar6 = __src;\n  do {\n    puVar9 = puVar6;\n    uVar3 = *puVar9 + 0xfefefeff & ~*puVar9;\n    uVar4 = uVar3 & 0x80808080;\n    puVar6 = puVar9 + 1;\n  } while (uVar4 == 0);\n  bVar14 = (uVar3 & 0x8080) == 0;\n  if (bVar14) {\n    uVar4 = uVar4 >> 0x10;\n  }\n  if (bVar14) {\n    puVar6 = (uint *)((long)puVar9 + 6);\n  }\n  puVar10 = (undefined *)\n            ((long)puVar6 + ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)__src));\n  iVar13 = (int)puVar10;\n  if (1 < iVar13) {\n    lVar7 = 0;\n    pcVar11 = (char *)((long)(iVar13 + -1) + (long)__src);\n    do {\n      if (*(char *)((long)__src + lVar7) != *pcVar11) {\n        memcpy(param_3,__src,(size_t)(puVar10 + 1));\n        pcVar11 = \"False\";\n        goto LAB_0010167c;\n      }\n      lVar7 = lVar7 + 1;\n      pcVar11 = pcVar11 + -1;\n    } while ((int)lVar7 < (int)(((uint)((ulong)puVar10 >> 0x1f) & 1) + iVar13) >> 1);\n  }\n  memcpy(param_3,__src,(size_t)(puVar10 + 1));\n  pcVar11 = \"True\";\nLAB_0010167c:\n  strcpy(param_4,pcVar11);\n  free(__src);\n  return;\n}"
    },
    {
        "task_id": 112,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2,void *param_3,char *param_4)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint *__src;\n  uint *puVar6;\n  long lVar7;\n  char cVar8;\n  uint *puVar9;\n  undefined *puVar10;\n  char *pcVar11;\n  char *pcVar12;\n  int iVar13;\n  bool bVar14;\n  \n  sVar5 = strlen(param_1);\n  __src = (uint *)malloc((long)((int)sVar5 + 1));\n  cVar8 = *param_1;\n  puVar6 = __src;\n  if (cVar8 != '\\0') {\n    cVar1 = *param_2;\n    iVar13 = 0;\n    cVar2 = cVar1;\n    pcVar11 = param_2;\n    pcVar12 = param_1 + 1;\n    do {\n      while( true ) {\n        while (cVar2 == '\\0') {\n          lVar7 = (long)iVar13;\n          iVar13 = iVar13 + 1;\n          *(char *)((long)__src + lVar7) = cVar8;\n          cVar8 = *pcVar12;\n          cVar2 = cVar1;\n          pcVar11 = param_2;\n          pcVar12 = pcVar12 + 1;\n          if (cVar8 == '\\0') goto LAB_001015ef;\n        }\n        if (cVar8 == cVar2) break;\n        cVar2 = pcVar11[1];\n        pcVar11 = pcVar11 + 1;\n      }\n      cVar8 = *pcVar12;\n      pcVar12 = pcVar12 + 1;\n      cVar2 = cVar1;\n      pcVar11 = param_2;\n    } while (cVar8 != '\\0');\nLAB_001015ef:\n    puVar6 = (uint *)((long)iVar13 + (long)__src);\n  }\n  *(undefined *)puVar6 = 0;\n  puVar6 = __src;\n  do {\n    puVar9 = puVar6;\n    uVar3 = *puVar9 + 0xfefefeff & ~*puVar9;\n    uVar4 = uVar3 & 0x80808080;\n    puVar6 = puVar9 + 1;\n  } while (uVar4 == 0);\n  bVar14 = (uVar3 & 0x8080) == 0;\n  if (bVar14) {\n    uVar4 = uVar4 >> 0x10;\n  }\n  if (bVar14) {\n    puVar6 = (uint *)((long)puVar9 + 6);\n  }\n  puVar10 = (undefined *)\n            ((long)puVar6 + ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)__src));\n  iVar13 = (int)puVar10;\n  if (1 < iVar13) {\n    lVar7 = 0;\n    pcVar11 = (char *)((long)(iVar13 + -1) + (long)__src);\n    do {\n      if (*(char *)((long)__src + lVar7) != *pcVar11) {\n        memcpy(param_3,__src,(size_t)(puVar10 + 1));\n        pcVar11 = \"False\";\n        goto LAB_0010167c;\n      }\n      lVar7 = lVar7 + 1;\n      pcVar11 = pcVar11 + -1;\n    } while ((int)lVar7 < (int)(((uint)((ulong)puVar10 >> 0x1f) & 1) + iVar13) >> 1);\n  }\n  memcpy(param_3,__src,(size_t)(puVar10 + 1));\n  pcVar11 = \"True\";\nLAB_0010167c:\n  strcpy(param_4,pcVar11);\n  free(__src);\n  return;\n}"
    },
    {
        "task_id": 113,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2)\n\n{\n  void *pvVar1;\n  void *pvVar2;\n  int local_2c;\n  uint local_28;\n  int local_24;\n  \n  pvVar1 = malloc((long)param_2 << 3);\n  for (local_2c = 0; local_2c < param_2; local_2c = local_2c + 1) {\n    local_28 = 0;\n    for (local_24 = 0; *(char *)((long)local_24 + *(long *)(param_1 + (long)local_2c * 8)) != '\\0';\n        local_24 = local_24 + 1) {\n      if ((('/' < *(char *)((long)local_24 + *(long *)(param_1 + (long)local_2c * 8))) &&\n          (*(char *)((long)local_24 + *(long *)(param_1 + (long)local_2c * 8)) < ':')) &&\n         ((*(char *)((long)local_24 + *(long *)(param_1 + (long)local_2c * 8)) + -0x30) % 2 == 1)) {\n        local_28 = local_28 + 1;\n      }\n    }\n    pvVar2 = malloc(100);\n    *(void **)((long)local_2c * 8 + (long)pvVar1) = pvVar2;\n    sprintf(*(char **)((long)pvVar1 + (long)local_2c * 8),\n            \"the number of odd elements %d in the string %d of the %d input.\",(ulong)local_28,\n            (ulong)local_28,(ulong)local_28);\n  }\n  return pvVar1;\n}"
    },
    {
        "task_id": 113,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2)\n\n{\n  char cVar1;\n  void *pvVar2;\n  void *pvVar3;\n  char *pcVar4;\n  int iVar5;\n  ulong uVar6;\n  bool bVar7;\n  \n  pvVar2 = malloc((long)param_2 << 3);\n  if (0 < param_2) {\n    uVar6 = 0;\n    do {\n      pcVar4 = *(char **)(param_1 + uVar6 * 8);\n      iVar5 = 0;\n      cVar1 = *pcVar4;\n      while (cVar1 != '\\0') {\n        pcVar4 = pcVar4 + 1;\n        if ((byte)(cVar1 - 0x30U) < 10) {\n          iVar5 = iVar5 + (uint)((cVar1 + -0x30) % 2 == 1);\n        }\n        cVar1 = *pcVar4;\n      }\n      pvVar3 = malloc(100);\n      *(void **)((long)pvVar2 + uVar6 * 8) = pvVar3;\n      __sprintf_chk(pvVar3,1,100,\"the number of odd elements %d in the string %d of the %d input.\",\n                    iVar5,iVar5,iVar5);\n      bVar7 = uVar6 != param_2 - 1;\n      uVar6 = uVar6 + 1;\n    } while (bVar7);\n  }\n  return pvVar2;\n}"
    },
    {
        "task_id": 113,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2)\n\n{\n  byte bVar1;\n  void *pvVar2;\n  void *pvVar3;\n  byte *pbVar4;\n  ulong uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  pvVar2 = malloc((long)param_2 << 3);\n  if (0 < param_2) {\n    uVar5 = 0;\n    do {\n      pbVar4 = *(byte **)(param_1 + uVar5 * 8);\n      iVar6 = 0;\n      bVar1 = *pbVar4;\n      while (bVar1 != 0) {\n        pbVar4 = pbVar4 + 1;\n        if ((byte)(bVar1 - 0x30) < 10) {\n          iVar6 = (iVar6 + 1) - (uint)((bVar1 & 1) == 0);\n        }\n        bVar1 = *pbVar4;\n      }\n      pvVar3 = malloc(100);\n      *(void **)((long)pvVar2 + uVar5 * 8) = pvVar3;\n      __sprintf_chk(pvVar3,1,100,\"the number of odd elements %d in the string %d of the %d input.\",\n                    iVar6,iVar6,iVar6);\n      bVar7 = param_2 - 1 != uVar5;\n      uVar5 = uVar5 + 1;\n    } while (bVar7);\n  }\n  return pvVar2;\n}"
    },
    {
        "task_id": 113,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2)\n\n{\n  byte bVar1;\n  void *pvVar2;\n  void *pvVar3;\n  byte *pbVar4;\n  ulong uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  pvVar2 = malloc((long)param_2 << 3);\n  if (0 < param_2) {\n    uVar5 = 0;\n    do {\n      pbVar4 = *(byte **)(param_1 + uVar5 * 8);\n      iVar6 = 0;\n      bVar1 = *pbVar4;\n      while (bVar1 != 0) {\n        pbVar4 = pbVar4 + 1;\n        if ((byte)(bVar1 - 0x30) < 10) {\n          iVar6 = (iVar6 + 1) - (uint)((bVar1 & 1) == 0);\n        }\n        bVar1 = *pbVar4;\n      }\n      pvVar3 = malloc(100);\n      *(void **)((long)pvVar2 + uVar5 * 8) = pvVar3;\n      __sprintf_chk(pvVar3,1,100,\"the number of odd elements %d in the string %d of the %d input.\",\n                    iVar6,iVar6,iVar6);\n      bVar7 = uVar5 != param_2 - 1;\n      uVar5 = uVar5 + 1;\n    } while (bVar7);\n  }\n  return pvVar2;\n}"
    },
    {
        "task_id": 114,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long *param_1,int param_2)\n\n{\n  int local_1c;\n  long local_18;\n  long local_10;\n  \n  local_18 = *param_1;\n  local_10 = *param_1;\n  for (local_1c = 1; local_1c < param_2; local_1c = local_1c + 1) {\n    if (local_18 < 0) {\n      local_18 = local_18 + param_1[local_1c];\n    }\n    else {\n      local_18 = param_1[local_1c];\n    }\n    if (local_18 < local_10) {\n      local_10 = local_18;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 114,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long *plVar3;\n  \n  lVar1 = *param_1;\n  lVar2 = lVar1;\n  if (1 < param_2) {\n    plVar3 = param_1 + 1;\n    do {\n      if (lVar1 < 0) {\n        lVar1 = lVar1 + *plVar3;\n      }\n      else {\n        lVar1 = *plVar3;\n      }\n      if (lVar1 < lVar2) {\n        lVar2 = lVar1;\n      }\n      plVar3 = plVar3 + 1;\n    } while (plVar3 != param_1 + (ulong)(param_2 - 2) + 2);\n  }\n  return lVar2;\n}"
    },
    {
        "task_id": 114,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long *plVar3;\n  long lVar4;\n  bool bVar5;\n  \n  lVar2 = *param_1;\n  if (1 < param_2) {\n    plVar3 = param_1 + 1;\n    lVar4 = lVar2;\n    do {\n      bVar5 = lVar2 < 0;\n      lVar1 = lVar2 + *plVar3;\n      lVar2 = *plVar3;\n      if (bVar5) {\n        lVar2 = lVar1;\n      }\n      if (lVar2 < lVar4) {\n        lVar4 = lVar2;\n      }\n      plVar3 = plVar3 + 1;\n    } while (param_1 + (ulong)(param_2 - 2) + 2 != plVar3);\n    return lVar4;\n  }\n  return lVar2;\n}"
    },
    {
        "task_id": 114,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long *plVar3;\n  long lVar4;\n  \n  lVar4 = *param_1;\n  if (param_2 < 2) {\n    return lVar4;\n  }\n  plVar3 = param_1 + 1;\n  lVar2 = lVar4;\n  do {\n    lVar1 = *plVar3;\n    if (lVar2 < 0) {\n      lVar1 = lVar1 + lVar2;\n    }\n    if (lVar1 < lVar4) {\n      lVar4 = lVar1;\n    }\n    plVar3 = plVar3 + 1;\n    lVar2 = lVar1;\n  } while (param_1 + (ulong)(param_2 - 2) + 2 != plVar3);\n  return lVar4;\n}"
    },
    {
        "task_id": 115,
        "type": "O0",
        "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(long param_1,int param_2,ulong param_3,int param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined auVar3 [16];\n  uint local_18;\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  iVar2 = (int)param_3;\n  local_18 = 0;\n  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {\n    local_10 = 0;\n    for (local_c = 0; local_c < iVar2; local_c = local_c + 1) {\n      param_3 = (long)local_c * 4;\n      local_10 = local_10 + *(int *)(*(long *)(param_1 + (long)local_14 * 8) + param_3);\n    }\n    if (0 < local_10) {\n      iVar1 = param_4 + local_10 + -1;\n      param_3 = (long)iVar1 % (long)param_4 & 0xffffffff;\n      local_18 = local_18 + iVar1 / param_4;\n    }\n  }\n  auVar3._4_4_ = 0;\n  auVar3._0_4_ = local_18;\n  auVar3._8_8_ = param_3;\n  return auVar3;\n}"
    },
    {
        "task_id": 115,
        "type": "O1",
        "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "undefined  [16] func0(int **param_1,int param_2,ulong param_3,int param_4)\n\n{\n  int *piVar1;\n  int **ppiVar2;\n  int iVar3;\n  undefined auVar4 [16];\n  int iVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  undefined auVar9 [16];\n  \n  if (0 < param_2) {\n    ppiVar2 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar3 = (int)param_3;\n    uVar8 = 0;\n    do {\n      if (0 < iVar3) {\n        piVar6 = *param_1;\n        piVar1 = piVar6 + (ulong)(iVar3 - 1) + 1;\n        param_3 = 0;\n        do {\n          uVar7 = (int)param_3 + *piVar6;\n          param_3 = (ulong)uVar7;\n          piVar6 = piVar6 + 1;\n        } while (piVar6 != piVar1);\n        if (0 < (int)uVar7) {\n          iVar5 = (uVar7 - 1) + param_4;\n          param_3 = (long)iVar5 % (long)param_4 & 0xffffffff;\n          uVar8 = uVar8 + iVar5 / param_4;\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppiVar2);\n    auVar9._4_4_ = 0;\n    auVar9._0_4_ = uVar8;\n    auVar9._8_8_ = param_3;\n    return auVar9;\n  }\n  auVar4._8_8_ = 0;\n  auVar4._0_8_ = param_3;\n  return auVar4 << 0x40;\n}"
    },
    {
        "task_id": 115,
        "type": "O2",
        "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "int func0(int **param_1,int param_2,int param_3,int param_4)\n\n{\n  int *piVar1;\n  int **ppiVar2;\n  int *piVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (0 < param_2) {\n    iVar5 = 0;\n    ppiVar2 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (0 < param_3) {\n        piVar3 = *param_1;\n        iVar4 = 0;\n        piVar1 = piVar3 + (ulong)(param_3 - 1) + 1;\n        do {\n          iVar4 = iVar4 + *piVar3;\n          piVar3 = piVar3 + 1;\n        } while (piVar3 != piVar1);\n        if (0 < iVar4) {\n          iVar5 = iVar5 + (iVar4 + -1 + param_4) / param_4;\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != ppiVar2);\n    return iVar5;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 115,
        "type": "O3",
        "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "int func0(int **param_1,int param_2,uint param_3,int param_4)\n\n{\n  int **ppiVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  int *piVar5;\n  int *piVar6;\n  int *piVar7;\n  uint uVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar9 = 0;\n  ppiVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  do {\n    if (0 < (int)param_3) {\n      piVar2 = *param_1;\n      if (param_3 - 1 < 4) {\n        uVar8 = 0;\n        iVar10 = 0;\nLAB_001016b7:\n        iVar10 = iVar10 + piVar2[(int)uVar8];\n        if ((int)(uVar8 + 1) < (int)param_3) {\n          iVar10 = iVar10 + piVar2[(long)(int)uVar8 + 1];\n          if ((int)(uVar8 + 2) < (int)param_3) {\n            iVar10 = iVar10 + piVar2[(long)(int)uVar8 + 2];\n            if ((int)(uVar8 + 3) < (int)param_3) {\n              iVar10 = iVar10 + piVar2[(long)(int)uVar8 + 3];\n            }\n          }\n        }\n      }\n      else {\n        iVar10 = 0;\n        iVar11 = 0;\n        iVar12 = 0;\n        iVar13 = 0;\n        piVar7 = piVar2;\n        do {\n          iVar3 = *piVar7;\n          piVar4 = piVar7 + 1;\n          piVar5 = piVar7 + 2;\n          piVar6 = piVar7 + 3;\n          piVar7 = piVar7 + 4;\n          iVar10 = iVar10 + iVar3;\n          iVar11 = iVar11 + *piVar4;\n          iVar12 = iVar12 + *piVar5;\n          iVar13 = iVar13 + *piVar6;\n        } while (piVar7 != piVar2 + (ulong)(param_3 >> 2) * 4);\n        iVar10 = iVar10 + iVar12 + iVar11 + iVar13;\n        uVar8 = param_3 & 0xfffffffc;\n        if (param_3 != (param_3 & 0xfffffffc)) goto LAB_001016b7;\n      }\n      if (0 < iVar10) {\n        iVar9 = iVar9 + (iVar10 + -1 + param_4) / param_4;\n      }\n    }\n    param_1 = param_1 + 1;\n    if (param_1 == ppiVar1) {\n      return iVar9;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 116,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int local_20;\n  uint local_1c;\n  uint local_18;\n  int local_14;\n  int local_10;\n  \n  for (local_14 = 0; local_10 = local_14, local_14 < param_2; local_14 = local_14 + 1) {\n    while (local_10 = local_10 + 1, local_10 < param_2) {\n      local_20 = 0;\n      local_18 = *(uint *)(param_1 + (long)local_10 * 4);\n      for (local_1c = *(uint *)(param_1 + (long)local_14 * 4); iVar2 = local_20, 0 < (int)local_1c;\n          local_1c = (int)local_1c >> 1) {\n        local_20 = local_20 + (local_1c & 1);\n      }\n      local_20 = 0;\n      for (; 0 < (int)local_18; local_18 = (int)local_18 >> 1) {\n        local_20 = local_20 + (local_18 & 1);\n      }\n      if ((local_20 < iVar2) ||\n         ((local_20 == iVar2 &&\n          (*(int *)(param_1 + (long)local_10 * 4) < *(int *)(param_1 + (long)local_14 * 4))))) {\n        uVar1 = *(undefined4 *)(param_1 + (long)local_14 * 4);\n        *(undefined4 *)(param_1 + (long)local_14 * 4) =\n             *(undefined4 *)(param_1 + (long)local_10 * 4);\n        *(undefined4 *)((long)local_10 * 4 + param_1) = uVar1;\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 116,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  uint *puVar7;\n  long lVar8;\n  \n  if (param_2 < 1) {\n    return;\n  }\n  lVar8 = 1;\n  puVar7 = param_1;\n  do {\n    lVar6 = lVar8;\n    if (lVar8 == (ulong)(param_2 - 1) + 1) {\n      return;\n    }\n    do {\n      uVar1 = *puVar7;\n      uVar2 = param_1[lVar6];\n      if ((int)uVar1 < 1) {\n        iVar5 = 0;\n        iVar4 = 0;\n        if (0 < (int)uVar2) goto LAB_001011f2;\nLAB_0010120b:\n        if (((int)uVar2 < (int)uVar1) && (iVar4 == iVar5)) goto LAB_001011ba;\n      }\n      else {\n        iVar5 = 0;\n        uVar3 = uVar1;\n        do {\n          iVar5 = iVar5 + (uVar3 & 1);\n          uVar3 = (int)uVar3 >> 1;\n        } while (0 < (int)uVar3);\n        if ((int)uVar2 < 1) {\n          iVar4 = 0;\n        }\n        else {\nLAB_001011f2:\n          iVar4 = 0;\n          uVar3 = uVar2;\n          do {\n            iVar4 = iVar4 + (uVar3 & 1);\n            uVar3 = (int)uVar3 >> 1;\n          } while (0 < (int)uVar3);\n        }\n        if (iVar5 <= iVar4) goto LAB_0010120b;\nLAB_001011ba:\n        *puVar7 = uVar2;\n        param_1[lVar6] = uVar1;\n      }\n      lVar6 = lVar6 + 1;\n    } while ((int)lVar6 < param_2);\n    lVar8 = lVar8 + 1;\n    puVar7 = puVar7 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 116,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  long lVar7;\n  uint *puVar8;\n  long lVar9;\n  bool bVar10;\n  \n  if (param_2 < 1) {\n    return;\n  }\n  lVar9 = (ulong)(param_2 - 1) + 1;\n  lVar6 = 1;\n  puVar8 = param_1;\n  lVar7 = lVar6;\n  if (lVar9 != 1) {\n    do {\n      do {\n        uVar1 = *puVar8;\n        uVar2 = param_1[lVar6];\n        if ((int)uVar1 < 1) {\n          iVar5 = 0;\n          bVar10 = true;\n          if (0 < (int)uVar2) goto LAB_001015f0;\nLAB_0010160a:\n          if (((int)uVar2 < (int)uVar1) && (bVar10)) goto LAB_00101630;\n        }\n        else {\n          iVar5 = 0;\n          uVar3 = uVar1;\n          do {\n            iVar5 = iVar5 + (uVar3 & 1);\n            uVar3 = (int)uVar3 >> 1;\n          } while (uVar3 != 0);\n          iVar4 = 0;\n          if (0 < (int)uVar2) {\nLAB_001015f0:\n            iVar4 = 0;\n            uVar3 = uVar2;\n            do {\n              iVar4 = iVar4 + (uVar3 & 1);\n              uVar3 = (int)uVar3 >> 1;\n            } while (uVar3 != 0);\n          }\n          bVar10 = iVar5 == iVar4;\n          if (iVar5 <= iVar4) goto LAB_0010160a;\nLAB_00101630:\n          *puVar8 = uVar2;\n          param_1[lVar6] = uVar1;\n        }\n        lVar6 = lVar6 + 1;\n      } while ((int)lVar6 < param_2);\n      lVar6 = lVar7 + 1;\n      puVar8 = puVar8 + 1;\n      lVar7 = lVar6;\n    } while (lVar9 != lVar6);\n  }\n  return;\n}"
    },
    {
        "task_id": 116,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint *param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  long lVar7;\n  uint *puVar8;\n  bool bVar9;\n  \n  if (param_2 < 2) {\n    return;\n  }\n  lVar6 = 1;\n  puVar8 = param_1;\n  lVar7 = lVar6;\n  do {\n    uVar1 = *puVar8;\n    uVar2 = param_1[lVar6];\n    if ((int)uVar1 < 1) {\n      iVar5 = 0;\n      bVar9 = true;\n      if (0 < (int)uVar2) goto LAB_00101540;\nLAB_0010155a:\n      if (((int)uVar2 < (int)uVar1) && (bVar9)) goto LAB_00101580;\n    }\n    else {\n      iVar5 = 0;\n      uVar3 = uVar1;\n      do {\n        iVar5 = iVar5 + (uVar3 & 1);\n        uVar3 = (int)uVar3 >> 1;\n      } while (uVar3 != 0);\n      iVar4 = 0;\n      if (0 < (int)uVar2) {\nLAB_00101540:\n        iVar4 = 0;\n        uVar3 = uVar2;\n        do {\n          iVar4 = iVar4 + (uVar3 & 1);\n          uVar3 = (int)uVar3 >> 1;\n        } while (uVar3 != 0);\n      }\n      bVar9 = iVar5 == iVar4;\n      if (iVar5 <= iVar4) goto LAB_0010155a;\nLAB_00101580:\n      *puVar8 = uVar2;\n      param_1[lVar6] = uVar1;\n    }\n    lVar6 = lVar6 + 1;\n    if (param_2 <= (int)lVar6) {\n      lVar6 = lVar7 + 1;\n      puVar8 = puVar8 + 1;\n      lVar7 = lVar6;\n      if ((ulong)(param_2 - 2) + 2 == lVar6) {\n        return;\n      }\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 117,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int param_2,int *param_3)\n\n{\n  size_t sVar1;\n  char *__s;\n  ushort **ppuVar2;\n  size_t sVar3;\n  void *pvVar4;\n  char *pcVar5;\n  int local_48;\n  int local_44;\n  int local_40;\n  int local_3c;\n  void *local_38;\n  \n  local_38 = (void *)0x0;\n  local_48 = 0;\n  local_44 = 0;\n  local_40 = 0;\n  sVar1 = strlen(param_1);\n  __s = (char *)malloc(sVar1 + 1);\n  for (local_3c = 0; (ulong)(long)local_3c <= sVar1; local_3c = local_3c + 1) {\n    ppuVar2 = __ctype_b_loc();\n    if ((((*ppuVar2)[param_1[local_3c]] & 0x2000) == 0) && (param_1[local_3c] != '\\0')) {\n      __s[local_3c - local_40] = param_1[local_3c];\n      pcVar5 = strchr(\"aeiouAEIOU\",(int)param_1[local_3c]);\n      if (pcVar5 == (char *)0x0) {\n        ppuVar2 = __ctype_b_loc();\n        if (((*ppuVar2)[(byte)param_1[local_3c]] & 0x400) != 0) {\n          local_48 = local_48 + 1;\n        }\n      }\n    }\n    else {\n      if (local_48 == param_2) {\n        __s[local_3c - local_40] = '\\0';\n        local_38 = realloc(local_38,(long)(local_44 + 1) * 8);\n        sVar3 = strlen(__s);\n        pvVar4 = malloc(sVar3 + 1);\n        *(void **)((long)local_44 * 8 + (long)local_38) = pvVar4;\n        strcpy(*(char **)((long)local_38 + (long)local_44 * 8),__s);\n        local_44 = local_44 + 1;\n      }\n      local_40 = local_3c + 1;\n      local_48 = 0;\n    }\n  }\n  free(__s);\n  *param_3 = local_44;\n  return local_38;\n}"
    },
    {
        "task_id": 117,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,int param_2,int *param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  ushort *puVar3;\n  char *pcVar4;\n  ushort **ppuVar5;\n  char *pcVar6;\n  ulong uVar7;\n  ulong uVar8;\n  int iVar9;\n  int iVar11;\n  bool bVar12;\n  byte bVar13;\n  int local_64;\n  int local_4c;\n  void *local_48;\n  long lVar10;\n  \n  bVar13 = 0;\n  uVar7 = 0xffffffffffffffff;\n  pcVar4 = param_1;\n  do {\n    if (uVar7 == 0) break;\n    uVar7 = uVar7 - 1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  pcVar4 = (char *)malloc(~uVar7);\n  ppuVar5 = __ctype_b_loc();\n  iVar11 = 0;\n  local_4c = 0;\n  local_64 = 0;\n  local_48 = (void *)0x0;\n  lVar10 = 0;\n  do {\n    iVar9 = (int)lVar10;\n    puVar3 = *ppuVar5;\n    bVar2 = param_1[lVar10];\n    if (((*(byte *)((long)puVar3 + (long)(char)bVar2 * 2 + 1) & 0x20) == 0) && (bVar2 != 0)) {\n      pcVar4[iVar9 - iVar11] = bVar2;\n      pcVar6 = strchr(\"aeiouAEIOU\",(int)(char)bVar2);\n      if (pcVar6 == (char *)0x0) {\n        local_64 = (local_64 + 1) - (uint)((puVar3[bVar2] & 0x400) == 0);\n      }\n    }\n    else {\n      if (param_2 == local_64) {\n        pcVar4[iVar9 - iVar11] = '\\0';\n        local_4c = local_4c + 1;\n        local_48 = realloc(local_48,(long)local_4c * 8);\n        uVar8 = 0xffffffffffffffff;\n        pcVar6 = pcVar4;\n        do {\n          if (uVar8 == 0) break;\n          uVar8 = uVar8 - 1;\n          cVar1 = *pcVar6;\n          pcVar6 = pcVar6 + (ulong)bVar13 * -2 + 1;\n        } while (cVar1 != '\\0');\n        pcVar6 = (char *)malloc(~uVar8);\n        *(char **)((long)local_48 + ((long)local_4c * 8 - 8U)) = pcVar6;\n        strcpy(pcVar6,pcVar4);\n      }\n      iVar11 = iVar9 + 1;\n      local_64 = 0;\n    }\n    bVar12 = ~uVar7 - 1 == lVar10;\n    lVar10 = lVar10 + 1;\n    if (bVar12) {\n      free(pcVar4);\n      *param_3 = local_4c;\n      return local_48;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 117,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1,int param_2,int *param_3)\n\n{\n  byte bVar1;\n  ushort *puVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint *__src;\n  ushort **ppuVar6;\n  char *pcVar7;\n  void *__ptr;\n  void *__dest;\n  uint *puVar8;\n  uint *puVar9;\n  size_t __size;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  bool bVar14;\n  int local_48;\n  \n  __ptr = (void *)0x0;\n  sVar5 = strlen((char *)param_1);\n  __src = (uint *)malloc(sVar5 + 1);\n  ppuVar6 = __ctype_b_loc();\n  local_48 = 0;\n  iVar11 = 0;\n  iVar10 = 0;\n  puVar2 = *ppuVar6;\n  iVar12 = 0;\n  do {\n    bVar1 = *param_1;\n    iVar13 = iVar12 + 1;\n    if (((*(byte *)((long)puVar2 + (long)(char)bVar1 * 2 + 1) & 0x20) == 0) && (bVar1 != 0)) {\n      *(byte *)((long)__src + (long)(iVar12 - iVar11)) = bVar1;\n      pcVar7 = strchr(\"aeiouAEIOU\",(int)(char)bVar1);\n      if (pcVar7 == (char *)0x0) {\n        iVar10 = (iVar10 + 1) - (uint)((puVar2[bVar1] & 0x400) == 0);\n      }\n    }\n    else {\n      if (param_2 == iVar10) {\n        local_48 = local_48 + 1;\n        *(undefined *)((long)__src + (long)(iVar12 - iVar11)) = 0;\n        __ptr = realloc(__ptr,(long)local_48 * 8);\n        puVar9 = __src;\n        do {\n          puVar8 = puVar9;\n          uVar3 = *puVar8 + 0xfefefeff & ~*puVar8;\n          uVar4 = uVar3 & 0x80808080;\n          puVar9 = puVar8 + 1;\n        } while (uVar4 == 0);\n        bVar14 = (uVar3 & 0x8080) == 0;\n        if (bVar14) {\n          uVar4 = uVar4 >> 0x10;\n        }\n        if (bVar14) {\n          puVar9 = (uint *)((long)puVar8 + 6);\n        }\n        __size = (long)puVar9 + (-(long)__src - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) + -2;\n        __dest = malloc(__size);\n        *(void **)((long)__ptr + ((long)local_48 * 8 - 8U)) = __dest;\n        memcpy(__dest,__src,__size);\n      }\n      iVar10 = 0;\n      iVar11 = iVar13;\n    }\n    param_1 = param_1 + 1;\n    iVar12 = iVar13;\n  } while ((int)sVar5 + 1 != iVar13);\n  free(__src);\n  *param_3 = local_48;\n  return __ptr;\n}"
    },
    {
        "task_id": 117,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1,int param_2,int *param_3)\n\n{\n  byte bVar1;\n  ushort *puVar2;\n  uint uVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint *__src;\n  ushort **ppuVar6;\n  char *pcVar7;\n  void *__ptr;\n  void *__dest;\n  uint *puVar8;\n  uint *puVar9;\n  size_t __size;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  bool bVar14;\n  int local_48;\n  \n  __ptr = (void *)0x0;\n  sVar5 = strlen((char *)param_1);\n  __src = (uint *)malloc(sVar5 + 1);\n  ppuVar6 = __ctype_b_loc();\n  local_48 = 0;\n  iVar11 = 0;\n  iVar10 = 0;\n  puVar2 = *ppuVar6;\n  iVar12 = 0;\n  do {\n    bVar1 = *param_1;\n    iVar13 = iVar12 + 1;\n    if (((*(byte *)((long)puVar2 + (long)(char)bVar1 * 2 + 1) & 0x20) == 0) && (bVar1 != 0)) {\n      *(byte *)((long)__src + (long)(iVar12 - iVar11)) = bVar1;\n      pcVar7 = strchr(\"aeiouAEIOU\",(int)(char)bVar1);\n      if (pcVar7 == (char *)0x0) {\n        iVar10 = (iVar10 + 1) - (uint)((puVar2[bVar1] & 0x400) == 0);\n      }\n    }\n    else {\n      if (param_2 == iVar10) {\n        local_48 = local_48 + 1;\n        *(undefined *)((long)__src + (long)(iVar12 - iVar11)) = 0;\n        __ptr = realloc(__ptr,(long)local_48 * 8);\n        puVar9 = __src;\n        do {\n          puVar8 = puVar9;\n          uVar3 = *puVar8 + 0xfefefeff & ~*puVar8;\n          uVar4 = uVar3 & 0x80808080;\n          puVar9 = puVar8 + 1;\n        } while (uVar4 == 0);\n        bVar14 = (uVar3 & 0x8080) == 0;\n        if (bVar14) {\n          uVar4 = uVar4 >> 0x10;\n        }\n        if (bVar14) {\n          puVar9 = (uint *)((long)puVar8 + 6);\n        }\n        __size = (long)puVar9 + (-(long)__src - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) + -2;\n        __dest = malloc(__size);\n        *(void **)((long)__ptr + ((long)local_48 * 8 - 8U)) = __dest;\n        memcpy(__dest,__src,__size);\n      }\n      iVar10 = 0;\n      iVar11 = iVar13;\n    }\n    param_1 = param_1 + 1;\n    iVar12 = iVar13;\n  } while ((int)sVar5 + 1 != iVar13);\n  free(__src);\n  *param_3 = local_48;\n  return __ptr;\n}"
    },
    {
        "task_id": 118,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  int local_1c;\n  \n  sVar1 = strlen(param_1);\n  local_1c = (int)sVar1 + -2;\n  while( true ) {\n    if (local_1c < 1) {\n      out_2496._0_1_ = 0;\n      return &out_2496;\n    }\n    pcVar2 = strchr(\"AEIOUaeiou\",(int)param_1[local_1c]);\n    if (((pcVar2 != (char *)0x0) &&\n        (pcVar2 = strchr(\"AEIOUaeiou\",(int)param_1[(long)local_1c + 1]), pcVar2 == (char *)0x0)) &&\n       (pcVar2 = strchr(\"AEIOUaeiou\",(int)param_1[(long)local_1c + -1]), pcVar2 == (char *)0x0))\n    break;\n    local_1c = local_1c + -1;\n  }\n  out_2496._0_1_ = param_1[local_1c];\n  return &out_2496;\n}"
    },
    {
        "task_id": 118,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  char *pcVar3;\n  long lVar4;\n  char *pcVar5;\n  \n  lVar4 = -1;\n  pcVar5 = param_1;\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  iVar2 = ~(uint)lVar4 - 3;\n  if (iVar2 < 1) {\n    out_2757._0_1_ = 0;\n    return &out_2757;\n  }\n  pcVar5 = param_1 + iVar2;\n  do {\n    cVar1 = *pcVar5;\n    pcVar3 = strchr(\"AEIOUaeiou\",(int)cVar1);\n    if (((pcVar3 != (char *)0x0) &&\n        (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[1]), pcVar3 == (char *)0x0)) &&\n       (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[-1]), pcVar3 == (char *)0x0)) goto LAB_00101201;\n    pcVar5 = pcVar5 + -1;\n  } while (pcVar5 != param_1 + (((long)iVar2 + -1) - (ulong)(~(uint)lVar4 - 4)));\n  out_2757._0_1_ = '\\0';\n  cVar1 = (char)out_2757;\nLAB_00101201:\n  out_2757._0_1_ = cVar1;\n  return &out_2757;\n}"
    },
    {
        "task_id": 118,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(char *param_1)\n\n{\n  char cVar1;\n  size_t sVar2;\n  char *pcVar3;\n  int iVar4;\n  char *pcVar5;\n  \n  sVar2 = strlen(param_1);\n  iVar4 = (int)sVar2 + -2;\n  if (0 < iVar4) {\n    pcVar5 = param_1 + iVar4;\n    do {\n      cVar1 = *pcVar5;\n      pcVar3 = strchr(\"AEIOUaeiou\",(int)cVar1);\n      if (((pcVar3 != (char *)0x0) &&\n          (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[1]), pcVar3 == (char *)0x0)) &&\n         (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[-1]), pcVar3 == (char *)0x0)) goto LAB_001014f7;\n      pcVar5 = pcVar5 + -1;\n    } while (param_1 + (((long)iVar4 + -1) - (ulong)((int)sVar2 - 3)) != pcVar5);\n  }\n  out_2757._0_1_ = '\\0';\n  cVar1 = (char)out_2757;\nLAB_001014f7:\n  out_2757._0_1_ = cVar1;\n  return &out_2757;\n}"
    },
    {
        "task_id": 118,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined2 * func0(char *param_1)\n\n{\n  char cVar1;\n  size_t sVar2;\n  char *pcVar3;\n  int iVar4;\n  char *pcVar5;\n  \n  sVar2 = strlen(param_1);\n  iVar4 = (int)sVar2 + -2;\n  if (0 < iVar4) {\n    pcVar5 = param_1 + iVar4;\n    do {\n      cVar1 = *pcVar5;\n      pcVar3 = strchr(\"AEIOUaeiou\",(int)cVar1);\n      if (((pcVar3 != (char *)0x0) &&\n          (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[1]), pcVar3 == (char *)0x0)) &&\n         (pcVar3 = strchr(\"AEIOUaeiou\",(int)pcVar5[-1]), pcVar3 == (char *)0x0)) goto LAB_001014f7;\n      pcVar5 = pcVar5 + -1;\n    } while (param_1 + (((long)iVar4 + -1) - (ulong)((int)sVar2 - 3)) != pcVar5);\n  }\n  out_2757._0_1_ = '\\0';\n  cVar1 = (char)out_2757;\nLAB_001014f7:\n  out_2757._0_1_ = cVar1;\n  return &out_2757;\n}"
    },
    {
        "task_id": 119,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(char *param_1,char *param_2)\n\n{\n  bool bVar1;\n  size_t sVar2;\n  size_t sVar3;\n  undefined *puVar4;\n  int local_1c;\n  int local_18;\n  \n  local_1c = 0;\n  sVar2 = strlen(param_1);\n  sVar3 = strlen(param_2);\n  bVar1 = true;\n  for (local_18 = 0; local_18 < (int)sVar2; local_18 = local_18 + 1) {\n    if (param_1[local_18] == '(') {\n      local_1c = local_1c + 1;\n    }\n    if (param_1[local_18] == ')') {\n      local_1c = local_1c + -1;\n    }\n    if (local_1c < 0) {\n      bVar1 = false;\n    }\n  }\n  for (local_18 = 0; local_18 < (int)sVar3; local_18 = local_18 + 1) {\n    if (param_2[local_18] == '(') {\n      local_1c = local_1c + 1;\n    }\n    if (param_2[local_18] == ')') {\n      local_1c = local_1c + -1;\n    }\n    if (local_1c < 0) {\n      bVar1 = false;\n    }\n  }\n  if ((local_1c == 0) && (bVar1)) {\n    puVar4 = &DAT_00102008;\n  }\n  else {\n    local_1c = 0;\n    bVar1 = true;\n    for (local_18 = 0; local_18 < (int)sVar3; local_18 = local_18 + 1) {\n      if (param_2[local_18] == '(') {\n        local_1c = local_1c + 1;\n      }\n      if (param_2[local_18] == ')') {\n        local_1c = local_1c + -1;\n      }\n      if (local_1c < 0) {\n        bVar1 = false;\n      }\n    }\n    for (local_18 = 0; local_18 < (int)sVar2; local_18 = local_18 + 1) {\n      if (param_1[local_18] == '(') {\n        local_1c = local_1c + 1;\n      }\n      if (param_1[local_18] == ')') {\n        local_1c = local_1c + -1;\n      }\n      if (local_1c < 0) {\n        bVar1 = false;\n      }\n    }\n    if ((local_1c == 0) && (bVar1)) {\n      puVar4 = &DAT_00102008;\n    }\n    else {\n      puVar4 = &DAT_0010200c;\n    }\n  }\n  return puVar4;\n}"
    },
    {
        "task_id": 119,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  bool bVar2;\n  int iVar3;\n  long lVar4;\n  long lVar5;\n  char *pcVar6;\n  undefined1 *puVar7;\n  int iVar8;\n  int iVar9;\n  \n  lVar4 = -1;\n  pcVar6 = param_1;\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar1 != '\\0');\n  iVar9 = ~(uint)lVar4 - 1;\n  lVar5 = -1;\n  pcVar6 = param_2;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    cVar1 = *pcVar6;\n    pcVar6 = pcVar6 + 1;\n  } while (cVar1 != '\\0');\n  iVar8 = ~(uint)lVar5 - 1;\n  if (iVar9 < 1) {\n    bVar2 = true;\n    iVar3 = 0;\n    if (iVar8 < 1) {\n      return &DAT_00102004;\n    }\nLAB_001011d8:\n    pcVar6 = param_2;\n    do {\n      if (*pcVar6 == '(') {\n        iVar3 = iVar3 + 1;\n      }\n      else {\n        iVar3 = iVar3 - (uint)(*pcVar6 == ')');\n      }\n      if (iVar3 < 0) {\n        bVar2 = false;\n      }\n      pcVar6 = pcVar6 + 1;\n    } while (param_2 + (ulong)(~(uint)lVar5 - 2) + 1 != pcVar6);\n    if ((bVar2) && (iVar3 == 0)) {\n      return &DAT_00102004;\n    }\n    lVar4 = 0;\n    bVar2 = true;\n    iVar3 = 0;\n    do {\n      if (param_2[lVar4] == '(') {\n        iVar3 = iVar3 + 1;\n      }\n      else {\n        iVar3 = iVar3 - (uint)(param_2[lVar4] == ')');\n      }\n      if (iVar3 < 0) {\n        bVar2 = false;\n      }\n      lVar4 = lVar4 + 1;\n    } while ((int)lVar4 < iVar8);\n    if (iVar9 < 1) goto LAB_001012ab;\n  }\n  else {\n    bVar2 = true;\n    iVar3 = 0;\n    pcVar6 = param_1;\n    do {\n      if (*pcVar6 == '(') {\n        iVar3 = iVar3 + 1;\n      }\n      else {\n        iVar3 = iVar3 - (uint)(*pcVar6 == ')');\n      }\n      if (iVar3 < 0) {\n        bVar2 = false;\n      }\n      pcVar6 = pcVar6 + 1;\n    } while (pcVar6 != param_1 + (ulong)(~(uint)lVar4 - 2) + 1);\n    if (0 < iVar8) goto LAB_001011d8;\n    if ((iVar3 == 0) && (bVar2)) {\n      return &DAT_00102004;\n    }\n    bVar2 = true;\n    iVar3 = 0;\n    if (iVar9 < 1) {\n      return &DAT_00102004;\n    }\n  }\n  lVar4 = 0;\n  do {\n    if (param_1[lVar4] == '(') {\n      iVar3 = iVar3 + 1;\n    }\n    else {\n      iVar3 = iVar3 - (uint)(param_1[lVar4] == ')');\n    }\n    if (iVar3 < 0) {\n      bVar2 = false;\n    }\n    lVar4 = lVar4 + 1;\n  } while ((int)lVar4 < iVar9);\nLAB_001012ab:\n  if ((iVar3 != 0) || (puVar7 = &DAT_00102004, !bVar2)) {\n    puVar7 = &DAT_00102008;\n  }\n  return puVar7;\n}"
    },
    {
        "task_id": 119,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  char *pcVar4;\n  bool bVar5;\n  bool bVar6;\n  long lVar7;\n  int iVar8;\n  char *pcVar9;\n  \n  sVar3 = strlen(param_1);\n  iVar1 = (int)sVar3;\n  sVar3 = strlen(param_2);\n  iVar2 = (int)sVar3;\n  if (iVar1 < 1) {\n    iVar8 = 0;\n    bVar6 = true;\n    if (iVar2 < 1) goto LAB_00101671;\nLAB_00101570:\n    pcVar9 = param_2 + (ulong)(iVar2 - 1) + 1;\n    pcVar4 = param_2;\n    do {\n      while( true ) {\n        if (*pcVar4 != '(') break;\n        iVar8 = iVar8 + 1;\n        if (iVar8 < 0) {\n          bVar6 = false;\n        }\n        pcVar4 = pcVar4 + 1;\n        if (pcVar4 == pcVar9) goto LAB_001015c0;\n      }\n      iVar8 = iVar8 - (uint)(*pcVar4 == ')');\n      if (iVar8 < 0) {\n        bVar6 = false;\n      }\n      pcVar4 = pcVar4 + 1;\n    } while (pcVar4 != pcVar9);\nLAB_001015c0:\n    if ((iVar8 == 0) && (bVar6)) {\nLAB_001015d0:\n      return &DAT_00102004;\n    }\n    bVar6 = true;\n    iVar2 = 0;\n    bVar5 = true;\n    do {\n      while (*param_2 != '(') {\n        iVar2 = iVar2 - (uint)(*param_2 == ')');\n        if (iVar2 < 0) {\n          bVar6 = false;\n          bVar5 = false;\n        }\n        param_2 = param_2 + 1;\n        if (param_2 == pcVar9) goto LAB_00101622;\n      }\n      iVar2 = iVar2 + 1;\n      bVar6 = bVar5;\n      if (iVar2 < 0) {\n        bVar6 = false;\n      }\n      param_2 = param_2 + 1;\n      bVar5 = bVar6;\n    } while (param_2 != pcVar9);\nLAB_00101622:\n    if (0 < iVar1) goto LAB_00101627;\n  }\n  else {\n    bVar6 = true;\n    iVar8 = 0;\n    pcVar9 = param_1;\n    bVar5 = true;\n    do {\n      while (*pcVar9 != '(') {\n        iVar8 = iVar8 - (uint)(*pcVar9 == ')');\n        if (iVar8 < 0) {\n          bVar5 = false;\n          bVar6 = false;\n        }\n        pcVar9 = pcVar9 + 1;\n        if (pcVar9 == param_1 + (ulong)(iVar1 - 1) + 1) goto LAB_00101568;\n      }\n      iVar8 = iVar8 + 1;\n      bVar6 = bVar5;\n      if (iVar8 < 0) {\n        bVar6 = false;\n      }\n      pcVar9 = pcVar9 + 1;\n      bVar5 = bVar6;\n    } while (pcVar9 != param_1 + (ulong)(iVar1 - 1) + 1);\nLAB_00101568:\n    if (0 < iVar2) goto LAB_00101570;\n    if ((iVar8 == 0) && (bVar6)) goto LAB_001015d0;\n    iVar2 = 0;\n    bVar6 = true;\nLAB_00101627:\n    lVar7 = 0;\n    do {\n      while (param_1[lVar7] != '(') {\n        iVar2 = iVar2 - (uint)(param_1[lVar7] == ')');\n        if (iVar2 < 0) {\n          bVar6 = false;\n        }\n        lVar7 = lVar7 + 1;\n        if (iVar1 <= (int)lVar7) goto LAB_00101668;\n      }\n      iVar2 = iVar2 + 1;\n      if (iVar2 < 0) {\n        bVar6 = false;\n      }\n      lVar7 = lVar7 + 1;\n    } while ((int)lVar7 < iVar1);\n  }\nLAB_00101668:\n  if ((iVar2 != 0) || (!bVar6)) {\n    return &DAT_00102008;\n  }\nLAB_00101671:\n  return &DAT_00102004;\n}"
    },
    {
        "task_id": 119,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  char *pcVar4;\n  bool bVar5;\n  bool bVar6;\n  long lVar7;\n  int iVar8;\n  char *pcVar9;\n  \n  sVar3 = strlen(param_1);\n  iVar1 = (int)sVar3;\n  sVar3 = strlen(param_2);\n  iVar2 = (int)sVar3;\n  if (iVar1 < 1) {\n    iVar8 = 0;\n    bVar6 = true;\n    if (iVar2 < 1) goto LAB_00101671;\nLAB_00101570:\n    pcVar9 = param_2 + (ulong)(iVar2 - 1) + 1;\n    pcVar4 = param_2;\n    do {\n      while( true ) {\n        if (*pcVar4 != '(') break;\n        iVar8 = iVar8 + 1;\n        if (iVar8 < 0) {\n          bVar6 = false;\n        }\n        pcVar4 = pcVar4 + 1;\n        if (pcVar9 == pcVar4) goto LAB_001015c0;\n      }\n      iVar8 = iVar8 - (uint)(*pcVar4 == ')');\n      if (iVar8 < 0) {\n        bVar6 = false;\n      }\n      pcVar4 = pcVar4 + 1;\n    } while (pcVar9 != pcVar4);\nLAB_001015c0:\n    if ((iVar8 == 0) && (bVar6)) {\nLAB_001015d0:\n      return &DAT_00102004;\n    }\n    bVar6 = true;\n    iVar2 = 0;\n    bVar5 = true;\n    do {\n      while (*param_2 != '(') {\n        iVar2 = iVar2 - (uint)(*param_2 == ')');\n        if (iVar2 < 0) {\n          bVar6 = false;\n          bVar5 = false;\n        }\n        param_2 = param_2 + 1;\n        if (pcVar9 == param_2) goto LAB_00101622;\n      }\n      iVar2 = iVar2 + 1;\n      bVar6 = bVar5;\n      if (iVar2 < 0) {\n        bVar6 = false;\n      }\n      param_2 = param_2 + 1;\n      bVar5 = bVar6;\n    } while (pcVar9 != param_2);\nLAB_00101622:\n    if (0 < iVar1) goto LAB_00101627;\n  }\n  else {\n    bVar6 = true;\n    iVar8 = 0;\n    pcVar9 = param_1;\n    bVar5 = true;\n    do {\n      while (*pcVar9 != '(') {\n        iVar8 = iVar8 - (uint)(*pcVar9 == ')');\n        if (iVar8 < 0) {\n          bVar5 = false;\n          bVar6 = false;\n        }\n        pcVar9 = pcVar9 + 1;\n        if (pcVar9 == param_1 + (ulong)(iVar1 - 1) + 1) goto LAB_00101568;\n      }\n      iVar8 = iVar8 + 1;\n      bVar6 = bVar5;\n      if (iVar8 < 0) {\n        bVar6 = false;\n      }\n      pcVar9 = pcVar9 + 1;\n      bVar5 = bVar6;\n    } while (pcVar9 != param_1 + (ulong)(iVar1 - 1) + 1);\nLAB_00101568:\n    if (0 < iVar2) goto LAB_00101570;\n    if ((iVar8 == 0) && (bVar6)) goto LAB_001015d0;\n    iVar2 = 0;\n    bVar6 = true;\nLAB_00101627:\n    lVar7 = 0;\n    do {\n      while (param_1[lVar7] != '(') {\n        iVar2 = iVar2 - (uint)(param_1[lVar7] == ')');\n        if (iVar2 < 0) {\n          bVar6 = false;\n        }\n        lVar7 = lVar7 + 1;\n        if (iVar1 <= (int)lVar7) goto LAB_00101668;\n      }\n      iVar2 = iVar2 + 1;\n      if (iVar2 < 0) {\n        bVar6 = false;\n      }\n      lVar7 = lVar7 + 1;\n    } while ((int)lVar7 < iVar1);\n  }\nLAB_00101668:\n  if ((iVar2 != 0) || (!bVar6)) {\n    return &DAT_00102008;\n  }\nLAB_00101671:\n  return &DAT_00102004;\n}"
    },
    {
        "task_id": 120,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,int param_3,long param_4)\n\n{\n  undefined4 uVar1;\n  int local_18;\n  int local_14;\n  int local_10;\n  \n  for (local_18 = 0; local_18 < param_2 + -1; local_18 = local_18 + 1) {\n    for (local_14 = 0; local_14 < (param_2 - local_18) + -1; local_14 = local_14 + 1) {\n      if (*(int *)(param_1 + ((long)local_14 + 1) * 4) < *(int *)(param_1 + (long)local_14 * 4)) {\n        uVar1 = *(undefined4 *)(param_1 + (long)local_14 * 4);\n        *(undefined4 *)(param_1 + (long)local_14 * 4) =\n             *(undefined4 *)(param_1 + ((long)local_14 + 1) * 4);\n        *(undefined4 *)(((long)local_14 + 1) * 4 + param_1) = uVar1;\n      }\n    }\n  }\n  for (local_10 = 0; local_10 < param_3; local_10 = local_10 + 1) {\n    *(undefined4 *)(param_4 + (long)local_10 * 4) =\n         *(undefined4 *)(param_1 + (long)(local_10 + (param_2 - param_3)) * 4);\n  }\n  return;\n}"
    },
    {
        "task_id": 120,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int param_3,long param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  ulong uVar3;\n  int iVar4;\n  bool bVar5;\n  \n  iVar4 = param_2 + -1;\n  if (0 < iVar4) {\n    do {\n      if (0 < iVar4) {\n        piVar2 = param_1;\n        do {\n          iVar1 = *piVar2;\n          if (piVar2[1] < iVar1) {\n            *piVar2 = piVar2[1];\n            piVar2[1] = iVar1;\n          }\n          piVar2 = piVar2 + 1;\n        } while (piVar2 != param_1 + (ulong)(iVar4 - 1) + 1);\n      }\n      iVar4 = iVar4 + -1;\n    } while (iVar4 != 0);\n  }\n  if (0 < param_3) {\n    uVar3 = 0;\n    do {\n      *(int *)(param_4 + uVar3 * 4) = param_1[((long)param_2 - (long)param_3) + uVar3];\n      bVar5 = uVar3 != param_3 - 1;\n      uVar3 = uVar3 + 1;\n    } while (bVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 120,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int param_3,long param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  ulong uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  uVar4 = param_2 - 1;\n  if (0 < (int)uVar4) {\n    do {\n      uVar4 = uVar4 - 1;\n      piVar2 = param_1;\n      do {\n        iVar1 = *piVar2;\n        if (piVar2[1] < iVar1) {\n          *piVar2 = piVar2[1];\n          piVar2[1] = iVar1;\n        }\n        piVar2 = piVar2 + 1;\n      } while (param_1 + (ulong)uVar4 + 1 != piVar2);\n    } while (uVar4 != 0);\n  }\n  if (0 < param_3) {\n    uVar3 = 0;\n    do {\n      *(int *)(param_4 + uVar3 * 4) = param_1[(long)(param_2 - param_3) + uVar3];\n      bVar5 = param_3 - 1 != uVar3;\n      uVar3 = uVar3 + 1;\n    } while (bVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 120,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,uint param_3,int *param_4)\n\n{\n  undefined4 *puVar1;\n  undefined4 *puVar2;\n  int iVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  int *piVar8;\n  long lVar9;\n  ulong uVar10;\n  uint uVar11;\n  bool bVar12;\n  \n  uVar11 = param_2 - 1;\n  if (0 < (int)uVar11) {\n    do {\n      uVar11 = uVar11 - 1;\n      piVar8 = param_1;\n      do {\n        iVar3 = *piVar8;\n        if (piVar8[1] < iVar3) {\n          *piVar8 = piVar8[1];\n          piVar8[1] = iVar3;\n        }\n        piVar8 = piVar8 + 1;\n      } while (piVar8 != param_1 + (ulong)uVar11 + 1);\n    } while (uVar11 != 0);\n  }\n  if (0 < (int)param_3) {\n    param_2 = param_2 - param_3;\n    piVar8 = param_1 + param_2;\n    if ((param_4 < param_1 + (long)param_2 + 4 && piVar8 < param_4 + 4) || (param_3 - 1 < 4)) {\n      uVar10 = 0;\n      do {\n        param_4[uVar10] = piVar8[uVar10];\n        bVar12 = uVar10 != param_3 - 1;\n        uVar10 = uVar10 + 1;\n      } while (bVar12);\n      return;\n    }\n    lVar9 = 0;\n    do {\n      puVar1 = (undefined4 *)((long)piVar8 + lVar9);\n      uVar4 = puVar1[1];\n      uVar5 = puVar1[2];\n      uVar6 = puVar1[3];\n      puVar2 = (undefined4 *)((long)param_4 + lVar9);\n      *puVar2 = *puVar1;\n      puVar2[1] = uVar4;\n      puVar2[2] = uVar5;\n      puVar2[3] = uVar6;\n      lVar9 = lVar9 + 0x10;\n    } while (lVar9 != (ulong)(param_3 >> 2) << 4);\n    uVar11 = param_3 & 0xfffffffc;\n    if ((param_3 & 3) != 0) {\n      param_4[uVar11] = param_1[(int)(param_2 + uVar11)];\n      iVar3 = uVar11 + 1;\n      if (iVar3 < (int)param_3) {\n        iVar7 = uVar11 + 2;\n        param_4[iVar3] = param_1[iVar3 + param_2];\n        if (iVar7 < (int)param_3) {\n          param_4[iVar7] = param_1[param_2 + iVar7];\n        }\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 121,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; local_c * 2 < param_2; local_c = local_c + 1) {\n    if (*(int *)(param_1 + (long)(local_c * 2) * 4) % 2 == 1) {\n      local_10 = local_10 + *(int *)(param_1 + (long)(local_c * 2) * 4);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 121,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1U >> 1) * 2 + 2;\n    iVar2 = 0;\n    do {\n      if (*param_1 % 2 == 1) {\n        iVar2 = *param_1 + iVar2;\n      }\n      param_1 = param_1 + 2;\n    } while (param_1 != piVar1);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 121,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (0 < param_2) {\n    iVar2 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1U >> 1) * 2 + 2;\n    do {\n      if (*param_1 % 2 == 1) {\n        iVar2 = *param_1 + iVar2;\n      }\n      param_1 = param_1 + 2;\n    } while (param_1 != piVar1);\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 121,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint uVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  \n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    uVar6 = param_2 - 1;\n    if (uVar6 < 8) {\n      iVar7 = 0;\n      iVar8 = 0;\n      uVar6 = 0;\n    }\n    else {\n      iVar8 = 0;\n      iVar9 = 0;\n      iVar10 = 0;\n      iVar11 = 0;\n      puVar5 = param_1;\n      do {\n        uVar1 = *puVar5;\n        uVar2 = puVar5[2];\n        uVar3 = puVar5[4];\n        uVar4 = puVar5[6];\n        puVar5 = puVar5 + 8;\n        iVar8 = iVar8 + (-(uint)((uVar1 - ((int)uVar1 >> 0x1f) & _DAT_00102010) +\n                                 ((int)uVar1 >> 0x1f) == _DAT_00102010) & uVar1);\n        iVar9 = iVar9 + (-(uint)((uVar2 - ((int)uVar2 >> 0x1f) & _UNK_00102014) +\n                                 ((int)uVar2 >> 0x1f) == _UNK_00102014) & uVar2);\n        iVar10 = iVar10 + (-(uint)((uVar3 - ((int)uVar3 >> 0x1f) & _UNK_00102018) +\n                                   ((int)uVar3 >> 0x1f) == _UNK_00102018) & uVar3);\n        iVar11 = iVar11 + (-(uint)((uVar4 - ((int)uVar4 >> 0x1f) & _UNK_0010201c) +\n                                   ((int)uVar4 >> 0x1f) == _UNK_0010201c) & uVar4);\n      } while (puVar5 != param_1 + (ulong)(uVar6 >> 3) * 8);\n      iVar7 = (uVar6 >> 3) * 4;\n      uVar6 = uVar6 & 0xfffffff8;\n      iVar8 = iVar8 + iVar10 + iVar9 + iVar11;\n    }\n    if ((int)param_1[(int)uVar6] % 2 == 1) {\n      iVar8 = param_1[(int)uVar6] + iVar8;\n    }\n    iVar7 = iVar7 * 2;\n    if (iVar7 + 2 < param_2) {\n      if ((int)param_1[iVar7 + 2] % 2 == 1) {\n        iVar8 = param_1[iVar7 + 2] + iVar8;\n      }\n      if (iVar7 + 4 < param_2) {\n        if ((int)param_1[iVar7 + 4] % 2 == 1) {\n          iVar8 = param_1[iVar7 + 4] + iVar8;\n        }\n        if (iVar7 + 6 < param_2) {\n          if ((int)param_1[iVar7 + 6] % 2 == 1) {\n            iVar8 = param_1[iVar7 + 6] + iVar8;\n          }\n          return iVar8;\n        }\n      }\n    }\n  }\n  return iVar8;\n}"
    },
    {
        "task_id": 122,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    if ((-100 < *(int *)(param_1 + (long)local_c * 4)) &&\n       (*(int *)(param_1 + (long)local_c * 4) < 100)) {\n      local_10 = local_10 + *(int *)(param_1 + (long)local_c * 4);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 122,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar2 = 0;\n    do {\n      if (*param_1 + 99U < 199) {\n        iVar2 = *param_1 + iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 122,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  \n  if (0 < param_2) {\n    iVar2 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      if (*param_1 + 99U < 199) {\n        iVar2 = *param_1 + iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 122,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,uint param_2)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint *puVar7;\n  uint *puVar8;\n  uint uVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  \n  if ((int)param_2 < 1) {\n    iVar10 = 0;\n  }\n  else {\n    if (param_2 - 1 < 4) {\n      uVar9 = 0;\n      iVar10 = 0;\n    }\n    else {\n      iVar10 = 0;\n      iVar11 = 0;\n      iVar12 = 0;\n      iVar13 = 0;\n      puVar8 = param_1;\n      do {\n        uVar9 = *puVar8;\n        puVar1 = puVar8 + 1;\n        puVar2 = puVar8 + 2;\n        puVar3 = puVar8 + 3;\n        uVar4 = *puVar8;\n        puVar5 = puVar8 + 1;\n        puVar6 = puVar8 + 2;\n        puVar7 = puVar8 + 3;\n        puVar8 = puVar8 + 4;\n        iVar10 = iVar10 + (~-(uint)(_DAT_00102050 - _DAT_00102060 <\n                                   (int)((uVar9 + _DAT_00102040) - _DAT_00102060)) & uVar4);\n        iVar11 = iVar11 + (~-(uint)(_UNK_00102054 - _UNK_00102064 <\n                                   (int)((*puVar1 + _UNK_00102044) - _UNK_00102064)) & *puVar5);\n        iVar12 = iVar12 + (~-(uint)(_UNK_00102058 - _UNK_00102068 <\n                                   (int)((*puVar2 + _UNK_00102048) - _UNK_00102068)) & *puVar6);\n        iVar13 = iVar13 + (~-(uint)(_UNK_0010205c - _UNK_0010206c <\n                                   (int)((*puVar3 + _UNK_0010204c) - _UNK_0010206c)) & *puVar7);\n      } while (puVar8 != param_1 + (ulong)(param_2 >> 2) * 4);\n      uVar9 = param_2 & 0xfffffffc;\n      iVar10 = iVar10 + iVar12 + iVar11 + iVar13;\n      if ((param_2 & 3) == 0) {\n        return iVar10;\n      }\n    }\n    if (param_1[(int)uVar9] + 99 < 199) {\n      iVar10 = param_1[(int)uVar9] + iVar10;\n    }\n    if ((int)(uVar9 + 1) < (int)param_2) {\n      if (param_1[(int)(uVar9 + 1)] + 99 < 199) {\n        iVar10 = param_1[(int)(uVar9 + 1)] + iVar10;\n      }\n      if ((int)(uVar9 + 2) < (int)param_2) {\n        if (param_1[(int)(uVar9 + 2)] + 99 < 199) {\n          iVar10 = param_1[(int)(uVar9 + 2)] + iVar10;\n        }\n        if ((int)(uVar9 + 3) < (int)param_2) {\n          if (param_1[(int)(uVar9 + 3)] + 99 < 199) {\n            iVar10 = param_1[(int)(uVar9 + 3)] + iVar10;\n          }\n          return iVar10;\n        }\n      }\n    }\n  }\n  return iVar10;\n}"
    },
    {
        "task_id": 123,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,undefined4 *param_2,int *param_3)\n\n{\n  int iVar1;\n  undefined4 *local_28;\n  int local_1c;\n  int local_18;\n  int local_14;\n  int local_10;\n  \n  local_18 = 10;\n  *param_3 = 1;\n  *param_2 = 1;\n  local_28 = param_2;\n  local_1c = param_1;\n  while (local_1c != 1) {\n    if (local_1c % 2 == 1) {\n      if (local_18 <= *param_3) {\n        local_18 = local_18 << 1;\n        local_28 = (undefined4 *)realloc(local_28,(long)local_18 * 4);\n      }\n      iVar1 = *param_3;\n      *param_3 = iVar1 + 1;\n      local_28[iVar1] = local_1c;\n      local_1c = local_1c * 3 + 1;\n    }\n    else {\n      local_1c = local_1c / 2;\n    }\n  }\n  for (local_14 = 1; local_14 < *param_3; local_14 = local_14 + 1) {\n    iVar1 = local_28[local_14];\n    local_10 = local_14;\n    while ((local_10 = local_10 + -1, -1 < local_10 && (iVar1 < (int)local_28[local_10]))) {\n      local_28[(long)local_10 + 1] = local_28[local_10];\n    }\n    local_28[(long)local_10 + 1] = iVar1;\n  }\n  return;\n}"
    },
    {
        "task_id": 123,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2,int *param_3)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  ulong uVar4;\n  int *piVar5;\n  int iVar6;\n  \n  *param_3 = 1;\n  *param_2 = 1;\n  if (param_1 != 1) {\n    uVar4 = (ulong)param_1;\n    iVar6 = 10;\n    do {\n      iVar1 = (int)uVar4;\n      iVar2 = (int)(uVar4 >> 0x1f);\n      if ((iVar1 + iVar2 & 1U) - iVar2 == 1) {\n        if (iVar6 <= *param_3) {\n          iVar6 = iVar6 * 2;\n          param_2 = (int *)realloc(param_2,(long)iVar6 << 2);\n        }\n        iVar2 = *param_3;\n        *param_3 = iVar2 + 1;\n        param_2[iVar2] = iVar1;\n        uVar4 = uVar4 * 3 + 1 & 0xffffffff;\n      }\n      else {\n        uVar4 = (ulong)(uint)(iVar1 + (int)(uVar4 >> 0x1f) >> 1);\n      }\n    } while ((int)uVar4 != 1);\n  }\n  if (1 < *param_3) {\n    piVar5 = param_2;\n    iVar6 = 0;\n    do {\n      iVar2 = piVar5[1];\n      piVar3 = piVar5;\n      iVar1 = iVar6;\n      if (-1 < iVar6) {\n        do {\n          if (*piVar3 <= iVar2) break;\n          piVar3[1] = *piVar3;\n          iVar1 = iVar1 + -1;\n          piVar3 = piVar3 + -1;\n        } while (iVar1 != -1);\n      }\n      param_2[(long)iVar1 + 1] = iVar2;\n      piVar5 = piVar5 + 1;\n      iVar2 = iVar6 + 2;\n      iVar6 = iVar6 + 1;\n    } while (iVar2 < *param_3);\n  }\n  return;\n}"
    },
    {
        "task_id": 123,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2,uint *param_3)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int *piVar3;\n  long lVar4;\n  int *piVar5;\n  ulong uVar6;\n  uint uVar7;\n  int iVar8;\n  ulong uVar9;\n  int *piVar10;\n  int *piVar11;\n  int iVar12;\n  \n  *param_3 = 1;\n  *param_2 = 1;\n  if (param_1 == 1) {\n    uVar6 = (ulong)*param_3;\n  }\n  else {\n    uVar6 = (ulong)(int)*param_3;\n    uVar9 = (ulong)param_1;\n    iVar12 = 10;\n    do {\n      while (iVar8 = (int)uVar9, iVar2 = (int)(uVar9 >> 0x1f), (iVar8 + iVar2 & 1U) - iVar2 != 1) {\n        uVar7 = iVar8 + (int)(uVar9 >> 0x1f) >> 1;\n        uVar9 = (ulong)uVar7;\n        if (uVar7 == 1) goto LAB_001014ac;\n      }\n      if (iVar12 <= (int)uVar6) {\n        iVar12 = iVar12 * 2;\n        param_2 = (int *)realloc(param_2,(long)iVar12 << 2);\n        uVar6 = (ulong)(int)*param_3;\n      }\n      *param_3 = (int)uVar6 + 1;\n      param_2[uVar6] = iVar8;\n      uVar1 = uVar9 * 3 + 1;\n      uVar9 = uVar1 & 0xffffffff;\n      uVar6 = (ulong)(int)*param_3;\n    } while ((int)uVar1 != 1);\n  }\nLAB_001014ac:\n  lVar4 = 0;\n  piVar3 = param_2;\n  if (1 < (int)uVar6) {\n    do {\n      piVar11 = piVar3 + 1;\n      iVar12 = *piVar11;\n      piVar5 = piVar11;\n      do {\n        piVar10 = piVar5;\n        if (piVar5[-1] <= iVar12) break;\n        *piVar5 = piVar5[-1];\n        piVar5 = piVar5 + -1;\n        piVar10 = param_2;\n      } while (piVar3 + -lVar4 != piVar5);\n      *piVar10 = iVar12;\n      iVar12 = (int)lVar4;\n      lVar4 = lVar4 + 1;\n      piVar3 = piVar11;\n    } while (iVar12 + 2 < (int)*param_3);\n  }\n  return;\n}"
    },
    {
        "task_id": 123,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <stdlib.h>\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2,uint *param_3)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int *piVar3;\n  long lVar4;\n  int *piVar5;\n  ulong uVar6;\n  uint uVar7;\n  int iVar8;\n  ulong uVar9;\n  int *piVar10;\n  int *piVar11;\n  int iVar12;\n  \n  *param_3 = 1;\n  *param_2 = 1;\n  if (param_1 == 1) {\n    uVar6 = (ulong)*param_3;\n  }\n  else {\n    uVar6 = (ulong)(int)*param_3;\n    uVar9 = (ulong)param_1;\n    iVar12 = 10;\n    do {\n      while (iVar8 = (int)uVar9, iVar2 = (int)(uVar9 >> 0x1f), (iVar8 + iVar2 & 1U) - iVar2 != 1) {\n        uVar7 = iVar8 + (int)(uVar9 >> 0x1f) >> 1;\n        uVar9 = (ulong)uVar7;\n        if (uVar7 == 1) goto LAB_001014ac;\n      }\n      if (iVar12 <= (int)uVar6) {\n        iVar12 = iVar12 * 2;\n        param_2 = (int *)realloc(param_2,(long)iVar12 << 2);\n        uVar6 = (ulong)(int)*param_3;\n      }\n      *param_3 = (int)uVar6 + 1;\n      param_2[uVar6] = iVar8;\n      uVar1 = uVar9 * 3 + 1;\n      uVar9 = uVar1 & 0xffffffff;\n      uVar6 = (ulong)(int)*param_3;\n    } while ((int)uVar1 != 1);\n  }\nLAB_001014ac:\n  lVar4 = 0;\n  piVar3 = param_2;\n  if (1 < (int)uVar6) {\n    do {\n      piVar11 = piVar3 + 1;\n      iVar12 = *piVar11;\n      piVar5 = piVar11;\n      do {\n        piVar10 = piVar5;\n        if (piVar5[-1] <= iVar12) break;\n        *piVar5 = piVar5[-1];\n        piVar5 = piVar5 + -1;\n        piVar10 = param_2;\n      } while (piVar5 != piVar3 + -lVar4);\n      *piVar10 = iVar12;\n      iVar12 = (int)lVar4;\n      lVar4 = lVar4 + 1;\n      piVar3 = piVar11;\n    } while (iVar12 + 2 < (int)*param_3);\n  }\n  return;\n}"
    },
    {
        "task_id": 124,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  undefined8 uVar4;\n  long in_FS_OFFSET;\n  int local_2c;\n  char local_1b;\n  char local_1a;\n  undefined local_19;\n  char local_18;\n  char local_17;\n  undefined local_16;\n  char local_15;\n  char local_14;\n  char local_13;\n  char local_12;\n  undefined local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen(param_1);\n  if (sVar3 == 10) {\n    for (local_2c = 0; local_2c < 10; local_2c = local_2c + 1) {\n      if ((local_2c == 2) || (local_2c == 5)) {\n        if (param_1[local_2c] != '-') {\n          uVar4 = 0;\n          goto LAB_00101346;\n        }\n      }\n      else if ((param_1[local_2c] < '0') || ('9' < param_1[local_2c])) {\n        uVar4 = 0;\n        goto LAB_00101346;\n      }\n    }\n    local_1b = *param_1;\n    local_1a = param_1[1];\n    local_19 = 0;\n    local_18 = param_1[3];\n    local_17 = param_1[4];\n    local_16 = 0;\n    local_15 = param_1[6];\n    local_14 = param_1[7];\n    local_13 = param_1[8];\n    local_12 = param_1[9];\n    local_11 = 0;\n    iVar1 = atoi(&local_1b);\n    iVar2 = atoi(&local_18);\n    atoi(&local_15);\n    if ((iVar1 < 1) || (0xc < iVar1)) {\n      uVar4 = 0;\n    }\n    else if ((iVar2 < 1) || (0x1f < iVar2)) {\n      uVar4 = 0;\n    }\n    else if (((((iVar1 == 4) || (iVar1 == 6)) || (iVar1 == 9)) || (iVar1 == 0xb)) && (iVar2 == 0x1f)\n            ) {\n      uVar4 = 0;\n    }\n    else if ((iVar1 == 2) && (0x1d < iVar2)) {\n      uVar4 = 0;\n    }\n    else {\n      uVar4 = 1;\n    }\n  }\n  else {\n    uVar4 = 0;\n  }\nLAB_00101346:\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 124,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1)\n\n{\n  char cVar1;\n  uint uVar2;\n  int iVar3;\n  bool bVar4;\n  long lVar5;\n  long lVar6;\n  char *pcVar7;\n  long in_FS_OFFSET;\n  char local_2b;\n  char local_2a;\n  undefined local_29;\n  char local_28;\n  char local_27;\n  undefined local_26;\n  char local_25;\n  char local_24;\n  char local_23;\n  char local_22;\n  undefined local_21;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  lVar6 = -1;\n  pcVar7 = param_1;\n  do {\n    if (lVar6 == 0) break;\n    lVar6 = lVar6 + -1;\n    cVar1 = *pcVar7;\n    pcVar7 = pcVar7 + 1;\n  } while (cVar1 != '\\0');\n  bVar4 = false;\n  if (lVar6 == -0xc) {\n    lVar6 = 0;\n    do {\n      if (((int)lVar6 == 2) || ((int)lVar6 == 5)) {\n        if (param_1[lVar6] != '-') {\n          bVar4 = false;\n          goto LAB_001012cb;\n        }\n      }\n      else if (9 < (byte)(param_1[lVar6] - 0x30U)) {\n        bVar4 = false;\n        goto LAB_001012cb;\n      }\n      lVar6 = lVar6 + 1;\n    } while (lVar6 != 10);\n    local_2b = *param_1;\n    local_2a = param_1[1];\n    local_29 = 0;\n    local_28 = param_1[3];\n    local_27 = param_1[4];\n    local_26 = 0;\n    local_25 = param_1[6];\n    local_24 = param_1[7];\n    local_23 = param_1[8];\n    local_22 = param_1[9];\n    local_21 = 0;\n    lVar6 = strtol(&local_2b,(char **)0x0,10);\n    lVar5 = strtol(&local_28,(char **)0x0,10);\n    strtol(&local_25,(char **)0x0,10);\n    uVar2 = (uint)lVar6;\n    bVar4 = false;\n    if (uVar2 - 1 < 0xc) {\n      iVar3 = (int)lVar5;\n      if (iVar3 - 1U < 0x1f) {\n        if ((((uVar2 & 0xfffffffd) != 4) && ((uVar2 & 0xfffffffd) != 9)) ||\n           (bVar4 = false, iVar3 != 0x1f)) {\n          bVar4 = uVar2 != 2 || iVar3 < 0x1e;\n        }\n      }\n    }\n  }\nLAB_001012cb:\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return bVar4;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 124,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(undefined2 *param_1)\n\n{\n  uint uVar1;\n  int iVar2;\n  bool bVar3;\n  size_t sVar4;\n  long lVar5;\n  long lVar6;\n  long in_FS_OFFSET;\n  undefined2 local_2b;\n  undefined local_29;\n  undefined2 local_28;\n  undefined local_26;\n  undefined4 local_25;\n  undefined local_21;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar4 = strlen((char *)param_1);\n  bVar3 = false;\n  if (sVar4 == 10) {\n    lVar5 = 0;\n    do {\n      if (((int)lVar5 != 2) && ((int)lVar5 != 5)) {\n        if ((byte)(*(char *)((long)param_1 + lVar5) - 0x30U) < 10) goto LAB_00101530;\nLAB_0010154d:\n        bVar3 = false;\n        goto LAB_00101550;\n      }\n      if (*(char *)((long)param_1 + lVar5) != '-') goto LAB_0010154d;\nLAB_00101530:\n      lVar5 = lVar5 + 1;\n    } while (lVar5 != 10);\n    local_2b = *param_1;\n    local_29 = 0;\n    local_28 = *(undefined2 *)((long)param_1 + 3);\n    local_26 = 0;\n    local_25 = *(undefined4 *)(param_1 + 3);\n    local_21 = 0;\n    lVar5 = strtol((char *)&local_2b,(char **)0x0,10);\n    lVar6 = strtol((char *)&local_28,(char **)0x0,10);\n    strtol((char *)&local_25,(char **)0x0,10);\n    uVar1 = (uint)lVar5;\n    bVar3 = false;\n    if ((uVar1 - 1 < 0xc) && (iVar2 = (int)lVar6, iVar2 - 1U < 0x1f)) {\n      if ((((uVar1 & 0xfffffffd) != 4) && ((uVar1 & 0xfffffffd) != 9)) ||\n         (bVar3 = false, iVar2 != 0x1f)) {\n        bVar3 = uVar1 != 2 || iVar2 < 0x1e;\n      }\n    }\n  }\nLAB_00101550:\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return bVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 124,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(undefined2 *param_1)\n\n{\n  uint uVar1;\n  int iVar2;\n  bool bVar3;\n  bool bVar4;\n  size_t sVar5;\n  long lVar6;\n  long lVar7;\n  long in_FS_OFFSET;\n  undefined2 local_2b;\n  undefined local_29;\n  undefined2 local_28;\n  undefined local_26;\n  undefined4 local_25;\n  undefined local_21;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar5 = strlen((char *)param_1);\n  bVar4 = false;\n  bVar3 = false;\n  if ((((((sVar5 == 10) && ((byte)(*(char *)param_1 - 0x30U) < 10)) &&\n        ((byte)(*(char *)((long)param_1 + 1) - 0x30U) < 10)) &&\n       ((bVar4 = bVar3, *(char *)(param_1 + 1) == '-' &&\n        ((byte)(*(char *)((long)param_1 + 3) - 0x30U) < 10)))) &&\n      (((byte)(*(char *)(param_1 + 2) - 0x30U) < 10 &&\n       ((*(char *)((long)param_1 + 5) == '-' && ((byte)(*(char *)(param_1 + 3) - 0x30U) < 10))))))\n     && ((byte)(*(char *)((long)param_1 + 7) - 0x30U) < 10)) {\n    if (((byte)(*(char *)(param_1 + 4) - 0x30U) < 10) &&\n       ((byte)(*(char *)((long)param_1 + 9) - 0x30U) < 10)) {\n      local_2b = *param_1;\n      local_29 = 0;\n      local_28 = *(undefined2 *)((long)param_1 + 3);\n      local_26 = 0;\n      local_25 = *(undefined4 *)(param_1 + 3);\n      local_21 = 0;\n      lVar6 = strtol((char *)&local_2b,(char **)0x0,10);\n      lVar7 = strtol((char *)&local_28,(char **)0x0,10);\n      strtol((char *)&local_25,(char **)0x0,10);\n      uVar1 = (uint)lVar6;\n      bVar4 = false;\n      if ((uVar1 - 1 < 0xc) && (iVar2 = (int)lVar7, iVar2 - 1U < 0x1f)) {\n        if ((((uVar1 & 0xfffffffd) != 4) && ((uVar1 & 0xfffffffd) != 9)) ||\n           (bVar4 = false, iVar2 != 0x1f)) {\n          bVar4 = uVar1 != 2 || iVar2 < 0x1e;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n  }\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return bVar4;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 125,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}",
        "input_asm_prompt": "char ** func0(char *param_1,int *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  ushort **ppuVar4;\n  long in_FS_OFFSET;\n  int local_a4;\n  int local_a0;\n  uint local_9c;\n  int local_98;\n  char **local_90;\n  undefined8 local_88;\n  undefined8 local_80;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined4 local_28;\n  undefined local_24;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_a0 = 0;\n  local_9c = 0;\n  local_98 = 0;\n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  local_88 = 0;\n  local_80 = 0;\n  local_78 = 0;\n  local_70 = 0;\n  local_68 = 0;\n  local_60 = 0;\n  local_58 = 0;\n  local_50 = 0;\n  local_48 = 0;\n  local_40 = 0;\n  local_38 = 0;\n  local_30 = 0;\n  local_28 = 0;\n  local_24 = 0;\n  pcVar3 = strchr(param_1,0x20);\n  if ((pcVar3 == (char *)0x0) && (pcVar3 = strchr(param_1,0x2c), pcVar3 == (char *)0x0)) {\n    for (local_a4 = 0; local_a4 < iVar1; local_a4 = local_a4 + 1) {\n      ppuVar4 = __ctype_b_loc();\n      if ((((*ppuVar4)[param_1[local_a4]] & 0x200) != 0) && ((param_1[local_a4] + -0x61) % 2 == 1))\n      {\n        local_9c = local_9c + 1;\n      }\n    }\n    local_90 = (char **)malloc(8);\n    pcVar3 = (char *)malloc(0xc);\n    *local_90 = pcVar3;\n    sprintf(*local_90,\"%d\",(ulong)local_9c);\n    local_98 = 1;\n  }\n  else {\n    local_90 = (char **)malloc((long)(iVar1 + 1) << 3);\n    for (local_a4 = 0; local_a4 <= iVar1; local_a4 = local_a4 + 1) {\n      if (((param_1[local_a4] == ' ') || (param_1[local_a4] == ',')) || (param_1[local_a4] == '\\0'))\n      {\n        if (0 < local_a0) {\n          *(undefined *)((long)&local_88 + (long)local_a0) = 0;\n          pcVar3 = strdup((char *)&local_88);\n          local_90[local_98] = pcVar3;\n          local_98 = local_98 + 1;\n          local_a0 = 0;\n        }\n      }\n      else {\n        *(char *)((long)&local_88 + (long)local_a0) = param_1[local_a4];\n        local_a0 = local_a0 + 1;\n      }\n    }\n  }\n  *param_2 = local_98;\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_90;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 125,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void ** func0(byte *param_1,int *param_2)\n\n{\n  byte bVar1;\n  char *pcVar2;\n  void **ppvVar3;\n  ushort **ppuVar4;\n  void *pvVar5;\n  ulong uVar6;\n  int iVar7;\n  int iVar8;\n  byte *pbVar9;\n  long in_FS_OFFSET;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined8 local_88;\n  undefined8 local_80;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined4 local_48;\n  undefined local_44;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  uVar6 = 0xffffffffffffffff;\n  pbVar9 = param_1;\n  do {\n    if (uVar6 == 0) break;\n    uVar6 = uVar6 - 1;\n    bVar1 = *pbVar9;\n    pbVar9 = pbVar9 + 1;\n  } while (bVar1 != 0);\n  local_a8 = 0;\n  local_a0 = 0;\n  local_98 = 0;\n  local_90 = 0;\n  local_88 = 0;\n  local_80 = 0;\n  local_78 = 0;\n  local_70 = 0;\n  local_68 = 0;\n  local_60 = 0;\n  local_58 = 0;\n  local_50 = 0;\n  local_48 = 0;\n  local_44 = 0;\n  pcVar2 = strchr((char *)param_1,0x20);\n  iVar8 = (int)(~uVar6 - 1);\n  if (pcVar2 == (char *)0x0) {\n    pcVar2 = strchr((char *)param_1,0x2c);\n    if (pcVar2 == (char *)0x0) {\n      iVar7 = 0;\n      if (0 < iVar8) {\n        ppuVar4 = __ctype_b_loc();\n        pbVar9 = param_1 + (ulong)(iVar8 - 1) + 1;\n        iVar7 = 0;\n        do {\n          if ((*(byte *)((long)*ppuVar4 + (long)(char)*param_1 * 2 + 1) & 2) != 0) {\n            iVar7 = iVar7 + (uint)(((char)*param_1 + -0x61) % 2 == 1);\n          }\n          param_1 = param_1 + 1;\n        } while (param_1 != pbVar9);\n      }\n      ppvVar3 = (void **)malloc(8);\n      pvVar5 = malloc(0xc);\n      *ppvVar3 = pvVar5;\n      __sprintf_chk(pvVar5,1,0xc,&DAT_00102004,iVar7);\n      iVar8 = 1;\n      goto LAB_00101439;\n    }\n  }\n  ppvVar3 = (void **)malloc((long)(iVar8 + 1) << 3);\n  if (iVar8 < 0) {\n    iVar8 = 0;\n  }\n  else {\n    pbVar9 = param_1 + (~uVar6 - 1 & 0xffffffff) + 1;\n    iVar8 = 0;\n    iVar7 = 0;\n    do {\n      bVar1 = *param_1;\n      if (((bVar1 & 0xdf) == 0) || (bVar1 == 0x2c)) {\n        if (0 < iVar7) {\n          *(undefined *)((long)&local_a8 + (long)iVar7) = 0;\n          pcVar2 = strdup((char *)&local_a8);\n          ppvVar3[iVar8] = pcVar2;\n          iVar8 = iVar8 + 1;\n          iVar7 = 0;\n        }\n      }\n      else {\n        *(byte *)((long)&local_a8 + (long)iVar7) = bVar1;\n        iVar7 = iVar7 + 1;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pbVar9);\n  }\nLAB_00101439:\n  *param_2 = iVar8;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ppvVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 125,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void ** func0(byte *param_1,int *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  size_t sVar3;\n  char *pcVar4;\n  void **ppvVar5;\n  ushort **ppuVar6;\n  void *pvVar7;\n  long lVar8;\n  int iVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  undefined local_a8 [16];\n  undefined local_98 [16];\n  undefined local_88 [16];\n  undefined local_78 [16];\n  undefined local_68 [16];\n  undefined local_58 [16];\n  undefined4 local_48;\n  undefined local_44;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen((char *)param_1);\n  local_48 = 0;\n  local_44 = 0;\n  local_a8 = (undefined  [16])0x0;\n  local_98 = (undefined  [16])0x0;\n  local_88 = (undefined  [16])0x0;\n  local_78 = (undefined  [16])0x0;\n  local_68 = (undefined  [16])0x0;\n  local_58 = (undefined  [16])0x0;\n  pcVar4 = strchr((char *)param_1,0x20);\n  iVar10 = (int)sVar3;\n  if (pcVar4 == (char *)0x0) {\n    pcVar4 = strchr((char *)param_1,0x2c);\n    if (pcVar4 == (char *)0x0) {\n      if (iVar10 < 1) {\n        iVar9 = 0;\n      }\n      else {\n        ppuVar6 = __ctype_b_loc();\n        iVar9 = 0;\n        pbVar1 = param_1 + (ulong)(iVar10 - 1) + 1;\n        do {\n          if ((*(byte *)((long)*ppuVar6 + (long)(char)*param_1 * 2 + 1) & 2) != 0) {\n            iVar9 = iVar9 + (uint)(((char)*param_1 + -0x61) % 2 == 1);\n          }\n          param_1 = param_1 + 1;\n        } while (pbVar1 != param_1);\n      }\n      ppvVar5 = (void **)malloc(8);\n      pvVar7 = malloc(0xc);\n      *ppvVar5 = pvVar7;\n      iVar10 = 1;\n      __sprintf_chk(pvVar7,1,0xc,&DAT_00102004,iVar9);\n      goto LAB_001016b8;\n    }\n  }\n  ppvVar5 = (void **)malloc((long)(iVar10 + 1) << 3);\n  if (iVar10 < 0) {\n    iVar10 = 0;\n  }\n  else {\n    iVar9 = 0;\n    pbVar1 = param_1 + (sVar3 & 0xffffffff) + 1;\n    iVar10 = 0;\n    do {\n      while ((bVar2 = *param_1, (bVar2 & 0xdf) != 0 && (bVar2 != 0x2c))) {\n        lVar8 = (long)iVar9;\n        param_1 = param_1 + 1;\n        iVar9 = iVar9 + 1;\n        local_a8[lVar8] = bVar2;\n        if (pbVar1 == param_1) goto LAB_001016b8;\n      }\n      if (iVar9 != 0) {\n        local_a8[iVar9] = 0;\n        pcVar4 = strdup(local_a8);\n        iVar9 = 0;\n        lVar8 = (long)iVar10;\n        iVar10 = iVar10 + 1;\n        ppvVar5[lVar8] = pcVar4;\n      }\n      param_1 = param_1 + 1;\n    } while (pbVar1 != param_1);\n  }\nLAB_001016b8:\n  *param_2 = iVar10;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ppvVar5;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 125,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}",
        "input_asm_prompt": "void ** func0(byte *param_1,int *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  size_t sVar3;\n  char *pcVar4;\n  void **ppvVar5;\n  ushort **ppuVar6;\n  void *pvVar7;\n  long lVar8;\n  int iVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  undefined local_a8 [16];\n  undefined local_98 [16];\n  undefined local_88 [16];\n  undefined local_78 [16];\n  undefined local_68 [16];\n  undefined local_58 [16];\n  undefined4 local_48;\n  undefined local_44;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar3 = strlen((char *)param_1);\n  local_48 = 0;\n  local_44 = 0;\n  local_a8 = (undefined  [16])0x0;\n  local_98 = (undefined  [16])0x0;\n  local_88 = (undefined  [16])0x0;\n  local_78 = (undefined  [16])0x0;\n  local_68 = (undefined  [16])0x0;\n  local_58 = (undefined  [16])0x0;\n  pcVar4 = strchr((char *)param_1,0x20);\n  iVar10 = (int)sVar3;\n  if (pcVar4 == (char *)0x0) {\n    pcVar4 = strchr((char *)param_1,0x2c);\n    if (pcVar4 == (char *)0x0) {\n      if (iVar10 < 1) {\n        iVar9 = 0;\n      }\n      else {\n        ppuVar6 = __ctype_b_loc();\n        iVar9 = 0;\n        pbVar1 = param_1 + (ulong)(iVar10 - 1) + 1;\n        do {\n          if ((*(byte *)((long)*ppuVar6 + (long)(char)*param_1 * 2 + 1) & 2) != 0) {\n            iVar9 = iVar9 + (uint)(((char)*param_1 + -0x61) % 2 == 1);\n          }\n          param_1 = param_1 + 1;\n        } while (pbVar1 != param_1);\n      }\n      ppvVar5 = (void **)malloc(8);\n      pvVar7 = malloc(0xc);\n      *ppvVar5 = pvVar7;\n      iVar10 = 1;\n      __sprintf_chk(pvVar7,1,0xc,&DAT_00102004,iVar9);\n      goto LAB_001016c8;\n    }\n  }\n  ppvVar5 = (void **)malloc((long)(iVar10 + 1) << 3);\n  if (iVar10 < 0) {\n    iVar10 = 0;\n  }\n  else {\n    iVar9 = 0;\n    pbVar1 = param_1 + (sVar3 & 0xffffffff) + 1;\n    iVar10 = 0;\n    do {\n      while ((bVar2 = *param_1, (bVar2 & 0xdf) != 0 && (bVar2 != 0x2c))) {\n        lVar8 = (long)iVar9;\n        param_1 = param_1 + 1;\n        iVar9 = iVar9 + 1;\n        local_a8[lVar8] = bVar2;\n        if (pbVar1 == param_1) goto LAB_001016c8;\n      }\n      if (iVar9 != 0) {\n        local_a8[iVar9] = 0;\n        pcVar4 = strdup(local_a8);\n        iVar9 = 0;\n        lVar8 = (long)iVar10;\n        iVar10 = iVar10 + 1;\n        ppvVar5[lVar8] = pcVar4;\n      }\n      param_1 = param_1 + 1;\n    } while (pbVar1 != param_1);\n  }\nLAB_001016c8:\n  *param_2 = iVar10;\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ppvVar5;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 126,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  int local_c;\n  \n  if (param_2 != 0) {\n    for (local_c = 1; local_c < param_2; local_c = local_c + 1) {\n      if (*(int *)(param_1 + (long)local_c * 4) < *(int *)(param_1 + (long)local_c * 4 + -4)) {\n        return 0;\n      }\n      if (((1 < local_c) &&\n          (*(int *)(param_1 + (long)local_c * 4) == *(int *)(param_1 + (long)local_c * 4 + -4))) &&\n         (*(int *)(param_1 + (long)local_c * 4) == *(int *)(param_1 + (long)local_c * 4 + -8))) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}"
    },
    {
        "task_id": 126,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  \n  if (param_2 < 2) {\n    return 1;\n  }\n  lVar3 = 1;\n  while( true ) {\n    iVar1 = *(int *)(param_1 + lVar3 * 4);\n    iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n    if (iVar1 < iVar2) {\n      return 0;\n    }\n    if (((iVar1 == iVar2) && (1 < (int)lVar3)) && (iVar1 == *(int *)(param_1 + -8 + lVar3 * 4)))\n    break;\n    lVar3 = lVar3 + 1;\n    if (lVar3 == (ulong)(param_2 - 2) + 2) {\n      return 1;\n    }\n  }\n  return 0;\n}"
    },
    {
        "task_id": 126,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(long param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  \n  if (1 < param_2) {\n    lVar3 = 1;\n    do {\n      iVar1 = *(int *)(param_1 + lVar3 * 4);\n      iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n      if ((iVar1 < iVar2) ||\n         ((((int)lVar3 != 1 && (iVar1 == iVar2)) && (iVar1 == *(int *)(param_1 + -8 + lVar3 * 4)))))\n      {\n        return 0;\n      }\n      lVar3 = lVar3 + 1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar3);\n  }\n  return 1;\n}\n\n// Function: func0\nundefined8 func0(undefined8 param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  \n  if (param_2 != 0) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 126,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0_part_0(long param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  \n  if (1 < param_2) {\n    lVar3 = 1;\n    do {\n      iVar1 = *(int *)(param_1 + lVar3 * 4);\n      iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n      if ((iVar1 < iVar2) ||\n         ((((int)lVar3 != 1 && (iVar1 == iVar2)) && (iVar1 == *(int *)(param_1 + -8 + lVar3 * 4)))))\n      {\n        return 0;\n      }\n      lVar3 = lVar3 + 1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar3);\n  }\n  return 1;\n}\n\n// Function: func0\nundefined8 func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  \n  if (1 < param_2) {\n    lVar3 = 1;\n    do {\n      iVar1 = *(int *)(param_1 + lVar3 * 4);\n      iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n      if ((iVar1 < iVar2) ||\n         ((((int)lVar3 != 1 && (iVar1 == iVar2)) && (iVar1 == *(int *)(param_1 + -8 + lVar3 * 4)))))\n      {\n        return 0;\n      }\n      lVar3 = lVar3 + 1;\n    } while ((ulong)(param_2 - 2) + 2 != lVar3);\n  }\n  return 1;\n}"
    },
    {
        "task_id": 127,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(int param_1,int param_2,int param_3,int param_4)\n\n{\n  undefined *puVar1;\n  int local_18;\n  \n  if (param_1 <= param_3) {\n    param_1 = param_3;\n  }\n  if (param_4 <= param_2) {\n    param_2 = param_4;\n  }\n  param_2 = param_2 - param_1;\n  if (param_2 < 2) {\n    puVar1 = &DAT_00102008;\n  }\n  else {\n    for (local_18 = 2; local_18 * local_18 <= param_2; local_18 = local_18 + 1) {\n      if (param_2 % local_18 == 0) {\n        return &DAT_00102008;\n      }\n    }\n    puVar1 = &DAT_0010200b;\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 127,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(int param_1,int param_2,int param_3,int param_4)\n\n{\n  undefined1 *puVar1;\n  uint uVar2;\n  int iVar3;\n  \n  if (param_2 < param_4) {\n    param_4 = param_2;\n  }\n  if (param_3 < param_1) {\n    param_3 = param_1;\n  }\n  uVar2 = param_4 - param_3;\n  puVar1 = &DAT_00102004;\n  if (((1 < (int)uVar2) && (puVar1 = &DAT_00102007, 3 < (int)uVar2)) &&\n     (puVar1 = &DAT_00102004, (uVar2 & 1) != 0)) {\n    iVar3 = 2;\n    do {\n      iVar3 = iVar3 + 1;\n      if ((int)uVar2 < iVar3 * iVar3) {\n        return &DAT_00102007;\n      }\n    } while ((int)uVar2 % iVar3 != 0);\n    puVar1 = &DAT_00102004;\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 127,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(int param_1,int param_2,int param_3,int param_4)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  \n  puVar1 = &DAT_00102004;\n  if (param_2 < param_4) {\n    param_4 = param_2;\n  }\n  if (param_3 < param_1) {\n    param_3 = param_1;\n  }\n  uVar2 = param_4 - param_3;\n  if (((1 < (int)uVar2) && (puVar1 = &DAT_00102007, 3 < (int)uVar2)) &&\n     (puVar1 = &DAT_00102004, (uVar2 & 1) != 0)) {\n    iVar3 = 2;\n    do {\n      iVar3 = iVar3 + 1;\n      if ((int)uVar2 < iVar3 * iVar3) {\n        return &DAT_00102007;\n      }\n    } while ((int)uVar2 % iVar3 != 0);\n    puVar1 = &DAT_00102004;\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 127,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(int param_1,int param_2,int param_3,int param_4)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  \n  puVar1 = &DAT_00102004;\n  if (param_2 < param_4) {\n    param_4 = param_2;\n  }\n  if (param_3 < param_1) {\n    param_3 = param_1;\n  }\n  uVar2 = param_4 - param_3;\n  if (((1 < (int)uVar2) && (puVar1 = &DAT_00102007, 3 < (int)uVar2)) &&\n     (puVar1 = &DAT_00102004, (uVar2 & 1) != 0)) {\n    iVar3 = 2;\n    do {\n      iVar3 = iVar3 + 1;\n      if ((int)uVar2 < iVar3 * iVar3) {\n        return &DAT_00102007;\n      }\n    } while ((int)uVar2 % iVar3 != 0);\n    puVar1 = &DAT_00102004;\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 128,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  if (param_2 == 0) {\n    local_14 = -0x8000;\n  }\n  else {\n    local_14 = 0;\n    local_10 = 1;\n    for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n      uVar1 = *(uint *)(param_1 + (long)local_c * 4);\n      uVar2 = (int)uVar1 >> 0x1f;\n      local_14 = local_14 + ((uVar1 ^ uVar2) - uVar2);\n      if (*(int *)(param_1 + (long)local_c * 4) == 0) {\n        local_10 = 0;\n      }\n      if (*(int *)(param_1 + (long)local_c * 4) < 0) {\n        local_10 = -local_10;\n      }\n    }\n    local_14 = local_14 * local_10;\n  }\n  return local_14;\n}"
    },
    {
        "task_id": 128,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (param_2 == 0) {\n    return -0x8000;\n  }\n  if (param_2 < 1) {\n    iVar4 = 1;\n    iVar3 = 0;\n  }\n  else {\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar4 = 1;\n    iVar3 = 0;\n    do {\n      uVar2 = *param_1;\n      iVar3 = iVar3 + (((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f));\n      if (uVar2 == 0) {\n        iVar4 = 0;\n      }\n      else if ((int)uVar2 < 0) {\n        iVar4 = -iVar4;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n  }\n  return iVar3 * iVar4;\n}"
    },
    {
        "task_id": 128,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "int func0_part_0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar4 = 1;\n  puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  iVar3 = 0;\n  do {\n    while( true ) {\n      uVar2 = *param_1;\n      iVar3 = iVar3 + (((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f));\n      if (uVar2 != 0) break;\n      param_1 = param_1 + 1;\n      iVar4 = 0;\n      iVar5 = 0;\n      if (param_1 == puVar1) goto LAB_00101433;\n    }\n    if ((int)uVar2 < 0) {\n      iVar4 = -iVar4;\n    }\n    param_1 = param_1 + 1;\n    iVar5 = iVar4;\n  } while (param_1 != puVar1);\nLAB_00101433:\n  return iVar3 * iVar5;\n}\n\n// Function: func0\nundefined8 func0(undefined8 param_1,int param_2)\n\n{\n  undefined8 uVar1;\n  \n  if (param_2 != 0) {\n    uVar1 = func0_part_0();\n    return uVar1;\n  }\n  return 0xffff8000;\n}"
    },
    {
        "task_id": 128,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "int func0_part_0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar5 = 0;\n  puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  iVar3 = 1;\n  do {\n    while( true ) {\n      uVar2 = *param_1;\n      iVar5 = iVar5 + (((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f));\n      if (uVar2 != 0) break;\n      param_1 = param_1 + 1;\n      iVar3 = 0;\n      iVar4 = 0;\n      if (puVar1 == param_1) goto LAB_00101411;\n    }\n    if ((int)uVar2 < 0) {\n      iVar3 = -iVar3;\n    }\n    param_1 = param_1 + 1;\n    iVar4 = iVar3;\n  } while (puVar1 != param_1);\nLAB_00101411:\n  return iVar4 * iVar5;\n}\n\n// Function: func0\nint func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 == 0) {\n    return -0x8000;\n  }\n  if (param_2 < 1) {\n    return 0;\n  }\n  iVar5 = 0;\n  puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n  iVar3 = 1;\n  do {\n    while( true ) {\n      uVar2 = *param_1;\n      iVar5 = iVar5 + (((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f));\n      if (uVar2 != 0) break;\n      param_1 = param_1 + 1;\n      iVar3 = 0;\n      iVar4 = 0;\n      if (param_1 == puVar1) goto LAB_00101481;\n    }\n    if ((int)uVar2 < 0) {\n      iVar3 = -iVar3;\n    }\n    param_1 = param_1 + 1;\n    iVar4 = iVar3;\n  } while (param_1 != puVar1);\nLAB_00101481:\n  return iVar4 * iVar5;\n}"
    },
    {
        "task_id": 129,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,int param_3,int *param_4)\n\n{\n  void *pvVar1;\n  uint local_24;\n  int local_20;\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  for (local_24 = 0; (int)local_24 < param_2; local_24 = local_24 + 1) {\n    for (local_20 = 0; local_20 < param_2; local_20 = local_20 + 1) {\n      if (*(int *)(*(long *)(param_1 + (long)(int)local_24 * 8) + (long)local_20 * 4) == 1) {\n        local_1c = local_24;\n        local_18 = local_20;\n      }\n    }\n  }\n  local_14 = param_2 * param_2;\n  if ((0 < local_1c) &&\n     (*(int *)(*(long *)(param_1 + (long)local_1c * 8 + -8) + (long)local_18 * 4) < local_14)) {\n    local_14 = *(int *)(*(long *)(param_1 + (long)local_1c * 8 + -8) + (long)local_18 * 4);\n  }\n  if ((local_1c < param_2 + -1) &&\n     (*(int *)(*(long *)(param_1 + ((long)local_1c + 1) * 8) + (long)local_18 * 4) < local_14)) {\n    local_14 = *(int *)(*(long *)(param_1 + ((long)local_1c + 1) * 8) + (long)local_18 * 4);\n  }\n  if ((0 < local_18) &&\n     (*(int *)(*(long *)(param_1 + (long)local_1c * 8) + (long)local_18 * 4 + -4) < local_14)) {\n    local_14 = *(int *)(*(long *)(param_1 + (long)local_1c * 8) + (long)local_18 * 4 + -4);\n  }\n  if ((local_18 < param_2 + -1) &&\n     (*(int *)(*(long *)(param_1 + (long)local_1c * 8) + ((long)local_18 + 1) * 4) < local_14)) {\n    local_14 = *(int *)(*(long *)(param_1 + (long)local_1c * 8) + ((long)local_18 + 1) * 4);\n  }\n  *param_4 = param_3;\n  pvVar1 = malloc((long)param_3 << 2);\n  for (local_24 = 0; (int)local_24 < param_3; local_24 = local_24 + 1) {\n    if ((local_24 & 1) == 0) {\n      *(undefined4 *)((long)pvVar1 + (long)(int)local_24 * 4) = 1;\n    }\n    else {\n      *(int *)((long)(int)local_24 * 4 + (long)pvVar1) = local_14;\n    }\n  }\n  return pvVar1;\n}"
    },
    {
        "task_id": 129,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,int param_3,int *param_4,int param_5,int param_6)\n\n{\n  ulong uVar1;\n  void *pvVar2;\n  int iVar3;\n  ulong uVar4;\n  int iVar5;\n  bool bVar6;\n  \n  if (0 < param_2) {\n    uVar4 = 0;\n    do {\n      uVar1 = 0;\n      do {\n        if (*(int *)(*(long *)(param_1 + uVar4 * 8) + uVar1 * 4) == 1) {\n          param_5 = (int)uVar1;\n          param_6 = (int)uVar4;\n        }\n        bVar6 = uVar1 != param_2 - 1;\n        uVar1 = uVar1 + 1;\n      } while (bVar6);\n      bVar6 = uVar4 != param_2 - 1;\n      uVar4 = uVar4 + 1;\n    } while (bVar6);\n  }\n  iVar5 = param_2 * param_2;\n  if ((0 < param_6) &&\n     (iVar3 = *(int *)(*(long *)(param_1 + -8 + (long)param_6 * 8) + (long)param_5 * 4),\n     iVar3 < iVar5)) {\n    iVar5 = iVar3;\n  }\n  if ((param_6 < param_2 + -1) &&\n     (iVar3 = *(int *)(*(long *)(param_1 + 8 + (long)param_6 * 8) + (long)param_5 * 4),\n     iVar3 < iVar5)) {\n    iVar5 = iVar3;\n  }\n  if ((0 < param_5) &&\n     (iVar3 = *(int *)(*(long *)(param_1 + (long)param_6 * 8) + -4 + (long)param_5 * 4),\n     iVar3 < iVar5)) {\n    iVar5 = iVar3;\n  }\n  if ((param_5 < param_2 + -1) &&\n     (iVar3 = *(int *)(*(long *)(param_1 + (long)param_6 * 8) + 4 + (long)param_5 * 4),\n     iVar3 < iVar5)) {\n    iVar5 = iVar3;\n  }\n  *param_4 = param_3;\n  pvVar2 = malloc((long)param_3 << 2);\n  if (0 < param_3) {\n    uVar4 = 0;\n    do {\n      iVar3 = 1;\n      if ((uVar4 & 1) != 0) {\n        iVar3 = iVar5;\n      }\n      *(int *)((long)pvVar2 + uVar4 * 4) = iVar3;\n      bVar6 = param_3 - 1 != uVar4;\n      uVar4 = uVar4 + 1;\n    } while (bVar6);\n  }\n  return;\n}"
    },
    {
        "task_id": 129,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,int param_3,int *param_4,undefined8 param_5,int param_6)\n\n{\n  int iVar1;\n  ulong uVar2;\n  void *pvVar3;\n  ulong uVar4;\n  int iVar5;\n  int iVar6;\n  long in_R10;\n  bool bVar7;\n  \n  if (0 < param_2) {\n    uVar4 = 0;\n    do {\n      uVar2 = 0;\n      do {\n        if (*(int *)(*(long *)(param_1 + uVar4 * 8) + uVar2 * 4) == 1) {\n          param_6 = (int)uVar2;\n          in_R10 = (long)(int)uVar4;\n        }\n        bVar7 = uVar2 != param_2 - 1;\n        uVar2 = uVar2 + 1;\n      } while (bVar7);\n      bVar7 = param_2 - 1 != uVar4;\n      uVar4 = uVar4 + 1;\n    } while (bVar7);\n  }\n  iVar5 = param_2 * param_2;\n  iVar6 = (int)in_R10;\n  if ((iVar6 != 0) &&\n     (iVar1 = *(int *)(*(long *)(param_1 + -8 + (long)iVar6 * 8) + (long)param_6 * 4), iVar1 < iVar5\n     )) {\n    iVar5 = iVar1;\n  }\n  if ((iVar6 < param_2 + -1) &&\n     (iVar1 = *(int *)(*(long *)(param_1 + 8 + (long)iVar6 * 8) + (long)param_6 * 4), iVar1 < iVar5)\n     ) {\n    iVar5 = iVar1;\n  }\n  if ((param_6 != 0) &&\n     (iVar6 = *(int *)(*(long *)(param_1 + (long)iVar6 * 8) + -4 + (long)param_6 * 4), iVar6 < iVar5\n     )) {\n    iVar5 = iVar6;\n  }\n  if ((param_6 < param_2 + -1) &&\n     (iVar6 = *(int *)(*(long *)(param_1 + in_R10 * 8) + 4 + (long)param_6 * 4), iVar6 < iVar5)) {\n    iVar5 = iVar6;\n  }\n  *param_4 = param_3;\n  pvVar3 = malloc((long)param_3 << 2);\n  uVar4 = 0;\n  if (0 < param_3) {\n    do {\n      iVar6 = 1;\n      if ((uVar4 & 1) != 0) {\n        iVar6 = iVar5;\n      }\n      *(int *)((long)pvVar3 + uVar4 * 4) = iVar6;\n      bVar7 = param_3 - 1 != uVar4;\n      uVar4 = uVar4 + 1;\n    } while (bVar7);\n  }\n  return;\n}"
    },
    {
        "task_id": 129,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint **param_1,uint param_2,uint param_3,uint *param_4,uint param_5)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  uint *puVar7;\n  uint *puVar8;\n  ulong uVar9;\n  uint *puVar10;\n  int iVar11;\n  uint uVar12;\n  ulong unaff_RBP;\n  uint uVar13;\n  ulong uVar15;\n  uint uVar16;\n  uint uVar17;\n  uint uVar18;\n  uint uVar19;\n  uint uVar20;\n  uint uVar21;\n  uint uVar22;\n  uint uVar23;\n  uint uVar24;\n  uint uVar25;\n  uint uVar26;\n  uint uVar27;\n  uint uVar28;\n  uint uVar29;\n  uint uVar30;\n  uint uVar31;\n  uint uVar32;\n  uint uVar33;\n  uint uVar34;\n  uint uVar35;\n  uint uVar36;\n  uint uVar37;\n  uint uVar38;\n  uint uVar39;\n  uint uVar40;\n  uint uVar41;\n  uint uVar42;\n  ulong uVar14;\n  \n  iVar11 = (int)unaff_RBP;\n  if ((int)param_2 < 1) {\nLAB_00101a18:\n    uVar6 = param_2 * param_2;\n    if ((0 < iVar11) && ((int)param_1[(long)iVar11 + -1][(int)param_5] < (int)uVar6)) {\n      uVar6 = param_1[(long)iVar11 + -1][(int)param_5];\n    }\n    if ((iVar11 < (int)(param_2 - 1)) && ((int)param_1[(long)iVar11 + 1][(int)param_5] < (int)uVar6)\n       ) {\n      uVar6 = param_1[(long)iVar11 + 1][(int)param_5];\n    }\n    if ((0 < (int)param_5) && ((int)param_1[iVar11][(long)(int)param_5 + -1] < (int)uVar6)) {\n      uVar6 = param_1[iVar11][(long)(int)param_5 + -1];\n    }\n    if (((int)param_5 < (int)(param_2 - 1)) &&\n       ((int)param_1[iVar11][(long)(int)param_5 + 1] < (int)uVar6)) {\n      uVar6 = param_1[iVar11][(long)(int)param_5 + 1];\n    }\n    *param_4 = param_3;\n    puVar7 = (uint *)malloc((long)(int)param_3 << 2);\n    uVar31 = _UNK_001020ec;\n    uVar30 = _UNK_001020e8;\n    uVar29 = _UNK_001020e4;\n    uVar17 = _DAT_001020e0;\n    iVar5 = _UNK_001020dc;\n    iVar4 = _UNK_001020d8;\n    iVar3 = _UNK_001020d4;\n    iVar11 = _DAT_001020d0;\n    if (0 < (int)param_3) {\n      if (param_3 - 1 < 3) {\n        uVar17 = 0;\n        puVar8 = puVar7;\n      }\n      else {\n        puVar8 = puVar7;\n        uVar26 = _DAT_001020c0;\n        uVar27 = _UNK_001020c4;\n        uVar28 = _UNK_001020c8;\n        uVar39 = _UNK_001020cc;\n        do {\n          puVar10 = puVar8 + 4;\n          uVar40 = -(uint)((uVar26 & uVar17) == 0);\n          uVar41 = -(uint)((uVar27 & uVar29) == 0);\n          uVar42 = -(uint)((uVar28 & uVar30) == 0);\n          uVar21 = -(uint)((uVar39 & uVar31) == 0);\n          *puVar8 = ~uVar40 & uVar6 | uVar17 & uVar40;\n          puVar8[1] = ~uVar41 & uVar6 | uVar29 & uVar41;\n          puVar8[2] = ~uVar42 & uVar6 | uVar30 & uVar42;\n          puVar8[3] = ~uVar21 & uVar6 | uVar31 & uVar21;\n          puVar8 = puVar10;\n          uVar26 = uVar26 + iVar11;\n          uVar27 = uVar27 + iVar3;\n          uVar28 = uVar28 + iVar4;\n          uVar39 = uVar39 + iVar5;\n        } while (puVar10 != puVar7 + (ulong)(param_3 >> 2) * 4);\n        uVar17 = param_3 & 0xfffffffc;\n        if ((param_3 & 3) == 0) {\n          return;\n        }\n        puVar8 = puVar7 + (int)uVar17;\n      }\n      *puVar8 = 1;\n      uVar29 = uVar17 + 1;\n      if ((int)uVar29 < (int)param_3) {\n        if ((uVar29 & 1) == 0) {\n          uVar6 = 1;\n        }\n        puVar7[(int)uVar29] = uVar6;\n        if ((int)(uVar17 + 2) < (int)param_3) {\n          puVar7[(int)(uVar17 + 2)] = 1;\n        }\n      }\n    }\n    return;\n  }\n  uVar6 = param_2 - 1;\n  uVar9 = 0;\n  puVar7 = *param_1;\n  uVar14 = uVar9;\n  if (uVar6 < 0xb) goto LAB_001019ef;\n  do {\n    uVar13 = (uint)uVar14;\n    uVar12 = (uint)unaff_RBP;\n    uVar22 = 0;\n    uVar23 = 0;\n    uVar24 = 0;\n    uVar25 = 0;\n    uVar17 = 0xffffffff;\n    uVar29 = 0xffffffff;\n    uVar30 = 0xffffffff;\n    uVar31 = 0xffffffff;\n    puVar8 = puVar7;\n    uVar26 = uVar12;\n    uVar27 = uVar12;\n    uVar28 = uVar12;\n    uVar39 = _DAT_001020b0;\n    uVar40 = _UNK_001020b4;\n    uVar41 = _UNK_001020b8;\n    uVar42 = _UNK_001020bc;\n    uVar21 = _DAT_001020c0;\n    uVar36 = _UNK_001020c4;\n    uVar37 = _UNK_001020c8;\n    uVar38 = _UNK_001020cc;\n    do {\n      uVar16 = *puVar8;\n      puVar10 = puVar8 + 1;\n      puVar1 = puVar8 + 2;\n      puVar2 = puVar8 + 3;\n      puVar8 = puVar8 + 4;\n      uVar16 = -(uint)(uVar16 == _DAT_001020e0);\n      uVar18 = -(uint)(*puVar10 == _UNK_001020e4);\n      uVar19 = -(uint)(*puVar1 == _UNK_001020e8);\n      uVar20 = -(uint)(*puVar2 == _UNK_001020ec);\n      uVar29 = ~uVar16 & uVar29 | uVar21 & uVar16;\n      uVar30 = ~uVar18 & uVar30 | uVar36 & uVar18;\n      uVar31 = ~uVar19 & uVar31 | uVar37 & uVar19;\n      uVar17 = ~uVar20 & uVar17 | uVar38 & uVar20;\n      uVar12 = ~uVar16 & uVar12 | uVar13 & uVar16;\n      uVar26 = ~uVar18 & uVar26 | uVar13 & uVar18;\n      uVar27 = ~uVar19 & uVar27 | uVar13 & uVar19;\n      uVar28 = ~uVar20 & uVar28 | uVar13 & uVar20;\n      uVar32 = uVar39 & uVar16;\n      uVar33 = uVar40 & uVar18;\n      uVar34 = uVar41 & uVar19;\n      uVar35 = uVar42 & uVar20;\n      uVar39 = uVar39 + _DAT_001020d0;\n      uVar40 = uVar40 + _UNK_001020d4;\n      uVar41 = uVar41 + _UNK_001020d8;\n      uVar42 = uVar42 + _UNK_001020dc;\n      uVar22 = ~uVar16 & uVar22 | uVar32;\n      uVar23 = ~uVar18 & uVar23 | uVar33;\n      uVar24 = ~uVar19 & uVar24 | uVar34;\n      uVar25 = ~uVar20 & uVar25 | uVar35;\n      uVar21 = uVar21 + _DAT_001020d0;\n      uVar36 = uVar36 + _UNK_001020d4;\n      uVar37 = uVar37 + _UNK_001020d8;\n      uVar38 = uVar38 + _UNK_001020dc;\n    } while (puVar7 + (ulong)(param_2 >> 2) * 4 != puVar8);\n    uVar29 = ~-(uint)((int)uVar29 < (int)uVar31) & uVar29 |\n             uVar31 & -(uint)((int)uVar29 < (int)uVar31);\n    uVar30 = ~-(uint)((int)uVar30 < (int)uVar17) & uVar30 |\n             uVar17 & -(uint)((int)uVar30 < (int)uVar17);\n    uVar17 = -(uint)((int)uVar29 < (int)uVar30);\n    uVar17 = ~uVar17 & uVar29 | uVar30 & uVar17;\n    if (uVar17 != 0xffffffff) {\n      param_5 = uVar17;\n    }\n    uVar17 = uVar23;\n    if (uVar23 <= uVar22) {\n      uVar17 = uVar22;\n    }\n    if (uVar17 < uVar24) {\n      uVar15 = (ulong)uVar27;\n    }\n    else {\n      uVar15 = (ulong)uVar12;\n      if (uVar22 < uVar23) {\n        uVar15 = (ulong)uVar26;\n      }\n    }\n    if (uVar17 < uVar24) {\n      uVar17 = uVar24;\n    }\n    unaff_RBP = (ulong)uVar28;\n    if (uVar25 <= uVar17) {\n      unaff_RBP = uVar15;\n    }\n    uVar15 = uVar14;\n    uVar17 = param_2 & 0xfffffffc;\n    if (param_2 == (param_2 & 0xfffffffc)) goto LAB_001019d1;\n    while( true ) {\n      if (puVar7[(int)uVar17] == 1) {\n        param_5 = uVar17;\n      }\n      unaff_RBP = unaff_RBP & 0xffffffff;\n      if (puVar7[(int)uVar17] == 1) {\n        unaff_RBP = uVar9;\n      }\n      uVar15 = uVar14;\n      if ((int)(uVar17 + 1) < (int)param_2) {\n        if (puVar7[(long)(int)uVar17 + 1] == 1) {\n          param_5 = uVar17 + 1;\n        }\n        if (puVar7[(long)(int)uVar17 + 1] == 1) {\n          unaff_RBP = uVar9;\n        }\n        if ((int)(uVar17 + 2) < (int)param_2) {\n          if (puVar7[(long)(int)uVar17 + 2] == 1) {\n            param_5 = uVar17 + 2;\n          }\n          if (puVar7[(long)(int)uVar17 + 2] == 1) {\n            unaff_RBP = uVar9;\n          }\n          if ((int)(uVar17 + 3) < (int)param_2) {\n            if (puVar7[(long)(int)uVar17 + 3] == 1) {\n              param_5 = uVar17 + 3;\n            }\n            if (puVar7[(long)(int)uVar17 + 3] == 1) {\n              unaff_RBP = uVar9;\n            }\n            if ((int)(uVar17 + 4) < (int)param_2) {\n              if (puVar7[(long)(int)uVar17 + 4] == 1) {\n                param_5 = uVar17 + 4;\n              }\n              if (puVar7[(long)(int)uVar17 + 4] == 1) {\n                unaff_RBP = uVar9;\n              }\n              if ((int)(uVar17 + 5) < (int)param_2) {\n                if (puVar7[(long)(int)uVar17 + 5] == 1) {\n                  param_5 = uVar17 + 5;\n                }\n                if (puVar7[(long)(int)uVar17 + 5] == 1) {\n                  unaff_RBP = uVar9;\n                }\n                if ((int)(uVar17 + 6) < (int)param_2) {\n                  if (puVar7[(long)(int)uVar17 + 6] == 1) {\n                    param_5 = uVar17 + 6;\n                  }\n                  if (puVar7[(long)(int)uVar17 + 6] == 1) {\n                    unaff_RBP = uVar9;\n                  }\n                  if ((int)(uVar17 + 7) < (int)param_2) {\n                    if (puVar7[(long)(int)uVar17 + 7] == 1) {\n                      param_5 = uVar17 + 7;\n                    }\n                    if (puVar7[(long)(int)uVar17 + 7] == 1) {\n                      unaff_RBP = uVar9;\n                    }\n                    if ((int)(uVar17 + 8) < (int)param_2) {\n                      if (puVar7[(long)(int)uVar17 + 8] == 1) {\n                        param_5 = uVar17 + 8;\n                      }\n                      if (puVar7[(long)(int)uVar17 + 8] == 1) {\n                        unaff_RBP = uVar9;\n                      }\n                      if ((int)(uVar17 + 9) < (int)param_2) {\n                        if (puVar7[(long)(int)uVar17 + 9] == 1) {\n                          unaff_RBP = uVar9;\n                          param_5 = uVar17 + 9;\n                        }\n                        if (((int)(uVar17 + 10) < (int)param_2) &&\n                           (puVar7[(long)(int)uVar17 + 10] == 1)) {\n                          unaff_RBP = uVar9;\n                          param_5 = uVar17 + 10;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\nLAB_001019d1:\n      iVar11 = (int)unaff_RBP;\n      uVar14 = uVar15 + 1;\n      if (uVar15 == uVar6) goto LAB_00101a18;\n      puVar7 = param_1[uVar14];\n      uVar9 = uVar14 & 0xffffffff;\n      if (10 < uVar6) break;\nLAB_001019ef:\n      uVar17 = 0;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 130,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 * func0(int param_1)\n\n{\n  undefined4 *puVar1;\n  uint local_14;\n  \n  puVar1 = (undefined4 *)malloc((long)(param_1 + 1) << 2);\n  *puVar1 = 1;\n  if (param_1 != 0) {\n    puVar1[1] = 3;\n    for (local_14 = 2; (int)local_14 <= param_1; local_14 = local_14 + 1) {\n      if ((local_14 & 1) == 0) {\n        puVar1[(int)local_14] = (int)local_14 / 2 + 1;\n      }\n      else {\n        puVar1[(int)local_14] =\n             puVar1[(long)(int)local_14 + -2] + puVar1[(long)(int)local_14 + -1] + 1 +\n             (int)(local_14 + 1) / 2;\n      }\n    }\n  }\n  return puVar1;\n}"
    },
    {
        "task_id": 130,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  undefined4 *puVar1;\n  ulong uVar2;\n  \n  puVar1 = (undefined4 *)malloc((long)(param_1 + 1) << 2);\n  *puVar1 = 1;\n  if ((param_1 != 0) && (puVar1[1] = 3, 1 < param_1)) {\n    uVar2 = 2;\n    do {\n      if ((uVar2 & 1) == 0) {\n        puVar1[uVar2] = ((int)(((uint)(uVar2 >> 0x1f) & 1) + (int)uVar2) >> 1) + 1;\n      }\n      else {\n        puVar1[uVar2] = puVar1[uVar2 - 2] + puVar1[uVar2 - 1] + 1 + ((int)uVar2 + 1) / 2;\n      }\n      uVar2 = uVar2 + 1;\n    } while (uVar2 != (ulong)(param_1 - 2) + 3);\n  }\n  return;\n}"
    },
    {
        "task_id": 130,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  undefined4 *puVar1;\n  ulong uVar2;\n  ulong uVar3;\n  \n  puVar1 = (undefined4 *)malloc((long)(param_1 + 1) << 2);\n  *puVar1 = 1;\n  if ((param_1 != 0) && (puVar1[1] = 3, 1 < param_1)) {\n    uVar2 = 2;\n    uVar3 = (ulong)(param_1 - 2) + 3;\n    do {\n      while( true ) {\n        if ((uVar2 & 1) == 0) break;\n        puVar1[uVar2] = puVar1[uVar2 - 2] + puVar1[uVar2 - 1] + 1 + ((int)uVar2 + 1 >> 1);\n        uVar2 = uVar2 + 1;\n        if (uVar2 == uVar3) {\n          return;\n        }\n      }\n      puVar1[uVar2] = ((int)uVar2 >> 1) + 1;\n      uVar2 = uVar2 + 1;\n    } while (uVar2 != uVar3);\n  }\n  return;\n}"
    },
    {
        "task_id": 130,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1)\n\n{\n  undefined4 *puVar1;\n  ulong uVar2;\n  ulong uVar3;\n  \n  puVar1 = (undefined4 *)malloc((long)(param_1 + 1) << 2);\n  *puVar1 = 1;\n  if ((param_1 != 0) && (puVar1[1] = 3, 1 < param_1)) {\n    uVar2 = 2;\n    uVar3 = (ulong)(param_1 - 2) + 3;\n    do {\n      while( true ) {\n        if ((uVar2 & 1) == 0) break;\n        puVar1[uVar2] = puVar1[uVar2 - 2] + puVar1[uVar2 - 1] + 1 + ((int)uVar2 + 1 >> 1);\n        uVar2 = uVar2 + 1;\n        if (uVar3 == uVar2) {\n          return;\n        }\n      }\n      puVar1[uVar2] = ((int)uVar2 >> 1) + 1;\n      uVar2 = uVar2 + 1;\n    } while (uVar3 != uVar2);\n  }\n  return;\n}"
    },
    {
        "task_id": 131,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
        "c_test": "#include <assert.h>\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  bool bVar1;\n  int local_1c;\n  int local_14;\n  \n  local_14 = 1;\n  bVar1 = false;\n  for (local_1c = param_1; 0 < local_1c; local_1c = local_1c / 10) {\n    if ((local_1c % 10) % 2 == 1) {\n      bVar1 = true;\n      local_14 = local_14 * (local_1c % 10);\n    }\n  }\n  if (!bVar1) {\n    local_14 = 0;\n  }\n  return local_14;\n}"
    },
    {
        "task_id": 131,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
        "c_test": "#include <assert.h>\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int param_1)\n\n{\n  bool bVar1;\n  bool bVar2;\n  int iVar3;\n  \n  if (param_1 < 1) {\n    iVar3 = 0;\n  }\n  else {\n    bVar2 = false;\n    iVar3 = 1;\n    do {\n      if ((param_1 % 10) % 2 == 1) {\n        iVar3 = iVar3 * (param_1 % 10);\n        bVar2 = true;\n      }\n      bVar1 = 9 < param_1;\n      param_1 = param_1 / 10;\n    } while (bVar1);\n    if (!bVar2) {\n      iVar3 = 0;\n    }\n  }\n  return iVar3;\n}"
    },
    {
        "task_id": 131,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
        "c_test": "#include <assert.h>\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(uint param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  uVar2 = 0;\n  if (0 < (int)param_1) {\n    uVar1 = 1;\n    while( true ) {\n      if ((param_1 & 1) != 0) {\n        uVar1 = uVar1 * (param_1 % 10);\n        uVar2 = param_1 & 1;\n      }\n      if ((int)param_1 < 10) break;\n      param_1 = param_1 / 10;\n    }\n    if (uVar2 != 0) {\n      uVar2 = uVar1;\n    }\n  }\n  return uVar2;\n}"
    },
    {
        "task_id": 131,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
        "c_test": "#include <assert.h>\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(uint param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  uVar2 = 0;\n  if (0 < (int)param_1) {\n    uVar1 = 1;\n    while( true ) {\n      if ((param_1 & 1) != 0) {\n        uVar1 = uVar1 * (param_1 % 10);\n        uVar2 = param_1 & 1;\n      }\n      if ((int)param_1 < 10) break;\n      param_1 = param_1 / 10;\n    }\n    if (uVar2 != 0) {\n      uVar2 = uVar1;\n    }\n  }\n  return uVar2;\n}"
    },
    {
        "task_id": 132,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  int local_24;\n  int local_20;\n  int local_1c;\n  \n  local_24 = 0;\n  local_20 = 0;\n  local_1c = 0;\n  while( true ) {\n    sVar1 = strlen(param_1);\n    if (sVar1 <= (ulong)(long)local_1c) {\n      return 0;\n    }\n    if (param_1[local_1c] == '[') {\n      local_24 = local_24 + 1;\n    }\n    if (param_1[local_1c] == ']') {\n      local_24 = local_24 + -1;\n    }\n    if (local_24 < 0) {\n      local_24 = 0;\n    }\n    if (local_20 < local_24) {\n      local_20 = local_24;\n    }\n    if (local_24 < local_20 + -1) break;\n    local_1c = local_1c + 1;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 132,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  ulong uVar4;\n  char *pcVar5;\n  \n  uVar4 = 0xffffffffffffffff;\n  pcVar5 = param_1;\n  do {\n    if (uVar4 == 0) break;\n    uVar4 = uVar4 - 1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  pcVar5 = param_1 + (~uVar4 - 1);\n  iVar3 = 0;\n  iVar2 = 0;\n  do {\n    if (param_1 == pcVar5) {\n      return 0;\n    }\n    if (*param_1 == '[') {\n      iVar2 = iVar2 + 1;\n    }\n    else {\n      iVar2 = iVar2 - (uint)(*param_1 == ']');\n    }\n    if (iVar2 < 0) {\n      iVar2 = 0;\n    }\n    if (iVar3 < iVar2) {\n      iVar3 = iVar2;\n    }\n    param_1 = param_1 + 1;\n  } while (iVar3 + -1 <= iVar2);\n  return 1;\n}"
    },
    {
        "task_id": 132,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  int iVar3;\n  int iVar4;\n  \n  sVar1 = strlen(param_1);\n  iVar3 = 0;\n  iVar4 = 0;\n  pcVar2 = param_1 + sVar1;\n  do {\n    if (pcVar2 == param_1) {\n      return 0;\n    }\n    if (*param_1 == '[') {\n      iVar4 = iVar4 + 1;\n    }\n    else {\n      iVar4 = iVar4 - (uint)(*param_1 == ']');\n    }\n    if (iVar4 < 0) {\n      iVar4 = 0;\n    }\n    if (iVar3 < iVar4) {\n      iVar3 = iVar4;\n    }\n    param_1 = param_1 + 1;\n  } while (iVar3 + -1 <= iVar4);\n  return 1;\n}"
    },
    {
        "task_id": 132,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  int iVar3;\n  int iVar4;\n  \n  sVar1 = strlen(param_1);\n  iVar3 = 0;\n  iVar4 = 0;\n  pcVar2 = param_1 + sVar1;\n  do {\n    if (pcVar2 == param_1) {\n      return 0;\n    }\n    if (*param_1 == '[') {\n      iVar4 = iVar4 + 1;\n    }\n    else {\n      iVar4 = iVar4 - (uint)(*param_1 == ']');\n    }\n    if (iVar4 < 0) {\n      iVar4 = 0;\n    }\n    if (iVar3 < iVar4) {\n      iVar3 = iVar4;\n    }\n    param_1 = param_1 + 1;\n  } while (iVar3 + -1 <= iVar4);\n  return 1;\n}"
    },
    {
        "task_id": 133,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  double dVar1;\n  double dVar2;\n  int local_20;\n  int local_1c;\n  \n  local_20 = 0;\n  for (local_1c = 0; local_1c < param_2; local_1c = local_1c + 1) {\n    dVar1 = ceil((double)*(float *)(param_1 + (long)local_1c * 4));\n    dVar2 = ceil((double)*(float *)(param_1 + (long)local_1c * 4));\n    local_20 = local_20 + (int)dVar2 * (int)dVar1;\n  }\n  return local_20;\n}"
    },
    {
        "task_id": 133,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  int iVar2;\n  float fVar3;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar2 = 0;\n    do {\n      fVar3 = *param_1;\n      if ((float)((uint)fVar3 & DAT_00102140) < DAT_0010212c) {\n        fVar3 = (float)(~DAT_00102140 & (uint)fVar3 |\n                       (uint)((float)(int)fVar3 +\n                             (float)(-(uint)((float)(int)fVar3 < fVar3) & DAT_00102130)));\n      }\n      iVar2 = iVar2 + (int)fVar3 * (int)fVar3;\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 133,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  int iVar2;\n  float fVar3;\n  \n  if (0 < param_2) {\n    iVar2 = 0;\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      fVar3 = *param_1;\n      if ((float)((uint)fVar3 & DAT_00102140) < DAT_0010212c) {\n        fVar3 = (float)(~DAT_00102140 & (uint)fVar3 |\n                       (uint)((float)(int)fVar3 +\n                             (float)(-(uint)((float)(int)fVar3 < fVar3) & DAT_00102130)));\n      }\n      param_1 = param_1 + 1;\n      iVar2 = iVar2 + (int)fVar3 * (int)fVar3;\n    } while (param_1 != pfVar1);\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 133,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  int iVar2;\n  float fVar3;\n  \n  if (0 < param_2) {\n    iVar2 = 0;\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      fVar3 = *param_1;\n      if ((float)((uint)fVar3 & DAT_00102140) < DAT_0010212c) {\n        fVar3 = (float)(~DAT_00102140 & (uint)fVar3 |\n                       (uint)((float)(int)fVar3 +\n                             (float)(-(uint)((float)(int)fVar3 < fVar3) & DAT_00102130)));\n      }\n      param_1 = param_1 + 1;\n      iVar2 = iVar2 + (int)fVar3 * (int)fVar3;\n    } while (pfVar1 != param_1);\n    return iVar2;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 134,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1)\n\n{\n  byte bVar1;\n  int iVar2;\n  size_t sVar3;\n  undefined8 uVar4;\n  ushort **ppuVar5;\n  \n  sVar3 = strlen(param_1);\n  iVar2 = (int)sVar3;\n  if (iVar2 == 0) {\n    uVar4 = 0;\n  }\n  else {\n    bVar1 = param_1[(long)iVar2 + -1];\n    ppuVar5 = __ctype_b_loc();\n    if (((*ppuVar5)[bVar1] & 0x400) == 0) {\n      uVar4 = 0;\n    }\n    else if (iVar2 == 1) {\n      uVar4 = 1;\n    }\n    else {\n      bVar1 = param_1[(long)iVar2 + -2];\n      ppuVar5 = __ctype_b_loc();\n      if (((*ppuVar5)[bVar1] & 0x400) == 0) {\n        uVar4 = 1;\n      }\n      else {\n        uVar4 = 0;\n      }\n    }\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 134,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  char cVar1;\n  ushort **ppuVar2;\n  ulong uVar3;\n  int iVar4;\n  char *pcVar5;\n  \n  uVar3 = 0xffffffffffffffff;\n  pcVar5 = param_1;\n  do {\n    if (uVar3 == 0) break;\n    uVar3 = uVar3 - 1;\n    cVar1 = *pcVar5;\n    pcVar5 = pcVar5 + 1;\n  } while (cVar1 != '\\0');\n  iVar4 = (int)(~uVar3 - 1);\n  uVar3 = ~uVar3 - 1 & 0xffffffff;\n  if (iVar4 != 0) {\n    ppuVar2 = __ctype_b_loc();\n    if ((*(byte *)((long)*ppuVar2 + (ulong)(byte)param_1[(long)iVar4 + -1] * 2 + 1) & 4) == 0) {\n      uVar3 = 0;\n    }\n    else if (iVar4 != 1) {\n      uVar3 = (ulong)(((*ppuVar2)[(byte)param_1[(long)iVar4 + -2]] >> 10 ^ 1) & 1);\n    }\n  }\n  return uVar3;\n}"
    },
    {
        "task_id": 134,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  ushort **ppuVar3;\n  ulong uVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  uVar4 = sVar2 & 0xffffffff;\n  if (iVar1 != 0) {\n    ppuVar3 = __ctype_b_loc();\n    if ((*(byte *)((long)*ppuVar3 + (ulong)(byte)param_1[(long)iVar1 + -1] * 2 + 1) & 4) == 0) {\n      return 0;\n    }\n    if (iVar1 != 1) {\n      uVar4 = (ulong)(((*ppuVar3)[(byte)param_1[(long)iVar1 + -2]] >> 10 ^ 1) & 1);\n    }\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 134,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(char *param_1)\n\n{\n  int iVar1;\n  size_t sVar2;\n  ushort **ppuVar3;\n  ulong uVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  uVar4 = sVar2 & 0xffffffff;\n  if (iVar1 != 0) {\n    ppuVar3 = __ctype_b_loc();\n    if ((*(byte *)((long)*ppuVar3 + (ulong)(byte)param_1[(long)iVar1 + -1] * 2 + 1) & 4) == 0) {\n      return 0;\n    }\n    if (iVar1 != 1) {\n      uVar4 = (ulong)(((*ppuVar3)[(byte)param_1[(long)iVar1 + -2]] >> 10 ^ 1) & 1);\n    }\n  }\n  return uVar4;\n}"
    },
    {
        "task_id": 135,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  int local_c;\n  \n  local_10 = -1;\n  for (local_c = 1; local_c < param_2; local_c = local_c + 1) {\n    if (*(int *)(param_1 + (long)local_c * 4) < *(int *)(param_1 + (long)local_c * 4 + -4)) {\n      local_10 = local_c;\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 135,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(long param_1,int param_2)\n\n{\n  ulong uVar1;\n  ulong uVar2;\n  \n  if (param_2 < 2) {\n    uVar2 = 0xffffffff;\n  }\n  else {\n    uVar1 = 1;\n    uVar2 = 0xffffffff;\n    do {\n      if (*(int *)(param_1 + uVar1 * 4) < *(int *)(param_1 + -4 + uVar1 * 4)) {\n        uVar2 = uVar1 & 0xffffffff;\n      }\n      uVar1 = uVar1 + 1;\n    } while (uVar1 != (ulong)(param_2 - 2) + 2);\n  }\n  return uVar2;\n}"
    },
    {
        "task_id": 135,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "ulong func0(long param_1,int param_2)\n\n{\n  ulong uVar1;\n  ulong uVar2;\n  \n  if (1 < param_2) {\n    uVar1 = 1;\n    uVar2 = 0xffffffff;\n    do {\n      if (*(int *)(param_1 + uVar1 * 4) < *(int *)(param_1 + -4 + uVar1 * 4)) {\n        uVar2 = uVar1 & 0xffffffff;\n      }\n      uVar1 = uVar1 + 1;\n    } while (uVar1 != (ulong)(param_2 - 2) + 2);\n    return uVar2;\n  }\n  return 0xffffffff;\n}"
    },
    {
        "task_id": 135,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  int *piVar3;\n  int *piVar4;\n  int *piVar5;\n  int *piVar6;\n  int *piVar7;\n  int *piVar8;\n  uint uVar9;\n  int *piVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 < 2) {\n    return 0xffffffff;\n  }\n  uVar11 = param_2 - 1;\n  if (param_2 - 2U < 3) {\n    uVar15 = 1;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar13 = 0;\n    uVar16 = 0;\n    uVar17 = 0;\n    uVar18 = 0;\n    piVar10 = param_1;\n    uVar15 = _DAT_00102040;\n    uVar9 = _UNK_00102044;\n    uVar14 = _UNK_00102048;\n    uVar12 = _UNK_0010204c;\n    do {\n      iVar2 = *piVar10;\n      piVar3 = piVar10 + 1;\n      piVar4 = piVar10 + 2;\n      piVar5 = piVar10 + 3;\n      piVar1 = piVar10 + 1;\n      piVar6 = piVar10 + 2;\n      piVar7 = piVar10 + 3;\n      piVar8 = piVar10 + 4;\n      piVar10 = piVar10 + 4;\n      uVar13 = ~-(uint)(*piVar1 < iVar2) & uVar13 | uVar15 & -(uint)(*piVar1 < iVar2);\n      uVar16 = ~-(uint)(*piVar6 < *piVar3) & uVar16 | uVar9 & -(uint)(*piVar6 < *piVar3);\n      uVar17 = ~-(uint)(*piVar7 < *piVar4) & uVar17 | uVar14 & -(uint)(*piVar7 < *piVar4);\n      uVar18 = ~-(uint)(*piVar8 < *piVar5) & uVar18 | uVar12 & -(uint)(*piVar8 < *piVar5);\n      uVar15 = uVar15 + _DAT_00102050;\n      uVar9 = uVar9 + _UNK_00102054;\n      uVar14 = uVar14 + _UNK_00102058;\n      uVar12 = uVar12 + _UNK_0010205c;\n    } while (piVar10 != param_1 + (ulong)(uVar11 >> 2) * 4);\n    uVar9 = uVar17 & -(uint)((int)uVar13 < (int)uVar17) |\n            ~-(uint)((int)uVar13 < (int)uVar17) & uVar13;\n    uVar14 = uVar18 & -(uint)((int)uVar16 < (int)uVar18) |\n             ~-(uint)((int)uVar16 < (int)uVar18) & uVar16;\n    uVar15 = -(uint)((int)uVar9 < (int)uVar14);\n    uVar9 = ~uVar15 & uVar9 | uVar14 & uVar15;\n    if (uVar9 == 0) {\n      uVar9 = 0xffffffff;\n    }\n    uVar15 = (uVar11 & 0xfffffffc) + 1;\n    if (uVar11 == (uVar11 & 0xfffffffc)) {\n      return uVar9;\n    }\n  }\n  uVar14 = uVar15;\n  if (((int)(uVar15 + 1) < (int)uVar11) && ((int)uVar15 < param_2)) {\n    iVar2 = param_1[(int)uVar15];\n    if (iVar2 < (param_1 + (int)uVar15)[-1]) {\n      uVar9 = uVar15;\n    }\n    uVar12 = uVar15 + 2;\n    if (param_1[(long)(int)uVar15 + 1] < iVar2) {\n      uVar9 = uVar15 + 1;\n    }\n    uVar14 = uVar12;\n    if ((int)(uVar15 + 3) < (int)uVar11) {\n      if (param_1[(int)uVar12] < param_1[(long)(int)uVar15 + 1]) {\n        uVar9 = uVar12;\n      }\n      uVar13 = uVar15 + 4;\n      if (param_1[(long)(int)uVar12 + 1] < param_1[(int)uVar12]) {\n        uVar9 = uVar15 + 3;\n      }\n      uVar14 = uVar13;\n      if ((int)(uVar15 + 5) < (int)uVar11) {\n        uVar11 = uVar13;\n        if (param_1[(long)(int)uVar12 + 1] <= param_1[(int)uVar13]) {\n          uVar11 = uVar9;\n        }\n        uVar14 = uVar15 + 6;\n        uVar9 = uVar11;\n        if (param_1[(long)(int)uVar13 + 1] < param_1[(int)uVar13]) {\n          uVar9 = uVar15 + 5;\n        }\n      }\n    }\n  }\n  uVar11 = uVar14 + 1;\n  if (param_1[(int)uVar14] < param_1[(long)(int)uVar14 + -1]) {\n    uVar9 = uVar14;\n  }\n  if ((int)uVar11 < param_2) {\n    if (param_1[(long)(int)uVar11 + -1] <= param_1[(int)uVar11]) {\n      uVar11 = uVar9;\n    }\n    uVar9 = uVar14 + 2;\n    if (param_2 <= (int)uVar9) {\n      return uVar11;\n    }\n    if (param_1[(long)(int)uVar9 + -1] <= param_1[(int)uVar9]) {\n      uVar9 = uVar11;\n    }\n  }\n  return uVar9;\n}"
    },
    {
        "task_id": 136,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,int param_2,int *param_3)\n\n{\n  int local_14;\n  int local_10;\n  int local_c;\n  \n  local_14 = 0;\n  local_10 = 0;\n  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {\n    if ((*(int *)(param_1 + (long)local_c * 4) < 0) &&\n       ((local_14 == 0 || (local_14 < *(int *)(param_1 + (long)local_c * 4))))) {\n      local_14 = *(int *)(param_1 + (long)local_c * 4);\n    }\n    if ((0 < *(int *)(param_1 + (long)local_c * 4)) &&\n       ((local_10 == 0 || (*(int *)(param_1 + (long)local_c * 4) < local_10)))) {\n      local_10 = *(int *)(param_1 + (long)local_c * 4);\n    }\n  }\n  *param_3 = local_14;\n  param_3[1] = local_10;\n  return;\n}"
    },
    {
        "task_id": 136,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    iVar3 = 0;\n    iVar5 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar5 = 0;\n    iVar4 = 0;\n    do {\n      iVar2 = *param_1;\n      iVar3 = iVar4;\n      if (iVar2 < 0) {\n        if ((iVar5 < iVar2) || (iVar5 == 0)) {\n          iVar5 = iVar2;\n        }\n      }\n      else if (((0 < iVar2) && (iVar3 = iVar2, iVar4 <= iVar2)) && (iVar4 != 0)) {\n        iVar3 = iVar4;\n      }\n      param_1 = param_1 + 1;\n      iVar4 = iVar3;\n    } while (param_1 != piVar1);\n  }\n  *param_3 = iVar5;\n  param_3[1] = iVar3;\n  return;\n}"
    },
    {
        "task_id": 136,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (0 < param_2) {\n    iVar3 = 0;\n    iVar4 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar2 = *param_1;\n      if (iVar2 < 0) {\n        if ((iVar4 < iVar2) || (iVar4 == 0)) {\n          iVar4 = iVar2;\n        }\n      }\n      else if ((iVar2 != 0) && ((iVar3 == 0 || (iVar2 < iVar3)))) {\n        iVar3 = iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (piVar1 != param_1);\n    *param_3 = iVar4;\n    param_3[1] = iVar3;\n    return;\n  }\n  *param_3 = 0;\n  param_3[1] = 0;\n  return;\n}"
    },
    {
        "task_id": 136,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
        "c_test": "#include <assert.h>\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int *param_1,int param_2,int *param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  if (0 < param_2) {\n    iVar3 = 0;\n    iVar4 = 0;\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      iVar2 = *param_1;\n      if (iVar2 < 0) {\n        if ((iVar4 < iVar2) || (iVar4 == 0)) {\n          iVar4 = iVar2;\n        }\n      }\n      else if ((iVar2 != 0) && ((iVar3 == 0 || (iVar2 < iVar3)))) {\n        iVar3 = iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n    *param_3 = iVar4;\n    param_3[1] = iVar3;\n    return;\n  }\n  *param_3 = 0;\n  param_3[1] = 0;\n  return;\n}"
    },
    {
        "task_id": 137,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1,char *param_2)\n\n{\n  long in_FS_OFFSET;\n  int local_40;\n  int local_3c;\n  char *local_38;\n  char *local_30;\n  char *local_28;\n  double local_20;\n  double local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_30 = strdup(param_1);\n  local_28 = strdup(param_2);\n  for (local_40 = 0; local_30[local_40] != '\\0'; local_40 = local_40 + 1) {\n    if (local_30[local_40] == ',') {\n      local_30[local_40] = '.';\n    }\n  }\n  for (local_3c = 0; local_28[local_3c] != '\\0'; local_3c = local_3c + 1) {\n    if (local_28[local_3c] == ',') {\n      local_28[local_3c] = '.';\n    }\n  }\n  local_20 = strtod(local_30,&local_38);\n  if (*local_38 == '\\0') {\n    local_18 = strtod(local_28,&local_38);\n    if (*local_38 == '\\0') {\n      free(local_30);\n      free(local_28);\n      if (local_20 == local_18) {\n        param_2 = \"None\";\n      }\n      else if (local_18 < local_20) {\n        param_2 = param_1;\n      }\n    }\n    else {\n      free(local_30);\n      free(local_28);\n      param_2 = \"Invalid input\";\n    }\n  }\n  else {\n    free(local_30);\n    free(local_28);\n    param_2 = \"Invalid input\";\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 137,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  char *__nptr;\n  char *__nptr_00;\n  char *pcVar2;\n  long in_FS_OFFSET;\n  double dVar3;\n  double dVar4;\n  char *local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  __nptr = strdup(param_1);\n  __nptr_00 = strdup(param_2);\n  cVar1 = *__nptr;\n  pcVar2 = __nptr;\n  while (cVar1 != '\\0') {\n    if (cVar1 == ',') {\n      *pcVar2 = '.';\n    }\n    pcVar2 = pcVar2 + 1;\n    cVar1 = *pcVar2;\n  }\n  cVar1 = *__nptr_00;\n  pcVar2 = __nptr_00;\n  while (cVar1 != '\\0') {\n    if (cVar1 == ',') {\n      *pcVar2 = '.';\n    }\n    pcVar2 = pcVar2 + 1;\n    cVar1 = *pcVar2;\n  }\n  dVar3 = strtod(__nptr,&local_38);\n  if (*local_38 == '\\0') {\n    dVar4 = strtod(__nptr_00,&local_38);\n    if (*local_38 == '\\0') {\n      free(__nptr);\n      free(__nptr_00);\n      if (dVar4 < dVar3) {\n        param_2 = param_1;\n      }\n    }\n    else {\n      free(__nptr);\n      free(__nptr_00);\n      param_2 = \"Invalid input\";\n    }\n  }\n  else {\n    free(__nptr);\n    free(__nptr_00);\n    param_2 = \"Invalid input\";\n  }\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 137,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1,char *param_2)\n\n{\n  char *pcVar1;\n  char cVar2;\n  char *__nptr;\n  char *__nptr_00;\n  char *pcVar3;\n  long in_FS_OFFSET;\n  double dVar4;\n  double dVar5;\n  char *local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  __nptr = strdup(param_1);\n  __nptr_00 = strdup(param_2);\n  cVar2 = *__nptr;\n  pcVar3 = __nptr;\n  while (cVar2 != '\\0') {\n    if (cVar2 == ',') {\n      *pcVar3 = '.';\n    }\n    pcVar1 = pcVar3 + 1;\n    pcVar3 = pcVar3 + 1;\n    cVar2 = *pcVar1;\n  }\n  cVar2 = *__nptr_00;\n  pcVar3 = __nptr_00;\n  while (cVar2 != '\\0') {\n    if (cVar2 == ',') {\n      *pcVar3 = '.';\n    }\n    pcVar1 = pcVar3 + 1;\n    pcVar3 = pcVar3 + 1;\n    cVar2 = *pcVar1;\n  }\n  dVar4 = strtod(__nptr,&local_38);\n  if ((*local_38 == '\\0') && (dVar5 = strtod(__nptr_00,&local_38), *local_38 == '\\0')) {\n    free(__nptr);\n    free(__nptr_00);\n    if (dVar5 < dVar4) {\n      param_2 = param_1;\n    }\n  }\n  else {\n    free(__nptr);\n    free(__nptr_00);\n    param_2 = \"Invalid input\";\n  }\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 137,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
        "c_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1,char *param_2)\n\n{\n  char *pcVar1;\n  char *__nptr;\n  char *__nptr_00;\n  char *pcVar2;\n  char cVar3;\n  long in_FS_OFFSET;\n  double dVar4;\n  double dVar5;\n  char *local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  __nptr = strdup(param_1);\n  __nptr_00 = strdup(param_2);\n  cVar3 = *__nptr;\n  pcVar2 = __nptr;\n  while (cVar3 != '\\0') {\n    while (cVar3 != ',') {\n      cVar3 = pcVar2[1];\n      pcVar2 = pcVar2 + 1;\n      if (cVar3 == '\\0') goto LAB_0010145d;\n    }\n    *pcVar2 = '.';\n    pcVar1 = pcVar2 + 1;\n    pcVar2 = pcVar2 + 1;\n    cVar3 = *pcVar1;\n  }\nLAB_0010145d:\n  cVar3 = *__nptr_00;\n  pcVar2 = __nptr_00;\n  while (cVar3 != '\\0') {\n    while (cVar3 != ',') {\n      cVar3 = pcVar2[1];\n      pcVar2 = pcVar2 + 1;\n      if (cVar3 == '\\0') goto LAB_00101485;\n    }\n    *pcVar2 = '.';\n    pcVar1 = pcVar2 + 1;\n    pcVar2 = pcVar2 + 1;\n    cVar3 = *pcVar1;\n  }\nLAB_00101485:\n  dVar4 = strtod(__nptr,&local_38);\n  if ((*local_38 == '\\0') && (dVar5 = strtod(__nptr_00,&local_38), *local_38 == '\\0')) {\n    free(__nptr);\n    free(__nptr_00);\n    if (dVar5 < dVar4) {\n      param_2 = param_1;\n    }\n  }\n  else {\n    free(__nptr);\n    free(__nptr_00);\n    param_2 = \"Invalid input\";\n  }\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_2;\n}"
    },
    {
        "task_id": 138,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(uint param_1)\n\n{\n  undefined8 uVar1;\n  \n  if (((param_1 & 1) == 0) && (7 < (int)param_1)) {\n    uVar1 = 1;\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}"
    },
    {
        "task_id": 138,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(uint param_1)\n\n{\n  return (uint)(7 < (int)param_1) & (param_1 ^ 1);\n}"
    },
    {
        "task_id": 138,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(uint param_1)\n\n{\n  return ~param_1 & (uint)(7 < (int)param_1);\n}"
    },
    {
        "task_id": 138,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "uint func0(uint param_1)\n\n{\n  return ~param_1 & (uint)(7 < (int)param_1);\n}"
    },
    {
        "task_id": 139,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(int param_1)\n\n{\n  int local_1c;\n  long local_18;\n  long local_10;\n  \n  local_18 = 1;\n  local_10 = 1;\n  for (local_1c = 1; local_1c <= param_1; local_1c = local_1c + 1) {\n    local_18 = local_1c * local_18;\n    local_10 = local_10 * local_18;\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 139,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(int param_1)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (param_1 < 1) {\n    lVar2 = 1;\n  }\n  else {\n    lVar1 = 1;\n    lVar2 = 1;\n    lVar3 = 1;\n    do {\n      lVar3 = lVar3 * lVar1;\n      lVar2 = lVar2 * lVar3;\n      lVar1 = lVar1 + 1;\n    } while (lVar1 != (ulong)(param_1 - 1) + 2);\n  }\n  return lVar2;\n}"
    },
    {
        "task_id": 139,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(int param_1)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_1) {\n    lVar1 = 1;\n    lVar3 = 1;\n    lVar2 = 1;\n    do {\n      lVar2 = lVar2 * lVar1;\n      lVar1 = lVar1 + 1;\n      lVar3 = lVar3 * lVar2;\n    } while (lVar1 != (ulong)(param_1 - 1) + 2);\n    return lVar3;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 139,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(int param_1)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  if (0 < param_1) {\n    lVar1 = 1;\n    lVar3 = 1;\n    lVar2 = 1;\n    do {\n      lVar2 = lVar2 * lVar1;\n      lVar1 = lVar1 + 1;\n      lVar3 = lVar3 * lVar2;\n    } while (lVar1 != (ulong)(param_1 - 1) + 2);\n    return lVar3;\n  }\n  return 1;\n}"
    },
    {
        "task_id": 140,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  int local_24;\n  int local_20;\n  int local_1c;\n  \n  local_24 = 0;\n  local_20 = 0;\n  local_1c = 0;\n  while( true ) {\n    sVar2 = strlen(param_1);\n    if (sVar2 <= (ulong)(long)local_1c) break;\n    if (param_1[local_1c] == ' ') {\n      local_24 = local_24 + 1;\n    }\n    else {\n      if (local_24 == 1) {\n        *(undefined *)(param_2 + local_20) = 0x5f;\n        local_20 = local_20 + 1;\n      }\n      if (local_24 == 2) {\n        iVar1 = local_20 + 1;\n        *(undefined *)(param_2 + local_20) = 0x5f;\n        local_20 = local_20 + 2;\n        *(undefined *)(param_2 + iVar1) = 0x5f;\n      }\n      if (2 < local_24) {\n        *(undefined *)(param_2 + local_20) = 0x2d;\n        local_20 = local_20 + 1;\n      }\n      local_24 = 0;\n      *(char *)(local_20 + param_2) = param_1[local_1c];\n      local_20 = local_20 + 1;\n    }\n    local_1c = local_1c + 1;\n  }\n  if (local_24 == 1) {\n    *(undefined *)(param_2 + local_20) = 0x5f;\n    local_20 = local_20 + 1;\n  }\n  if (local_24 == 2) {\n    iVar1 = local_20 + 1;\n    *(undefined *)(param_2 + local_20) = 0x5f;\n    local_20 = local_20 + 2;\n    *(undefined *)(param_2 + iVar1) = 0x5f;\n  }\n  if (2 < local_24) {\n    *(undefined *)(param_2 + local_20) = 0x2d;\n    local_20 = local_20 + 1;\n  }\n  *(undefined *)(param_2 + local_20) = 0;\n  return;\n}"
    },
    {
        "task_id": 140,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  ulong uVar3;\n  char *pcVar4;\n  ulong uVar5;\n  int iVar6;\n  \n  uVar5 = 0;\n  iVar2 = 0;\n  iVar6 = 0;\n  do {\n    uVar3 = 0xffffffffffffffff;\n    pcVar4 = param_1;\n    do {\n      if (uVar3 == 0) break;\n      uVar3 = uVar3 - 1;\n      cVar1 = *pcVar4;\n      pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    if (~uVar3 - 1 <= uVar5) {\n      if (iVar6 == 1) {\n        *(undefined *)(param_2 + iVar2) = 0x5f;\n        iVar2 = iVar2 + 1;\n      }\n      else if (iVar6 == 2) {\n        *(undefined *)(param_2 + iVar2) = 0x5f;\n        *(undefined *)(param_2 + (iVar2 + 1)) = 0x5f;\n        iVar2 = iVar2 + 2;\n      }\n      else if (2 < iVar6) {\n        *(undefined *)(param_2 + iVar2) = 0x2d;\n        iVar2 = iVar2 + 1;\n      }\n      *(undefined *)(param_2 + iVar2) = 0;\n      return;\n    }\n    if (param_1[uVar5] == ' ') {\n      iVar6 = iVar6 + 1;\n    }\n    else {\n      if (iVar6 == 1) {\n        *(undefined *)(param_2 + iVar2) = 0x5f;\n        iVar2 = iVar2 + 1;\n      }\n      else if (iVar6 == 2) {\n        *(undefined *)(param_2 + iVar2) = 0x5f;\n        *(undefined *)(param_2 + (iVar2 + 1)) = 0x5f;\n        iVar2 = iVar2 + 2;\n      }\n      else if (2 < iVar6) {\n        *(undefined *)(param_2 + iVar2) = 0x2d;\n        iVar2 = iVar2 + 1;\n      }\n      *(char *)(param_2 + iVar2) = param_1[uVar5];\n      iVar6 = 0;\n      iVar2 = iVar2 + 1;\n    }\n    uVar5 = uVar5 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 140,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,long param_2)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  char *pcVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  int iVar7;\n  ulong uVar8;\n  \n  iVar5 = 0;\n  sVar1 = strlen(param_1);\n  iVar7 = 0;\n  lVar6 = 0;\n  for (uVar8 = 0; pcVar3 = (char *)(param_2 + lVar6), uVar8 < sVar1; uVar8 = uVar8 + 1) {\n    if (param_1[uVar8] == ' ') {\n      iVar7 = iVar7 + 1;\n    }\n    else {\n      iVar4 = iVar5 + 1;\n      pcVar2 = (char *)(iVar4 + param_2);\n      if (iVar7 == 1) {\n        *pcVar3 = '_';\n        pcVar3 = pcVar2;\n        iVar5 = iVar4;\n      }\n      else if (iVar7 == 2) {\n        *pcVar3 = '_';\n        *pcVar2 = '_';\n        pcVar3 = (char *)((iVar5 + 2) + param_2);\n        iVar5 = iVar5 + 2;\n      }\n      else if (2 < iVar7) {\n        *pcVar3 = '-';\n        pcVar3 = pcVar2;\n        iVar5 = iVar4;\n      }\n      iVar5 = iVar5 + 1;\n      *pcVar3 = param_1[uVar8];\n      sVar1 = strlen(param_1);\n      iVar7 = 0;\n      lVar6 = (long)iVar5;\n    }\n  }\n  if (iVar7 == 1) {\n    *pcVar3 = '_';\n    lVar6 = (long)(iVar5 + 1);\n  }\n  else if (iVar7 == 2) {\n    *pcVar3 = '_';\n    lVar6 = (long)(iVar5 + 2);\n    *(undefined *)(param_2 + (iVar5 + 1)) = 0x5f;\n  }\n  else if (2 < iVar7) {\n    *pcVar3 = '-';\n    lVar6 = (long)(iVar5 + 1);\n  }\n  *(undefined *)(param_2 + lVar6) = 0;\n  return;\n}"
    },
    {
        "task_id": 140,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char *param_1,char *param_2)\n\n{\n  ulong uVar1;\n  char *pcVar2;\n  char *pcVar3;\n  int iVar4;\n  int iVar5;\n  long lVar6;\n  int iVar7;\n  ulong uVar8;\n  \n  uVar1 = strlen(param_1);\n  if (uVar1 == 0) {\n    lVar6 = 0;\n  }\n  else {\n    uVar8 = 0;\n    iVar5 = 0;\n    iVar7 = 0;\n    pcVar3 = param_2;\n    do {\n      if (param_1[uVar8] == ' ') {\n        iVar7 = iVar7 + 1;\n      }\n      else {\n        iVar4 = iVar5 + 1;\n        pcVar2 = param_2 + iVar4;\n        if (iVar7 == 1) {\n          *pcVar3 = '_';\n          pcVar3 = pcVar2;\n          iVar5 = iVar4;\n        }\n        else if (iVar7 == 2) {\n          *pcVar3 = '_';\n          *pcVar2 = '_';\n          pcVar3 = param_2 + (iVar5 + 2);\n          iVar5 = iVar5 + 2;\n        }\n        else if (2 < iVar7) {\n          *pcVar3 = '-';\n          pcVar3 = pcVar2;\n          iVar5 = iVar4;\n        }\n        iVar5 = iVar5 + 1;\n        *pcVar3 = param_1[uVar8];\n        uVar1 = strlen(param_1);\n        iVar7 = 0;\n      }\n      lVar6 = (long)iVar5;\n      uVar8 = uVar8 + 1;\n      pcVar3 = param_2 + lVar6;\n    } while (uVar8 < uVar1);\n    if (iVar7 == 1) {\n      *pcVar3 = '_';\n      lVar6 = (long)(iVar5 + 1);\n    }\n    else if (iVar7 == 2) {\n      *pcVar3 = '_';\n      lVar6 = (long)(iVar5 + 2);\n      param_2[iVar5 + 1] = '_';\n    }\n    else if (2 < iVar7) {\n      *pcVar3 = '-';\n      lVar6 = (long)(iVar5 + 1);\n    }\n  }\n  param_2[lVar6] = '\\0';\n  return;\n}"
    },
    {
        "task_id": 141,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  size_t sVar4;\n  undefined *puVar5;\n  char *__s1;\n  int local_20;\n  int local_1c;\n  int local_18;\n  \n  local_20 = 0;\n  local_1c = 0;\n  sVar4 = strlen(param_1);\n  iVar2 = (int)sVar4;\n  if (iVar2 < 5) {\n    puVar5 = &DAT_00102008;\n  }\n  else {\n    cVar1 = *param_1;\n    if ((cVar1 < 'A') || ((('Z' < cVar1 && (cVar1 < 'a')) || ('z' < cVar1)))) {\n      puVar5 = &DAT_00102008;\n    }\n    else {\n      __s1 = param_1 + (long)iVar2 + -4;\n      iVar3 = strcmp(__s1,\".txt\");\n      if (((iVar3 != 0) && (iVar3 = strcmp(__s1,\".exe\"), iVar3 != 0)) &&\n         (iVar3 = strcmp(__s1,\".dll\"), iVar3 != 0)) {\n        return &DAT_00102008;\n      }\n      for (local_18 = 0; local_18 < iVar2; local_18 = local_18 + 1) {\n        if (('/' < param_1[local_18]) && (param_1[local_18] < ':')) {\n          local_20 = local_20 + 1;\n        }\n        if (param_1[local_18] == '.') {\n          local_1c = local_1c + 1;\n        }\n      }\n      if ((local_20 < 4) && (local_1c == 1)) {\n        puVar5 = &DAT_0010201a;\n      }\n      else {\n        puVar5 = &DAT_00102008;\n      }\n    }\n  }\n  return puVar5;\n}"
    },
    {
        "task_id": 141,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined1 * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  long lVar4;\n  byte bVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar9;\n  byte *pbVar10;\n  bool bVar11;\n  bool bVar12;\n  bool bVar13;\n  \n  lVar3 = -1;\n  pcVar9 = param_1;\n  do {\n    if (lVar3 == 0) break;\n    lVar3 = lVar3 + -1;\n    cVar1 = *pcVar9;\n    pcVar9 = pcVar9 + 1;\n  } while (cVar1 != '\\0');\n  iVar2 = ~(uint)lVar3 - 1;\n  if ((4 < iVar2) && (5 < (byte)(*param_1 + 0xa5U))) {\n    bVar5 = *param_1 + 0xbf;\n    bVar11 = bVar5 < 0x39;\n    bVar13 = bVar5 == 0x39;\n    if (bVar5 < 0x3a) {\n      pbVar7 = (byte *)(param_1 + (long)iVar2 + -4);\n      lVar4 = 5;\n      pbVar6 = pbVar7;\n      pbVar10 = (byte *)0x10216d;\n      do {\n        if (lVar4 == 0) break;\n        lVar4 = lVar4 + -1;\n        bVar11 = *pbVar6 < *pbVar10;\n        bVar13 = *pbVar6 == *pbVar10;\n        pbVar6 = pbVar6 + 1;\n        pbVar10 = pbVar10 + 1;\n      } while (bVar13);\n      bVar12 = false;\n      bVar11 = (!bVar11 && !bVar13) == bVar11;\n      if (!bVar11) {\n        lVar4 = 5;\n        pbVar6 = pbVar7;\n        pbVar10 = (byte *)0x102058;\n        do {\n          if (lVar4 == 0) break;\n          lVar4 = lVar4 + -1;\n          bVar12 = *pbVar6 < *pbVar10;\n          bVar11 = *pbVar6 == *pbVar10;\n          pbVar6 = pbVar6 + 1;\n          pbVar10 = pbVar10 + 1;\n        } while (bVar11);\n        bVar13 = false;\n        bVar11 = (!bVar12 && !bVar11) == bVar12;\n        if (!bVar11) {\n          lVar4 = 5;\n          pbVar6 = &DAT_0010204a;\n          do {\n            if (lVar4 == 0) break;\n            lVar4 = lVar4 + -1;\n            bVar13 = *pbVar7 < *pbVar6;\n            bVar11 = *pbVar7 == *pbVar6;\n            pbVar7 = pbVar7 + 1;\n            pbVar6 = pbVar6 + 1;\n          } while (bVar11);\n          if ((!bVar13 && !bVar11) != bVar13) {\n            return &DAT_00102004;\n          }\n        }\n      }\n      pcVar9 = param_1 + (ulong)(~(uint)lVar3 - 2) + 1;\n      iVar8 = 0;\n      iVar2 = 0;\n      do {\n        if ((byte)(*param_1 - 0x30U) < 10) {\n          iVar2 = iVar2 + 1;\n        }\n        else {\n          iVar8 = iVar8 + (uint)(*param_1 == '.');\n        }\n        param_1 = param_1 + 1;\n      } while (param_1 != pcVar9);\n      if ((iVar2 < 4) && (iVar8 == 1)) {\n        return &DAT_00102007;\n      }\n      return &DAT_00102004;\n    }\n  }\n  return &DAT_00102004;\n}"
    },
    {
        "task_id": 141,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(char *param_1)\n\n{\n  char *pcVar1;\n  char cVar2;\n  int iVar3;\n  size_t sVar4;\n  int iVar5;\n  long lVar6;\n  byte bVar7;\n  int iVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  bool bVar12;\n  bool bVar13;\n  bool bVar14;\n  byte bVar15;\n  \n  bVar15 = 0;\n  sVar4 = strlen(param_1);\n  iVar3 = (int)sVar4;\n  if (iVar3 < 5) {\n    return &DAT_00102004;\n  }\n  if (5 < (byte)(*param_1 + 0xa5U)) {\n    bVar7 = *param_1 + 0xbf;\n    bVar12 = bVar7 < 0x39;\n    bVar14 = bVar7 == 0x39;\n    if (bVar7 < 0x3a) {\n      lVar6 = 5;\n      pbVar10 = (byte *)(param_1 + (long)iVar3 + -4);\n      pbVar9 = pbVar10;\n      pbVar11 = (byte *)0x10216d;\n      do {\n        if (lVar6 == 0) break;\n        lVar6 = lVar6 + -1;\n        bVar12 = *pbVar9 < *pbVar11;\n        bVar14 = *pbVar9 == *pbVar11;\n        pbVar9 = pbVar9 + (ulong)bVar15 * -2 + 1;\n        pbVar11 = pbVar11 + (ulong)bVar15 * -2 + 1;\n      } while (bVar14);\n      bVar13 = false;\n      bVar12 = (!bVar12 && !bVar14) == bVar12;\n      if (!bVar12) {\n        lVar6 = 5;\n        pbVar9 = pbVar10;\n        pbVar11 = (byte *)0x102058;\n        do {\n          if (lVar6 == 0) break;\n          lVar6 = lVar6 + -1;\n          bVar13 = *pbVar9 < *pbVar11;\n          bVar12 = *pbVar9 == *pbVar11;\n          pbVar9 = pbVar9 + (ulong)bVar15 * -2 + 1;\n          pbVar11 = pbVar11 + (ulong)bVar15 * -2 + 1;\n        } while (bVar12);\n        bVar14 = false;\n        bVar12 = (!bVar13 && !bVar12) == bVar13;\n        if (!bVar12) {\n          lVar6 = 5;\n          pbVar9 = &DAT_0010204a;\n          do {\n            if (lVar6 == 0) break;\n            lVar6 = lVar6 + -1;\n            bVar14 = *pbVar10 < *pbVar9;\n            bVar12 = *pbVar10 == *pbVar9;\n            pbVar10 = pbVar10 + (ulong)bVar15 * -2 + 1;\n            pbVar9 = pbVar9 + (ulong)bVar15 * -2 + 1;\n          } while (bVar12);\n          if ((!bVar14 && !bVar12) != bVar14) {\n            return &DAT_00102004;\n          }\n        }\n      }\n      iVar8 = 0;\n      iVar5 = 0;\n      pcVar1 = param_1 + (ulong)(iVar3 - 1) + 1;\n      do {\n        while (cVar2 = *param_1, 9 < (byte)(cVar2 - 0x30U)) {\n          param_1 = param_1 + 1;\n          iVar8 = iVar8 + (uint)(cVar2 == '.');\n          if (pcVar1 == param_1) goto LAB_0010187a;\n        }\n        param_1 = param_1 + 1;\n        iVar5 = iVar5 + 1;\n      } while (pcVar1 != param_1);\nLAB_0010187a:\n      if ((iVar5 < 4) && (iVar8 == 1)) {\n        return &DAT_00102007;\n      }\n    }\n  }\n  return &DAT_00102004;\n}"
    },
    {
        "task_id": 141,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined * func0(char *param_1)\n\n{\n  char *pcVar1;\n  char *pcVar2;\n  char *pcVar3;\n  char *pcVar4;\n  char *pcVar5;\n  char *pcVar6;\n  char *pcVar7;\n  char *pcVar8;\n  char *pcVar9;\n  char *pcVar10;\n  char *pcVar11;\n  char *pcVar12;\n  char *pcVar13;\n  char *pcVar14;\n  char *pcVar15;\n  char *pcVar16;\n  char *pcVar17;\n  char *pcVar18;\n  char *pcVar19;\n  char *pcVar20;\n  char *pcVar21;\n  char *pcVar22;\n  char *pcVar23;\n  char *pcVar24;\n  char *pcVar25;\n  char *pcVar26;\n  char *pcVar27;\n  char *pcVar28;\n  char *pcVar29;\n  char *pcVar30;\n  undefined auVar31 [14];\n  undefined auVar32 [12];\n  unkbyte10 Var33;\n  undefined auVar34 [12];\n  undefined auVar35 [14];\n  undefined auVar36 [12];\n  undefined auVar37 [12];\n  uint uVar38;\n  size_t sVar39;\n  byte bVar40;\n  long lVar41;\n  char *pcVar42;\n  uint uVar43;\n  byte *pbVar44;\n  byte *pbVar45;\n  byte *pbVar46;\n  bool bVar47;\n  bool bVar48;\n  bool bVar49;\n  byte bVar50;\n  char cVar51;\n  undefined2 uVar52;\n  int iVar54;\n  char cVar64;\n  char cVar66;\n  short sVar65;\n  char cVar67;\n  char cVar68;\n  undefined auVar60 [16];\n  undefined auVar61 [16];\n  int iVar69;\n  undefined auVar70 [12];\n  undefined auVar71 [12];\n  int iVar79;\n  int iVar80;\n  undefined auVar73 [16];\n  undefined auVar76 [16];\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  undefined auVar88 [12];\n  undefined auVar89 [16];\n  undefined auVar90 [16];\n  undefined auVar99 [16];\n  undefined auVar108 [16];\n  undefined auVar113 [16];\n  undefined auVar118 [16];\n  undefined4 uVar53;\n  undefined6 uVar55;\n  undefined8 uVar56;\n  undefined auVar58 [12];\n  undefined auVar57 [12];\n  undefined auVar59 [14];\n  undefined auVar63 [16];\n  undefined auVar62 [16];\n  undefined auVar77 [16];\n  undefined auVar72 [14];\n  undefined auVar75 [16];\n  undefined auVar78 [16];\n  undefined auVar74 [16];\n  undefined auVar91 [16];\n  undefined auVar87 [12];\n  undefined auVar100 [16];\n  undefined auVar92 [16];\n  undefined auVar101 [16];\n  undefined auVar93 [16];\n  undefined auVar102 [16];\n  undefined auVar94 [16];\n  undefined auVar103 [16];\n  undefined auVar95 [16];\n  undefined auVar98 [16];\n  undefined auVar104 [16];\n  undefined auVar107 [16];\n  undefined auVar96 [16];\n  undefined auVar105 [16];\n  undefined auVar97 [16];\n  undefined auVar106 [16];\n  undefined auVar109 [16];\n  undefined auVar110 [16];\n  undefined auVar111 [16];\n  undefined auVar112 [16];\n  undefined auVar114 [16];\n  undefined auVar115 [16];\n  undefined auVar116 [16];\n  undefined auVar117 [16];\n  undefined auVar119 [16];\n  undefined auVar120 [16];\n  \n  bVar50 = 0;\n  sVar39 = strlen(param_1);\n  uVar38 = (uint)sVar39;\n  if ((int)uVar38 < 5) {\n    return &DAT_00102004;\n  }\n  cVar51 = *param_1;\n  if ((byte)(cVar51 + 0xa5U) < 6) goto LAB_00101c88;\n  bVar40 = cVar51 + 0xbf;\n  bVar47 = bVar40 < 0x39;\n  bVar49 = bVar40 == 0x39;\n  if (0x39 < bVar40) goto LAB_00101c88;\n  pbVar45 = (byte *)(param_1 + (long)(int)uVar38 + -4);\n  lVar41 = 5;\n  pbVar44 = pbVar45;\n  pbVar46 = (byte *)0x10216d;\n  do {\n    if (lVar41 == 0) break;\n    lVar41 = lVar41 + -1;\n    bVar47 = *pbVar44 < *pbVar46;\n    bVar49 = *pbVar44 == *pbVar46;\n    pbVar44 = pbVar44 + (ulong)bVar50 * -2 + 1;\n    pbVar46 = pbVar46 + (ulong)bVar50 * -2 + 1;\n  } while (bVar49);\n  bVar48 = false;\n  bVar47 = (!bVar47 && !bVar49) == bVar47;\n  if (!bVar47) {\n    lVar41 = 5;\n    pbVar44 = pbVar45;\n    pbVar46 = (byte *)0x102058;\n    do {\n      if (lVar41 == 0) break;\n      lVar41 = lVar41 + -1;\n      bVar48 = *pbVar44 < *pbVar46;\n      bVar47 = *pbVar44 == *pbVar46;\n      pbVar44 = pbVar44 + (ulong)bVar50 * -2 + 1;\n      pbVar46 = pbVar46 + (ulong)bVar50 * -2 + 1;\n    } while (bVar47);\n    bVar49 = false;\n    bVar47 = (!bVar48 && !bVar47) == bVar48;\n    if (!bVar47) {\n      lVar41 = 5;\n      pbVar44 = &DAT_0010204a;\n      do {\n        if (lVar41 == 0) break;\n        lVar41 = lVar41 + -1;\n        bVar49 = *pbVar45 < *pbVar44;\n        bVar47 = *pbVar45 == *pbVar44;\n        pbVar45 = pbVar45 + (ulong)bVar50 * -2 + 1;\n        pbVar44 = pbVar44 + (ulong)bVar50 * -2 + 1;\n      } while (bVar47);\n      if ((!bVar49 && !bVar47) != bVar49) {\n        return &DAT_00102004;\n      }\n    }\n  }\n  if (uVar38 - 1 < 0xf) {\n    if ((byte)(cVar51 - 0x30U) < 10) {\n      uVar43 = 0;\n      iVar69 = 0;\n      iVar79 = 0;\nLAB_00101a00:\n      iVar79 = iVar79 + 1;\n      goto LAB_00101a03;\n    }\n    iVar69 = 0;\n    iVar79 = 0;\n    iVar80 = 1;\nLAB_00101a0e:\n    if ((byte)(param_1[iVar80] - 0x30U) < 10) {\n      iVar79 = iVar79 + 1;\n    }\n    else {\n      iVar69 = iVar69 + (uint)(param_1[iVar80] == '.');\n    }\n    if (iVar80 + 1 < (int)uVar38) {\n      if ((byte)(param_1[iVar80 + 1] - 0x30U) < 10) {\n        iVar79 = iVar79 + 1;\n      }\n      else {\n        iVar69 = iVar69 + (uint)(param_1[iVar80 + 1] == '.');\n      }\n      if (iVar80 + 2 < (int)uVar38) {\n        if ((byte)(param_1[iVar80 + 2] - 0x30U) < 10) {\n          iVar79 = iVar79 + 1;\n        }\n        else {\n          iVar69 = iVar69 + (uint)(param_1[iVar80 + 2] == '.');\n        }\n        if (iVar80 + 3 < (int)uVar38) {\n          if ((byte)(param_1[iVar80 + 3] - 0x30U) < 10) {\n            iVar79 = iVar79 + 1;\n          }\n          else {\n            iVar69 = iVar69 + (uint)(param_1[iVar80 + 3] == '.');\n          }\n          if (iVar80 + 4 < (int)uVar38) {\n            if ((byte)(param_1[iVar80 + 4] - 0x30U) < 10) {\n              iVar79 = iVar79 + 1;\n            }\n            else {\n              iVar69 = iVar69 + (uint)(param_1[iVar80 + 4] == '.');\n            }\n            if (iVar80 + 5 < (int)uVar38) {\n              if ((byte)(param_1[iVar80 + 5] - 0x30U) < 10) {\n                iVar79 = iVar79 + 1;\n              }\n              else {\n                iVar69 = iVar69 + (uint)(param_1[iVar80 + 5] == '.');\n              }\n              if (iVar80 + 6 < (int)uVar38) {\n                if ((byte)(param_1[iVar80 + 6] - 0x30U) < 10) {\n                  iVar79 = iVar79 + 1;\n                }\n                else {\n                  iVar69 = iVar69 + (uint)(param_1[iVar80 + 6] == '.');\n                }\n                if (iVar80 + 7 < (int)uVar38) {\n                  if ((byte)(param_1[iVar80 + 7] - 0x30U) < 10) {\n                    iVar79 = iVar79 + 1;\n                  }\n                  else {\n                    iVar69 = iVar69 + (uint)(param_1[iVar80 + 7] == '.');\n                  }\n                  if (iVar80 + 8 < (int)uVar38) {\n                    if ((byte)(param_1[iVar80 + 8] - 0x30U) < 10) {\n                      iVar79 = iVar79 + 1;\n                    }\n                    else {\n                      iVar69 = iVar69 + (uint)(param_1[iVar80 + 8] == '.');\n                    }\n                    if (iVar80 + 9 < (int)uVar38) {\n                      if ((byte)(param_1[iVar80 + 9] - 0x30U) < 10) {\n                        iVar79 = iVar79 + 1;\n                      }\n                      else {\n                        iVar69 = iVar69 + (uint)(param_1[iVar80 + 9] == '.');\n                      }\n                      if (iVar80 + 10 < (int)uVar38) {\n                        if ((byte)(param_1[iVar80 + 10] - 0x30U) < 10) {\n                          iVar79 = iVar79 + 1;\n                        }\n                        else {\n                          iVar69 = iVar69 + (uint)(param_1[iVar80 + 10] == '.');\n                        }\n                        if (iVar80 + 0xb < (int)uVar38) {\n                          if ((byte)(param_1[iVar80 + 0xb] - 0x30U) < 10) {\n                            iVar79 = iVar79 + 1;\n                          }\n                          else {\n                            iVar69 = iVar69 + (uint)(param_1[iVar80 + 0xb] == '.');\n                          }\n                          if (iVar80 + 0xc < (int)uVar38) {\n                            if ((byte)(param_1[iVar80 + 0xc] - 0x30U) < 10) {\n                              iVar79 = iVar79 + 1;\n                            }\n                            else {\n                              iVar69 = iVar69 + (uint)(param_1[iVar80 + 0xc] == '.');\n                            }\n                            if (iVar80 + 0xd < (int)uVar38) {\n                              if ((byte)(param_1[iVar80 + 0xd] - 0x30U) < 10) {\n                                iVar79 = iVar79 + 1;\n                              }\n                              else {\n                                iVar69 = iVar69 + (uint)(param_1[iVar80 + 0xd] == '.');\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  else {\n    iVar82 = 0;\n    iVar83 = 0;\n    iVar84 = 0;\n    iVar85 = 0;\n    iVar69 = 0;\n    iVar79 = 0;\n    iVar80 = 0;\n    iVar81 = 0;\n    pcVar42 = param_1;\n    do {\n      cVar51 = *pcVar42;\n      pcVar1 = pcVar42 + 1;\n      pcVar2 = pcVar42 + 2;\n      pcVar3 = pcVar42 + 3;\n      pcVar4 = pcVar42 + 4;\n      pcVar5 = pcVar42 + 5;\n      pcVar6 = pcVar42 + 6;\n      pcVar7 = pcVar42 + 7;\n      pcVar8 = pcVar42 + 8;\n      pcVar9 = pcVar42 + 9;\n      pcVar10 = pcVar42 + 10;\n      pcVar11 = pcVar42 + 0xb;\n      pcVar12 = pcVar42 + 0xc;\n      pcVar13 = pcVar42 + 0xd;\n      pcVar14 = pcVar42 + 0xe;\n      pcVar15 = pcVar42 + 0xf;\n      cVar64 = *pcVar42;\n      pcVar16 = pcVar42 + 1;\n      pcVar17 = pcVar42 + 2;\n      pcVar18 = pcVar42 + 3;\n      pcVar19 = pcVar42 + 4;\n      pcVar20 = pcVar42 + 5;\n      pcVar21 = pcVar42 + 6;\n      pcVar22 = pcVar42 + 7;\n      pcVar23 = pcVar42 + 8;\n      pcVar24 = pcVar42 + 9;\n      pcVar25 = pcVar42 + 10;\n      pcVar26 = pcVar42 + 0xb;\n      pcVar27 = pcVar42 + 0xc;\n      pcVar28 = pcVar42 + 0xd;\n      pcVar29 = pcVar42 + 0xe;\n      pcVar30 = pcVar42 + 0xf;\n      pcVar42 = pcVar42 + 0x10;\n      auVar60[0] = cVar51 + DAT_00102650;\n      auVar60[1] = *pcVar1 + UNK_00102651;\n      auVar60[2] = *pcVar2 + UNK_00102652;\n      auVar60[3] = *pcVar3 + UNK_00102653;\n      auVar60[4] = *pcVar4 + UNK_00102654;\n      auVar60[5] = *pcVar5 + UNK_00102655;\n      auVar60[6] = *pcVar6 + UNK_00102656;\n      auVar60[7] = *pcVar7 + UNK_00102657;\n      auVar60[8] = *pcVar8 + UNK_00102658;\n      auVar60[9] = *pcVar9 + UNK_00102659;\n      auVar60[10] = *pcVar10 + UNK_0010265a;\n      auVar60[11] = *pcVar11 + UNK_0010265b;\n      auVar60[12] = *pcVar12 + UNK_0010265c;\n      auVar60[13] = *pcVar13 + UNK_0010265d;\n      auVar60[14] = *pcVar14 + UNK_0010265e;\n      auVar60[15] = *pcVar15 + UNK_0010265f;\n      auVar89[0] = -(cVar64 == DAT_00102670);\n      auVar89[1] = -(*pcVar16 == UNK_00102671);\n      auVar89[2] = -(*pcVar17 == UNK_00102672);\n      auVar89[3] = -(*pcVar18 == UNK_00102673);\n      auVar89[4] = -(*pcVar19 == UNK_00102674);\n      auVar89[5] = -(*pcVar20 == UNK_00102675);\n      auVar89[6] = -(*pcVar21 == UNK_00102676);\n      auVar89[7] = -(*pcVar22 == UNK_00102677);\n      auVar89[8] = -(*pcVar23 == UNK_00102678);\n      auVar89[9] = -(*pcVar24 == UNK_00102679);\n      auVar89[10] = -(*pcVar25 == UNK_0010267a);\n      auVar89[11] = -(*pcVar26 == UNK_0010267b);\n      auVar89[12] = -(*pcVar27 == UNK_0010267c);\n      auVar89[13] = -(*pcVar28 == UNK_0010267d);\n      auVar89[14] = -(*pcVar29 == UNK_0010267e);\n      auVar89[15] = -(*pcVar30 == UNK_0010267f);\n      auVar60 = psubusb(auVar60,_DAT_00102660);\n      auVar61[0] = -(auVar60[0] == '\\0');\n      auVar61[1] = -(auVar60[1] == '\\0');\n      auVar61[2] = -(auVar60[2] == '\\0');\n      auVar61[3] = -(auVar60[3] == '\\0');\n      auVar61[4] = -(auVar60[4] == '\\0');\n      auVar61[5] = -(auVar60[5] == '\\0');\n      auVar61[6] = -(auVar60[6] == '\\0');\n      auVar61[7] = -(auVar60[7] == '\\0');\n      auVar61[8] = -(auVar60[8] == '\\0');\n      auVar61[9] = -(auVar60[9] == '\\0');\n      auVar61[10] = -(auVar60[10] == '\\0');\n      auVar61[11] = -(auVar60[11] == '\\0');\n      auVar61[12] = -(auVar60[12] == '\\0');\n      auVar61[13] = -(auVar60[13] == '\\0');\n      auVar61[14] = -(auVar60[14] == '\\0');\n      auVar61[15] = -(auVar60[15] == '\\0');\n      auVar60 = auVar61 & _DAT_00102680;\n      auVar73[0] = -(auVar61[0] == '\\0');\n      auVar73[1] = -(auVar61[1] == '\\0');\n      auVar73[2] = -(auVar61[2] == '\\0');\n      auVar73[3] = -(auVar61[3] == '\\0');\n      auVar73[4] = -(auVar61[4] == '\\0');\n      auVar73[5] = -(auVar61[5] == '\\0');\n      auVar73[6] = -(auVar61[6] == '\\0');\n      auVar73[7] = -(auVar61[7] == '\\0');\n      auVar73[8] = -(auVar61[8] == '\\0');\n      auVar73[9] = -(auVar61[9] == '\\0');\n      auVar73[10] = -(auVar61[10] == '\\0');\n      auVar73[11] = -(auVar61[11] == '\\0');\n      auVar73[12] = -(auVar61[12] == '\\0');\n      auVar73[13] = -(auVar61[13] == '\\0');\n      auVar73[14] = -(auVar61[14] == '\\0');\n      auVar73[15] = -(auVar61[15] == '\\0');\n      auVar73 = auVar73 & auVar89;\n      cVar51 = auVar73[0];\n      cVar64 = auVar73[8];\n      cVar66 = auVar73[9];\n      cVar67 = auVar73[10];\n      cVar68 = auVar73[11];\n      auVar97._0_14_ = auVar73._0_14_;\n      auVar97[14] = auVar73[7];\n      auVar97[15] = -(auVar73[7] < '\\0');\n      auVar96._14_2_ = auVar97._14_2_;\n      auVar96._0_13_ = auVar73._0_13_;\n      auVar96[13] = -(auVar73[6] < '\\0');\n      auVar95._13_3_ = auVar96._13_3_;\n      auVar95._0_12_ = auVar73._0_12_;\n      auVar95[12] = auVar73[6];\n      auVar94._12_4_ = auVar95._12_4_;\n      auVar94._0_11_ = auVar73._0_11_;\n      auVar94[11] = -(auVar73[5] < '\\0');\n      auVar93._11_5_ = auVar94._11_5_;\n      auVar93._0_10_ = auVar73._0_10_;\n      auVar93[10] = auVar73[5];\n      auVar92._10_6_ = auVar93._10_6_;\n      auVar92._0_9_ = auVar73._0_9_;\n      auVar92[9] = -(auVar73[4] < '\\0');\n      auVar91._9_7_ = auVar92._9_7_;\n      auVar91._0_8_ = auVar73._0_8_;\n      auVar91[8] = auVar73[4];\n      Var33 = CONCAT91(CONCAT81(auVar91._8_8_,-(auVar73[3] < '\\0')),auVar73[3]);\n      auVar32._2_10_ = Var33;\n      auVar32[1] = -(auVar73[2] < '\\0');\n      auVar32[0] = auVar73[2];\n      auVar31._2_12_ = auVar32;\n      auVar31[1] = -(auVar73[1] < '\\0');\n      auVar31[0] = auVar73[1];\n      auVar90._0_2_ = CONCAT11(-(cVar51 < '\\0'),cVar51);\n      auVar90._2_14_ = auVar31;\n      uVar52 = CONCAT11(-(cVar64 < '\\0'),cVar64);\n      uVar53 = CONCAT13(-(cVar66 < '\\0'),CONCAT12(cVar66,uVar52));\n      uVar55 = CONCAT15(-(cVar67 < '\\0'),CONCAT14(cVar67,uVar53));\n      uVar56 = CONCAT17(-(cVar68 < '\\0'),CONCAT16(cVar68,uVar55));\n      auVar70._0_10_ = CONCAT19(-(auVar73[12] < '\\0'),CONCAT18(auVar73[12],uVar56));\n      auVar70[10] = auVar73[13];\n      auVar70[11] = -(auVar73[13] < '\\0');\n      auVar72[12] = auVar73[14];\n      auVar72._0_12_ = auVar70;\n      auVar72[13] = -(auVar73[14] < '\\0');\n      auVar74[14] = auVar73[15];\n      auVar74._0_14_ = auVar72;\n      auVar74[15] = -(auVar73[15] < '\\0');\n      sVar65 = (short)Var33;\n      auVar120._0_12_ = auVar90._0_12_;\n      auVar120._12_2_ = sVar65;\n      auVar120._14_2_ = -(ushort)(sVar65 < 0);\n      auVar119._12_4_ = auVar120._12_4_;\n      auVar119._0_10_ = auVar90._0_10_;\n      auVar119._10_2_ = -(ushort)(auVar32._0_2_ < 0);\n      auVar118._10_6_ = auVar119._10_6_;\n      auVar118._0_8_ = auVar90._0_8_;\n      auVar118._8_2_ = auVar32._0_2_;\n      auVar34._4_8_ = auVar118._8_8_;\n      auVar34._2_2_ = -(ushort)(auVar31._0_2_ < 0);\n      auVar34._0_2_ = auVar31._0_2_;\n      iVar86 = CONCAT22(-(ushort)(auVar91._8_2_ < 0),auVar91._8_2_);\n      auVar87._0_8_ = CONCAT26(-(ushort)(auVar93._10_2_ < 0),CONCAT24(auVar93._10_2_,iVar86));\n      auVar87._8_2_ = auVar95._12_2_;\n      auVar87._10_2_ = -(ushort)(auVar95._12_2_ < 0);\n      auVar98._12_2_ = auVar96._14_2_;\n      auVar98._0_12_ = auVar87;\n      auVar98._14_2_ = -(ushort)(auVar91._8_8_ < 0);\n      sVar65 = (short)((unkuint10)auVar70._0_10_ >> 0x40);\n      auVar117._12_2_ = (short)((ulong)uVar56 >> 0x30);\n      auVar117._0_12_ = auVar70;\n      auVar117._14_2_ = -(ushort)(cVar68 < '\\0');\n      auVar116._12_4_ = auVar117._12_4_;\n      auVar116._10_2_ = -(ushort)(cVar67 < '\\0');\n      auVar116._0_10_ = auVar70._0_10_;\n      auVar115._10_6_ = auVar116._10_6_;\n      auVar115._8_2_ = (short)((uint6)uVar55 >> 0x20);\n      auVar115._0_8_ = uVar56;\n      auVar114._8_8_ = auVar115._8_8_;\n      auVar114._6_2_ = -(ushort)(cVar66 < '\\0');\n      auVar114._0_6_ = uVar55;\n      auVar113._6_10_ = auVar114._6_10_;\n      auVar113._4_2_ = (short)((uint)uVar53 >> 0x10);\n      auVar113._0_4_ = uVar53;\n      iVar54 = CONCAT22(-(ushort)(sVar65 < 0),sVar65);\n      auVar71._0_8_ = CONCAT26(-(ushort)(auVar70._10_2_ < 0),CONCAT24(auVar70._10_2_,iVar54));\n      auVar71._8_2_ = auVar72._12_2_;\n      auVar71._10_2_ = -(ushort)(auVar72._12_2_ < 0);\n      auVar75._12_2_ = auVar74._14_2_;\n      auVar75._0_12_ = auVar71;\n      auVar75._14_2_ = -(ushort)(auVar74._14_2_ < 0);\n      iVar82 = (((iVar82 - CONCAT22(-(ushort)(cVar51 < '\\0'),auVar90._0_2_)) - iVar86) -\n               CONCAT22(-(ushort)(cVar64 < '\\0'),uVar52)) - iVar54;\n      iVar83 = (((iVar83 - auVar34._0_4_) - (int)((ulong)auVar87._0_8_ >> 0x20)) - auVar113._4_4_) -\n               (int)((ulong)auVar71._0_8_ >> 0x20);\n      iVar84 = (((iVar84 - auVar118._8_4_) - auVar87._8_4_) - auVar115._8_4_) - auVar71._8_4_;\n      iVar85 = (((iVar85 - auVar119._12_4_) - auVar98._12_4_) - auVar116._12_4_) - auVar75._12_4_;\n      cVar51 = auVar60[0];\n      cVar64 = auVar60[8];\n      cVar66 = auVar60[9];\n      cVar67 = auVar60[10];\n      cVar68 = auVar60[11];\n      auVar106._0_14_ = auVar60._0_14_;\n      auVar106[14] = auVar60[7];\n      auVar106[15] = -(auVar60[7] < '\\0');\n      auVar105._14_2_ = auVar106._14_2_;\n      auVar105._0_13_ = auVar60._0_13_;\n      auVar105[13] = -(auVar60[6] < '\\0');\n      auVar104._13_3_ = auVar105._13_3_;\n      auVar104._0_12_ = auVar60._0_12_;\n      auVar104[12] = auVar60[6];\n      auVar103._12_4_ = auVar104._12_4_;\n      auVar103._0_11_ = auVar60._0_11_;\n      auVar103[11] = -(auVar60[5] < '\\0');\n      auVar102._11_5_ = auVar103._11_5_;\n      auVar102._0_10_ = auVar60._0_10_;\n      auVar102[10] = auVar60[5];\n      auVar101._10_6_ = auVar102._10_6_;\n      auVar101._0_9_ = auVar60._0_9_;\n      auVar101[9] = -(auVar60[4] < '\\0');\n      auVar100._9_7_ = auVar101._9_7_;\n      auVar100._0_8_ = auVar60._0_8_;\n      auVar100[8] = auVar60[4];\n      Var33 = CONCAT91(CONCAT81(auVar100._8_8_,-(auVar60[3] < '\\0')),auVar60[3]);\n      auVar36._2_10_ = Var33;\n      auVar36[1] = -(auVar60[2] < '\\0');\n      auVar36[0] = auVar60[2];\n      auVar35._2_12_ = auVar36;\n      auVar35[1] = -(auVar60[1] < '\\0');\n      auVar35[0] = auVar60[1];\n      auVar99._0_2_ = CONCAT11(-(cVar51 < '\\0'),cVar51);\n      auVar99._2_14_ = auVar35;\n      uVar52 = CONCAT11(-(cVar64 < '\\0'),cVar64);\n      uVar53 = CONCAT13(-(cVar66 < '\\0'),CONCAT12(cVar66,uVar52));\n      uVar55 = CONCAT15(-(cVar67 < '\\0'),CONCAT14(cVar67,uVar53));\n      uVar56 = CONCAT17(-(cVar68 < '\\0'),CONCAT16(cVar68,uVar55));\n      auVar57._0_10_ = CONCAT19(-(auVar60[12] < '\\0'),CONCAT18(auVar60[12],uVar56));\n      auVar57[10] = auVar60[13];\n      auVar57[11] = -(auVar60[13] < '\\0');\n      auVar59[12] = auVar60[14];\n      auVar59._0_12_ = auVar57;\n      auVar59[13] = -(auVar60[14] < '\\0');\n      auVar62[14] = auVar60[15];\n      auVar62._0_14_ = auVar59;\n      auVar62[15] = -(auVar60[15] < '\\0');\n      sVar65 = (short)Var33;\n      auVar78._0_12_ = auVar99._0_12_;\n      auVar78._12_2_ = sVar65;\n      auVar78._14_2_ = -(ushort)(sVar65 < 0);\n      auVar77._12_4_ = auVar78._12_4_;\n      auVar77._0_10_ = auVar99._0_10_;\n      auVar77._10_2_ = -(ushort)(auVar36._0_2_ < 0);\n      auVar76._10_6_ = auVar77._10_6_;\n      auVar76._0_8_ = auVar99._0_8_;\n      auVar76._8_2_ = auVar36._0_2_;\n      auVar37._4_8_ = auVar76._8_8_;\n      auVar37._2_2_ = -(ushort)(auVar35._0_2_ < 0);\n      auVar37._0_2_ = auVar35._0_2_;\n      iVar86 = CONCAT22(-(ushort)(auVar100._8_2_ < 0),auVar100._8_2_);\n      auVar88._0_8_ = CONCAT26(-(ushort)(auVar102._10_2_ < 0),CONCAT24(auVar102._10_2_,iVar86));\n      auVar88._8_2_ = auVar104._12_2_;\n      auVar88._10_2_ = -(ushort)(auVar104._12_2_ < 0);\n      auVar107._12_2_ = auVar105._14_2_;\n      auVar107._0_12_ = auVar88;\n      auVar107._14_2_ = -(ushort)(auVar100._8_8_ < 0);\n      sVar65 = (short)((unkuint10)auVar57._0_10_ >> 0x40);\n      auVar112._12_2_ = (short)((ulong)uVar56 >> 0x30);\n      auVar112._0_12_ = auVar57;\n      auVar112._14_2_ = -(ushort)(cVar68 < '\\0');\n      auVar111._12_4_ = auVar112._12_4_;\n      auVar111._10_2_ = -(ushort)(cVar67 < '\\0');\n      auVar111._0_10_ = auVar57._0_10_;\n      auVar110._10_6_ = auVar111._10_6_;\n      auVar110._8_2_ = (short)((uint6)uVar55 >> 0x20);\n      auVar110._0_8_ = uVar56;\n      auVar109._8_8_ = auVar110._8_8_;\n      auVar109._6_2_ = -(ushort)(cVar66 < '\\0');\n      auVar109._0_6_ = uVar55;\n      auVar108._6_10_ = auVar109._6_10_;\n      auVar108._4_2_ = (short)((uint)uVar53 >> 0x10);\n      auVar108._0_4_ = uVar53;\n      iVar54 = CONCAT22(-(ushort)(sVar65 < 0),sVar65);\n      auVar58._0_8_ = CONCAT26(-(ushort)(auVar57._10_2_ < 0),CONCAT24(auVar57._10_2_,iVar54));\n      auVar58._8_2_ = auVar59._12_2_;\n      auVar58._10_2_ = -(ushort)(auVar59._12_2_ < 0);\n      auVar63._12_2_ = auVar62._14_2_;\n      auVar63._0_12_ = auVar58;\n      auVar63._14_2_ = -(ushort)(auVar62._14_2_ < 0);\n      iVar69 = CONCAT22(-(ushort)(cVar51 < '\\0'),auVar99._0_2_) + iVar69 + iVar86 +\n               CONCAT22(-(ushort)(cVar64 < '\\0'),uVar52) + iVar54;\n      iVar79 = auVar37._0_4_ + iVar79 + (int)((ulong)auVar88._0_8_ >> 0x20) + auVar108._4_4_ +\n               (int)((ulong)auVar58._0_8_ >> 0x20);\n      iVar80 = auVar76._8_4_ + iVar80 + auVar88._8_4_ + auVar110._8_4_ + auVar58._8_4_;\n      iVar81 = auVar77._12_4_ + iVar81 + auVar107._12_4_ + auVar111._12_4_ + auVar63._12_4_;\n    } while (pcVar42 != param_1 + (sVar39 >> 4 & 0xfffffff) * 0x10);\n    uVar43 = uVar38 & 0xfffffff0;\n    iVar79 = iVar80 + iVar69 + iVar81 + iVar79;\n    iVar69 = iVar82 + iVar84 + iVar83 + iVar85;\n    if ((sVar39 & 0xf) != 0) {\n      if ((byte)(param_1[(int)uVar43] - 0x30U) < 10) goto LAB_00101a00;\n      iVar69 = iVar69 + (uint)(param_1[(int)uVar43] == '.');\nLAB_00101a03:\n      iVar80 = uVar43 + 1;\n      if (iVar80 < (int)uVar38) goto LAB_00101a0e;\n    }\n  }\n  if ((iVar79 < 4) && (iVar69 == 1)) {\n    return &DAT_00102007;\n  }\nLAB_00101c88:\n  return &DAT_00102004;\n}"
    },
    {
        "task_id": 142,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_10;\n  uint local_c;\n  \n  local_10 = 0;\n  for (local_c = 0; (int)local_c < param_2; local_c = local_c + 1) {\n    if ((int)local_c % 3 == 0) {\n      local_10 = local_10 +\n                 *(int *)(param_1 + (long)(int)local_c * 4) *\n                 *(int *)(param_1 + (long)(int)local_c * 4);\n    }\n    else if ((local_c & 3) == 0) {\n      local_10 = local_10 +\n                 *(int *)(param_1 + (long)(int)local_c * 4) *\n                 *(int *)(param_1 + (long)(int)local_c * 4) *\n                 *(int *)(param_1 + (long)(int)local_c * 4);\n    }\n    else {\n      local_10 = local_10 + *(int *)(param_1 + (long)(int)local_c * 4);\n    }\n  }\n  return local_10;\n}"
    },
    {
        "task_id": 142,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  ulong uVar3;\n  bool bVar4;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    iVar2 = 0;\n    uVar3 = 0;\n    do {\n      if (((int)uVar3 / 3) * 3 == (int)uVar3) {\n        iVar1 = *(int *)(param_1 + uVar3 * 4);\n        iVar2 = iVar2 + iVar1 * iVar1;\n      }\n      else if ((uVar3 & 3) == 0) {\n        iVar1 = *(int *)(param_1 + uVar3 * 4);\n        iVar2 = iVar2 + iVar1 * iVar1 * iVar1;\n      }\n      else {\n        iVar2 = iVar2 + *(int *)(param_1 + uVar3 * 4);\n      }\n      bVar4 = uVar3 != param_2 - 1;\n      uVar3 = uVar3 + 1;\n    } while (bVar4);\n  }\n  return iVar2;\n}"
    },
    {
        "task_id": 142,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (0 < param_2) {\n    uVar2 = 0;\n    iVar3 = 0;\n    while( true ) {\n      iVar1 = *(int *)(param_1 + uVar2 * 4);\n      if ((uint)((int)uVar2 * -0x55555555) < 0x55555556) {\n        iVar1 = iVar1 * iVar1;\n      }\n      else if ((uVar2 & 3) == 0) {\n        iVar1 = iVar1 * iVar1 * iVar1;\n      }\n      iVar3 = iVar3 + iVar1;\n      if (uVar2 == param_2 - 1) break;\n      uVar2 = uVar2 + 1;\n    }\n    return iVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 142,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (0 < param_2) {\n    uVar2 = 0;\n    iVar3 = 0;\n    while( true ) {\n      iVar1 = *(int *)(param_1 + uVar2 * 4);\n      if ((uint)((int)uVar2 * -0x55555555) < 0x55555556) {\n        iVar1 = iVar1 * iVar1;\n      }\n      else if ((uVar2 & 3) == 0) {\n        iVar1 = iVar1 * iVar1 * iVar1;\n      }\n      iVar3 = iVar3 + iVar1;\n      if (uVar2 == param_2 - 1) break;\n      uVar2 = uVar2 + 1;\n    }\n    return iVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 143,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2)\n\n{\n  bool bVar1;\n  int local_1c;\n  int local_18;\n  int local_14;\n  int local_10;\n  \n  local_1c = 0;\n  local_18 = 0;\n  for (local_14 = 0; *(char *)(param_1 + local_14) != '\\0'; local_14 = local_14 + 1) {\n    if (*(char *)(param_1 + local_14) == ' ') {\n      if (local_1c < 2) {\n        bVar1 = false;\n      }\n      else {\n        bVar1 = true;\n        for (local_10 = 2; local_10 * local_10 <= local_1c; local_10 = local_10 + 1) {\n          if (local_1c % local_10 == 0) {\n            bVar1 = false;\n            break;\n          }\n        }\n      }\n      if (bVar1) {\n        if (0 < local_18) {\n          *(undefined *)(param_2 + local_18) = 0x20;\n          local_18 = local_18 + 1;\n        }\n        memcpy((void *)(local_18 + param_2),(void *)(((long)local_14 - (long)local_1c) + param_1),\n               (long)local_1c);\n        local_18 = local_18 + local_1c;\n      }\n      local_1c = 0;\n    }\n    else {\n      local_1c = local_1c + 1;\n    }\n  }\n  if (local_1c < 2) {\n    bVar1 = false;\n  }\n  else {\n    bVar1 = true;\n    for (local_10 = 2; local_10 * local_10 <= local_1c; local_10 = local_10 + 1) {\n      if (local_1c % local_10 == 0) {\n        bVar1 = false;\n        break;\n      }\n    }\n  }\n  if (bVar1) {\n    if (0 < local_18) {\n      *(undefined *)(param_2 + local_18) = 0x20;\n      local_18 = local_18 + 1;\n    }\n    memcpy((void *)(local_18 + param_2),(void *)(((long)local_14 - (long)local_1c) + param_1),\n           (long)local_1c);\n    local_18 = local_18 + local_1c;\n  }\n  *(undefined *)(param_2 + local_18) = 0;\n  return;\n}"
    },
    {
        "task_id": 143,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1,long param_2)\n\n{\n  void *pvVar1;\n  int iVar2;\n  uint uVar3;\n  long lVar4;\n  int iVar5;\n  \n  pvVar1 = (void *)(ulong)*param_1;\n  if (*param_1 == 0) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    uVar3 = 0;\n    lVar4 = 0;\n    do {\n      if ((char)pvVar1 == ' ') {\n        if ((int)uVar3 < 2) {\n          uVar3 = 0;\n        }\n        else if ((int)uVar3 < 4) {\nLAB_0010127c:\n          if (0 < iVar5) {\n            *(undefined *)(param_2 + iVar5) = 0x20;\n            iVar5 = iVar5 + 1;\n          }\n          memcpy((void *)(iVar5 + param_2),param_1 + (lVar4 - (int)uVar3),(long)(int)uVar3);\n          iVar5 = iVar5 + uVar3;\n          uVar3 = 0;\n        }\n        else if ((uVar3 & 1) == 0) {\n          uVar3 = 0;\n        }\n        else {\n          iVar2 = 2;\n          do {\n            iVar2 = iVar2 + 1;\n            if ((int)uVar3 < iVar2 * iVar2) goto LAB_0010127c;\n          } while ((int)uVar3 % iVar2 != 0);\n          uVar3 = 0;\n        }\n      }\n      else {\n        uVar3 = uVar3 + 1;\n      }\n      lVar4 = lVar4 + 1;\n      pvVar1 = (void *)(ulong)param_1[lVar4];\n    } while (param_1[lVar4] != 0);\n    if (1 < (int)uVar3) {\n      if ((int)uVar3 < 4) {\nLAB_00101242:\n        if (0 < iVar5) {\n          *(undefined *)(param_2 + iVar5) = 0x20;\n          iVar5 = iVar5 + 1;\n        }\n        pvVar1 = memcpy((void *)(iVar5 + param_2),param_1 + (lVar4 - (int)uVar3),(long)(int)uVar3);\n        iVar5 = iVar5 + uVar3;\n      }\n      else if ((uVar3 & 1) != 0) {\n        iVar2 = 2;\n        do {\n          iVar2 = iVar2 + 1;\n          if ((int)uVar3 < iVar2 * iVar2) goto LAB_00101242;\n          pvVar1 = (void *)((long)(int)uVar3 / (long)iVar2 & 0xffffffff);\n        } while ((int)uVar3 % iVar2 != 0);\n      }\n    }\n  }\n  *(undefined *)(param_2 + iVar5) = 0;\n  return pvVar1;\n}"
    },
    {
        "task_id": 143,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1,undefined *param_2)\n\n{\n  long lVar1;\n  void *pvVar2;\n  uint uVar3;\n  uint uVar4;\n  long lVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  \n  pvVar2 = (void *)(ulong)*param_1;\n  if (*param_1 != 0) {\n    uVar8 = 0;\n    uVar3 = 0;\n    lVar1 = 0;\n    do {\n      while (lVar5 = lVar1, (char)pvVar2 == ' ') {\n        if (1 < (int)uVar3) {\n          if ((int)uVar3 < 4) {\nLAB_001014c9:\n            puVar7 = param_2;\n            uVar4 = uVar3;\n            if (uVar8 != 0) {\n              param_2[(int)uVar8] = 0x20;\n              puVar7 = param_2 + (int)(uVar8 + 1);\n              uVar4 = uVar8 + 1 + uVar3;\n            }\n            uVar8 = uVar4;\n            memcpy(puVar7,param_1 + (lVar5 - (int)uVar3),(long)(int)uVar3);\n            uVar3 = 0;\n            goto LAB_001013f3;\n          }\n          if ((uVar3 & 1) != 0) {\n            iVar6 = 2;\n            do {\n              iVar6 = iVar6 + 1;\n              if ((int)uVar3 < iVar6 * iVar6) goto LAB_001014c9;\n            } while ((int)uVar3 % iVar6 != 0);\n          }\n        }\n        uVar3 = 0;\n        pvVar2 = (void *)(ulong)param_1[lVar5 + 1];\n        lVar1 = lVar5 + 1;\n        if (param_1[lVar5 + 1] == 0) goto LAB_0010141c;\n      }\n      uVar3 = uVar3 + 1;\nLAB_001013f3:\n      pvVar2 = (void *)(ulong)param_1[lVar5 + 1];\n      lVar1 = lVar5 + 1;\n    } while (param_1[lVar5 + 1] != 0);\nLAB_0010141c:\n    if (1 < (int)uVar3) {\n      if ((int)uVar3 < 4) {\nLAB_0010144d:\n        puVar7 = param_2;\n        uVar4 = uVar3;\n        if (uVar8 != 0) {\n          param_2[(int)uVar8] = 0x20;\n          puVar7 = param_2 + (int)(uVar8 + 1);\n          uVar4 = uVar3 + uVar8 + 1;\n        }\n        uVar8 = uVar4;\n        pvVar2 = memcpy(puVar7,param_1 + ((lVar5 + 1) - (long)(int)uVar3),(long)(int)uVar3);\n      }\n      else {\n        iVar6 = 2;\n        uVar4 = uVar3 & 1;\n        while (uVar4 != 0) {\n          iVar6 = iVar6 + 1;\n          if ((int)uVar3 < iVar6 * iVar6) goto LAB_0010144d;\n          pvVar2 = (void *)((long)(int)uVar3 / (long)iVar6 & 0xffffffff);\n          uVar4 = (int)uVar3 % iVar6;\n        }\n      }\n    }\n    param_2 = param_2 + (int)uVar8;\n  }\n  *param_2 = 0;\n  return pvVar2;\n}"
    },
    {
        "task_id": 143,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(byte *param_1,undefined *param_2)\n\n{\n  long lVar1;\n  void *pvVar2;\n  uint uVar3;\n  uint uVar4;\n  long lVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  \n  pvVar2 = (void *)(ulong)*param_1;\n  if (*param_1 != 0) {\n    uVar8 = 0;\n    uVar3 = 0;\n    lVar1 = 0;\n    do {\n      while (lVar5 = lVar1, (char)pvVar2 == ' ') {\n        if (1 < (int)uVar3) {\n          if ((int)uVar3 < 4) {\nLAB_001014c9:\n            puVar7 = param_2;\n            uVar4 = uVar3;\n            if (uVar8 != 0) {\n              param_2[(int)uVar8] = 0x20;\n              puVar7 = param_2 + (int)(uVar8 + 1);\n              uVar4 = uVar8 + 1 + uVar3;\n            }\n            uVar8 = uVar4;\n            memcpy(puVar7,param_1 + (lVar5 - (int)uVar3),(long)(int)uVar3);\n            uVar3 = 0;\n            goto LAB_001013f3;\n          }\n          if ((uVar3 & 1) != 0) {\n            iVar6 = 2;\n            do {\n              iVar6 = iVar6 + 1;\n              if ((int)uVar3 < iVar6 * iVar6) goto LAB_001014c9;\n            } while ((int)uVar3 % iVar6 != 0);\n          }\n        }\n        uVar3 = 0;\n        pvVar2 = (void *)(ulong)param_1[lVar5 + 1];\n        lVar1 = lVar5 + 1;\n        if (param_1[lVar5 + 1] == 0) goto LAB_0010141c;\n      }\n      uVar3 = uVar3 + 1;\nLAB_001013f3:\n      pvVar2 = (void *)(ulong)param_1[lVar5 + 1];\n      lVar1 = lVar5 + 1;\n    } while (param_1[lVar5 + 1] != 0);\nLAB_0010141c:\n    if (1 < (int)uVar3) {\n      if ((int)uVar3 < 4) {\nLAB_0010144d:\n        puVar7 = param_2;\n        uVar4 = uVar3;\n        if (uVar8 != 0) {\n          param_2[(int)uVar8] = 0x20;\n          puVar7 = param_2 + (int)(uVar8 + 1);\n          uVar4 = uVar3 + uVar8 + 1;\n        }\n        uVar8 = uVar4;\n        pvVar2 = memcpy(puVar7,param_1 + ((lVar5 + 1) - (long)(int)uVar3),(long)(int)uVar3);\n      }\n      else {\n        iVar6 = 2;\n        uVar4 = uVar3 & 1;\n        while (uVar4 != 0) {\n          iVar6 = iVar6 + 1;\n          if ((int)uVar3 < iVar6 * iVar6) goto LAB_0010144d;\n          pvVar2 = (void *)((long)(int)uVar3 / (long)iVar6 & 0xffffffff);\n          uVar4 = (int)uVar3 % iVar6;\n        }\n      }\n    }\n    param_2 = param_2 + (int)uVar8;\n  }\n  *param_2 = 0;\n  return pvVar2;\n}"
    },
    {
        "task_id": 144,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(long param_1,long param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  long in_FS_OFFSET;\n  int local_100;\n  int local_fc;\n  char local_e8 [112];\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  for (local_100 = 0; *(char *)(param_1 + local_100) != '/'; local_100 = local_100 + 1) {\n    local_e8[local_100] = *(char *)(param_1 + local_100);\n  }\n  local_e8[local_100] = '\\0';\n  iVar1 = atoi(local_e8);\n  local_fc = 0;\n  while (local_100 = local_100 + 1, *(char *)(param_1 + local_100) != '\\0') {\n    local_78[local_fc] = *(char *)(param_1 + local_100);\n    local_fc = local_fc + 1;\n  }\n  local_78[local_fc] = '\\0';\n  iVar2 = atoi(local_78);\n  for (local_100 = 0; *(char *)(param_2 + local_100) != '/'; local_100 = local_100 + 1) {\n    local_e8[local_100] = *(char *)(param_2 + local_100);\n  }\n  local_e8[local_100] = '\\0';\n  iVar3 = atoi(local_e8);\n  local_fc = 0;\n  while (local_100 = local_100 + 1, *(char *)(param_2 + local_100) != '\\0') {\n    local_78[local_fc] = *(char *)(param_2 + local_100);\n    local_fc = local_fc + 1;\n  }\n  local_78[local_fc] = '\\0';\n  iVar4 = atoi(local_78);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return (iVar1 * iVar3) % (iVar2 * iVar4) == 0;\n}"
    },
    {
        "task_id": 144,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1,char *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  long lVar4;\n  char cVar5;\n  int iVar6;\n  int iVar7;\n  long in_FS_OFFSET;\n  undefined8 uStack_110;\n  char local_108 [111];\n  char local_99 [105];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  cVar5 = *param_1;\n  if (cVar5 == '/') {\n    iVar7 = 0;\n  }\n  else {\n    lVar1 = 1;\n    do {\n      local_108[lVar1 + -1] = cVar5;\n      iVar7 = (int)lVar1;\n      cVar5 = param_1[lVar1];\n      lVar1 = lVar1 + 1;\n    } while (cVar5 != '/');\n  }\n  local_108[iVar7] = '\\0';\n  uStack_110 = (code *)0x1011f8;\n  lVar1 = strtol(local_108,(char **)0x0,10);\n  cVar5 = param_1[iVar7 + 1];\n  if (cVar5 == '\\0') {\n    iVar6 = 0;\n  }\n  else {\n    lVar3 = 1;\n    do {\n      local_99[lVar3] = cVar5;\n      iVar6 = (int)lVar3;\n      lVar3 = lVar3 + 1;\n      cVar5 = param_1[lVar3 + iVar7];\n    } while (cVar5 != '\\0');\n  }\n  local_99[(long)iVar6 + 1] = '\\0';\n  uStack_110 = (code *)0x10124c;\n  lVar3 = strtol(local_99 + 1,(char **)0x0,10);\n  cVar5 = *param_2;\n  if (cVar5 == '/') {\n    iVar7 = 0;\n  }\n  else {\n    lVar2 = 1;\n    do {\n      local_108[lVar2 + -1] = cVar5;\n      iVar7 = (int)lVar2;\n      cVar5 = param_2[lVar2];\n      lVar2 = lVar2 + 1;\n    } while (cVar5 != '/');\n  }\n  local_108[iVar7] = '\\0';\n  uStack_110 = (code *)0x10128f;\n  lVar2 = strtol(local_108,(char **)0x0,10);\n  cVar5 = param_2[iVar7 + 1];\n  if (cVar5 == '\\0') {\n    iVar6 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      local_99[lVar4] = cVar5;\n      iVar6 = (int)lVar4;\n      lVar4 = lVar4 + 1;\n      cVar5 = param_2[lVar4 + iVar7];\n    } while (cVar5 != '\\0');\n  }\n  local_99[(long)iVar6 + 1] = '\\0';\n  uStack_110 = (code *)0x1012e0;\n  lVar4 = strtol(local_99 + 1,(char **)0x0,10);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ((int)lVar2 * (int)lVar1) % ((int)lVar3 * (int)lVar4) == 0;\n  }\n                    /* WARNING: Subroutine does not return */\n  uStack_110 = main;\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 144,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1,char *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  char cVar3;\n  long lVar4;\n  int iVar5;\n  long lVar6;\n  long in_FS_OFFSET;\n  undefined8 local_120;\n  char local_118 [111];\n  char local_a9 [105];\n  long local_40;\n  \n  cVar3 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      local_118[lVar4 + -1] = cVar3;\n      iVar5 = (int)lVar4;\n      lVar1 = (long)iVar5;\n      cVar3 = param_1[lVar4];\n      lVar4 = lVar4 + 1;\n    } while (cVar3 != '/');\n    iVar5 = iVar5 + 1;\n    lVar4 = (long)iVar5;\n  }\n  local_118[lVar1] = '\\0';\n  local_120 = strtol(local_118,(char **)0x0,10);\n  cVar3 = param_1[lVar4];\n  if (cVar3 == '\\0') {\n    lVar1 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      local_a9[lVar4] = cVar3;\n      lVar1 = (long)(int)lVar4;\n      lVar4 = lVar4 + 1;\n      cVar3 = param_1[lVar4 + (long)iVar5 + -1];\n    } while (cVar3 != '\\0');\n  }\n  local_a9[lVar1 + 1] = '\\0';\n  lVar1 = strtol(local_a9 + 1,(char **)0x0,10);\n  cVar3 = *param_2;\n  if (cVar3 == '/') {\n    lVar6 = 1;\n    iVar5 = 1;\n    lVar4 = 0;\n  }\n  else {\n    lVar6 = 1;\n    do {\n      local_118[lVar6 + -1] = cVar3;\n      iVar5 = (int)lVar6;\n      lVar4 = (long)iVar5;\n      cVar3 = param_2[lVar6];\n      lVar6 = lVar6 + 1;\n    } while (cVar3 != '/');\n    iVar5 = iVar5 + 1;\n    lVar6 = (long)iVar5;\n  }\n  local_118[lVar4] = '\\0';\n  lVar4 = strtol(local_118,(char **)0x0,10);\n  cVar3 = param_2[lVar6];\n  if (cVar3 == '\\0') {\n    lVar6 = 0;\n  }\n  else {\n    lVar2 = 1;\n    do {\n      local_a9[lVar2] = cVar3;\n      lVar6 = (long)(int)lVar2;\n      lVar2 = lVar2 + 1;\n      cVar3 = param_2[lVar2 + (long)iVar5 + -1];\n    } while (cVar3 != '\\0');\n  }\n  local_a9[lVar6 + 1] = '\\0';\n  lVar6 = strtol(local_a9 + 1,(char **)0x0,10);\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ((int)local_120 * (int)lVar4) % ((int)lVar1 * (int)lVar6) == 0;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 144,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(char *param_1,char *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  char cVar3;\n  long lVar4;\n  int iVar5;\n  long lVar6;\n  long in_FS_OFFSET;\n  undefined8 local_120;\n  char local_118 [111];\n  char local_a9 [105];\n  long local_40;\n  \n  cVar3 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      local_118[lVar4 + -1] = cVar3;\n      iVar5 = (int)lVar4;\n      lVar1 = (long)iVar5;\n      cVar3 = param_1[lVar4];\n      lVar4 = lVar4 + 1;\n    } while (cVar3 != '/');\n    iVar5 = iVar5 + 1;\n    lVar4 = (long)iVar5;\n  }\n  local_118[lVar1] = '\\0';\n  local_120 = strtol(local_118,(char **)0x0,10);\n  cVar3 = param_1[lVar4];\n  if (cVar3 == '\\0') {\n    lVar1 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      local_a9[lVar4] = cVar3;\n      lVar1 = (long)(int)lVar4;\n      lVar4 = lVar4 + 1;\n      cVar3 = param_1[lVar4 + (long)iVar5 + -1];\n    } while (cVar3 != '\\0');\n  }\n  local_a9[lVar1 + 1] = '\\0';\n  lVar1 = strtol(local_a9 + 1,(char **)0x0,10);\n  cVar3 = *param_2;\n  if (cVar3 == '/') {\n    lVar6 = 1;\n    iVar5 = 1;\n    lVar4 = 0;\n  }\n  else {\n    lVar6 = 1;\n    do {\n      local_118[lVar6 + -1] = cVar3;\n      iVar5 = (int)lVar6;\n      lVar4 = (long)iVar5;\n      cVar3 = param_2[lVar6];\n      lVar6 = lVar6 + 1;\n    } while (cVar3 != '/');\n    iVar5 = iVar5 + 1;\n    lVar6 = (long)iVar5;\n  }\n  local_118[lVar4] = '\\0';\n  lVar4 = strtol(local_118,(char **)0x0,10);\n  cVar3 = param_2[lVar6];\n  if (cVar3 == '\\0') {\n    lVar6 = 0;\n  }\n  else {\n    lVar2 = 1;\n    do {\n      local_a9[lVar2] = cVar3;\n      lVar6 = (long)(int)lVar2;\n      lVar2 = lVar2 + 1;\n      cVar3 = param_2[lVar2 + (long)iVar5 + -1];\n    } while (cVar3 != '\\0');\n  }\n  local_a9[lVar6 + 1] = '\\0';\n  lVar6 = strtol(local_a9 + 1,(char **)0x0,10);\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return ((int)local_120 * (int)lVar4) % ((int)lVar1 * (int)lVar6) == 0;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 145,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long param_1,int param_2)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  void *__ptr;\n  size_t sVar4;\n  uint uVar5;\n  long in_FS_OFFSET;\n  int local_44;\n  int local_40;\n  int local_3c;\n  int local_38;\n  int local_34;\n  char local_1c [12];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  __ptr = malloc((long)param_2 << 2);\n  for (local_44 = 0; local_44 < param_2; local_44 = local_44 + 1) {\n    uVar1 = *(uint *)(param_1 + (long)local_44 * 4);\n    uVar5 = (int)uVar1 >> 0x1f;\n    sprintf(local_1c,\"%d\",(ulong)((uVar1 ^ uVar5) - uVar5));\n    local_40 = 0;\n    sVar4 = strlen(local_1c);\n    for (local_3c = 1; local_3c < (int)sVar4; local_3c = local_3c + 1) {\n      local_40 = local_40 + local_1c[local_3c] + -0x30;\n    }\n    if (*(int *)(param_1 + (long)local_44 * 4) < 1) {\n      iVar3 = -(local_1c[0] + -0x30);\n    }\n    else {\n      iVar3 = local_1c[0] + -0x30;\n    }\n    local_40 = local_40 + iVar3;\n    *(int *)((long)local_44 * 4 + (long)__ptr) = local_40;\n  }\n  for (local_38 = 0; local_38 < param_2; local_38 = local_38 + 1) {\n    for (local_34 = 1; local_34 < param_2; local_34 = local_34 + 1) {\n      if (*(int *)((long)__ptr + (long)local_34 * 4) <\n          *(int *)((long)__ptr + (long)local_34 * 4 + -4)) {\n        uVar2 = *(undefined4 *)((long)__ptr + (long)local_34 * 4);\n        *(undefined4 *)((long)__ptr + (long)local_34 * 4) =\n             *(undefined4 *)((long)__ptr + (long)local_34 * 4 + -4);\n        *(undefined4 *)((long)local_34 * 4 + -4 + (long)__ptr) = uVar2;\n        uVar2 = *(undefined4 *)(param_1 + (long)local_34 * 4);\n        *(undefined4 *)(param_1 + (long)local_34 * 4) =\n             *(undefined4 *)(param_1 + (long)local_34 * 4 + -4);\n        *(undefined4 *)((long)local_34 * 4 + -4 + param_1) = uVar2;\n      }\n    }\n  }\n  free(__ptr);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 145,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(uint *param_1,int param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  int *__ptr;\n  char *pcVar4;\n  ulong uVar5;\n  long lVar6;\n  int iVar7;\n  uint *puVar8;\n  int *piVar9;\n  long in_FS_OFFSET;\n  bool bVar10;\n  byte bVar11;\n  char local_4c;\n  char local_4b [11];\n  long local_40;\n  \n  bVar11 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  __ptr = (int *)malloc((long)param_2 << 2);\n  if (0 < param_2) {\n    puVar8 = param_1;\n    piVar9 = __ptr;\n    do {\n      __sprintf_chk(&local_4c,1,0xc,&DAT_00102004,\n                    ((int)*puVar8 >> 0x1f ^ *puVar8) - ((int)*puVar8 >> 0x1f));\n      lVar6 = -1;\n      pcVar4 = &local_4c;\n      do {\n        if (lVar6 == 0) break;\n        lVar6 = lVar6 + -1;\n        cVar1 = *pcVar4;\n        pcVar4 = pcVar4 + (ulong)bVar11 * -2 + 1;\n      } while (cVar1 != '\\0');\n      if ((int)(~(uint)lVar6 - 1) < 2) {\n        iVar7 = 0;\n      }\n      else {\n        pcVar4 = local_4b;\n        iVar7 = 0;\n        do {\n          iVar7 = iVar7 + -0x30 + (int)*pcVar4;\n          pcVar4 = pcVar4 + 1;\n        } while (pcVar4 != local_4b + (ulong)(~(uint)lVar6 - 3) + 1);\n      }\n      if ((int)*puVar8 < 1) {\n        iVar7 = iVar7 - (local_4c + -0x30);\n      }\n      else {\n        iVar7 = iVar7 + -0x30 + (int)local_4c;\n      }\n      *piVar9 = iVar7;\n      puVar8 = puVar8 + 1;\n      piVar9 = piVar9 + 1;\n    } while (puVar8 != param_1 + (ulong)(param_2 - 1) + 1);\n    iVar7 = 0;\n    do {\n      uVar5 = 0;\n      if (1 < param_2) {\n        do {\n          iVar2 = __ptr[uVar5 + 1];\n          if (iVar2 < __ptr[uVar5]) {\n            __ptr[uVar5 + 1] = __ptr[uVar5];\n            __ptr[uVar5] = iVar2;\n            uVar3 = param_1[uVar5 + 1];\n            param_1[uVar5 + 1] = param_1[uVar5];\n            param_1[uVar5] = uVar3;\n          }\n          bVar10 = param_2 - 2 != uVar5;\n          uVar5 = uVar5 + 1;\n        } while (bVar10);\n      }\n      iVar7 = iVar7 + 1;\n    } while (param_2 != iVar7);\n  }\n  free(__ptr);\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 145,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(uint *param_1,int param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  int *__ptr;\n  char *pcVar5;\n  uint *puVar6;\n  uint *puVar7;\n  ulong uVar8;\n  int iVar9;\n  int *piVar10;\n  uint *puVar11;\n  long in_FS_OFFSET;\n  bool bVar12;\n  char local_4c;\n  char acStack_4b [11];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  __ptr = (int *)malloc((long)param_2 << 2);\n  if (0 < param_2) {\n    piVar10 = __ptr;\n    puVar11 = param_1;\n    do {\n      __sprintf_chk(&local_4c,1,0xc,&DAT_00102004,\n                    (*puVar11 ^ (int)*puVar11 >> 0x1f) - ((int)*puVar11 >> 0x1f));\n      puVar7 = (uint *)&local_4c;\n      do {\n        puVar6 = puVar7;\n        uVar3 = *puVar6 + 0xfefefeff & ~*puVar6;\n        uVar4 = uVar3 & 0x80808080;\n        puVar7 = puVar6 + 1;\n      } while (uVar4 == 0);\n      bVar12 = (uVar3 & 0x8080) == 0;\n      if (bVar12) {\n        uVar4 = uVar4 >> 0x10;\n      }\n      if (bVar12) {\n        puVar7 = (uint *)((long)puVar6 + 6);\n      }\n      uVar8 = (long)puVar7 + ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)&local_4c);\n      if (uVar8 < 2) {\n        iVar9 = 0;\n      }\n      else {\n        pcVar5 = &local_4c + 1;\n        iVar9 = 0;\n        do {\n          cVar1 = *pcVar5;\n          pcVar5 = pcVar5 + 1;\n          iVar9 = iVar9 + -0x30 + (int)cVar1;\n        } while (&local_4c + (ulong)((int)uVar8 - 2) + 2 != pcVar5);\n      }\n      iVar2 = -(local_4c + -0x30);\n      if (0 < (int)*puVar11) {\n        iVar2 = local_4c + -0x30;\n      }\n      puVar11 = puVar11 + 1;\n      *piVar10 = iVar9 + iVar2;\n      piVar10 = piVar10 + 1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1 != puVar11);\n    iVar9 = 0;\n    do {\n      uVar8 = 0;\n      if (param_2 != 1) {\n        do {\n          iVar2 = __ptr[uVar8 + 1];\n          if (iVar2 < __ptr[uVar8]) {\n            __ptr[uVar8 + 1] = __ptr[uVar8];\n            uVar4 = param_1[uVar8];\n            __ptr[uVar8] = iVar2;\n            uVar3 = param_1[uVar8 + 1];\n            param_1[uVar8 + 1] = uVar4;\n            param_1[uVar8] = uVar3;\n          }\n          bVar12 = param_2 - 2 != uVar8;\n          uVar8 = uVar8 + 1;\n        } while (bVar12);\n      }\n      iVar9 = iVar9 + 1;\n    } while (param_2 != iVar9);\n  }\n  free(__ptr);\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 145,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "uint * func0(uint *param_1,int param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  int *__ptr;\n  uint *puVar4;\n  uint *puVar5;\n  ulong uVar6;\n  int *piVar7;\n  int iVar8;\n  uint *puVar9;\n  long in_FS_OFFSET;\n  bool bVar10;\n  char local_4c;\n  char cStack_4b;\n  char cStack_4a;\n  char cStack_49;\n  char local_48;\n  char local_47;\n  char local_46;\n  char local_45;\n  char local_44;\n  char local_43;\n  char local_42;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  __ptr = (int *)malloc((long)param_2 << 2);\n  if (0 < param_2) {\n    piVar7 = __ptr;\n    puVar9 = param_1;\n    do {\n      __sprintf_chk(&local_4c,1,0xc,&DAT_00102004,\n                    (*puVar9 ^ (int)*puVar9 >> 0x1f) - ((int)*puVar9 >> 0x1f));\n      puVar5 = (uint *)&local_4c;\n      do {\n        puVar4 = puVar5;\n        uVar1 = *puVar4 + 0xfefefeff & ~*puVar4;\n        uVar2 = uVar1 & 0x80808080;\n        puVar5 = puVar4 + 1;\n      } while (uVar2 == 0);\n      bVar10 = (uVar1 & 0x8080) == 0;\n      if (bVar10) {\n        uVar2 = uVar2 >> 0x10;\n      }\n      if (bVar10) {\n        puVar5 = (uint *)((long)puVar4 + 6);\n      }\n      uVar6 = (long)puVar5 + ((-3 - (ulong)CARRY1((byte)uVar2,(byte)uVar2)) - (long)&local_4c);\n      iVar8 = (int)uVar6;\n      if (uVar6 < 2) {\n        iVar3 = 0;\n      }\n      else {\n        iVar3 = cStack_4b + -0x30;\n        if ((((((iVar8 != 2) && (iVar3 = cStack_4b + -0x60 + (int)cStack_4a, iVar8 != 3)) &&\n              (iVar3 = iVar3 + -0x30 + (int)cStack_49, iVar8 != 4)) &&\n             ((iVar3 = iVar3 + -0x30 + (int)local_48, iVar8 != 5 &&\n              (iVar3 = iVar3 + -0x30 + (int)local_47, iVar8 != 6)))) &&\n            ((iVar3 = iVar3 + -0x30 + (int)local_46, iVar8 != 7 &&\n             ((iVar3 = iVar3 + -0x30 + (int)local_45, iVar8 != 8 &&\n              (iVar3 = iVar3 + -0x30 + (int)local_44, iVar8 != 9)))))) &&\n           (iVar3 = iVar3 + -0x30 + (int)local_43, iVar8 == 0xb)) {\n          iVar3 = iVar3 + -0x30 + (int)local_42;\n        }\n      }\n      iVar8 = -(local_4c + -0x30);\n      if (0 < (int)*puVar9) {\n        iVar8 = local_4c + -0x30;\n      }\n      puVar9 = puVar9 + 1;\n      *piVar7 = iVar3 + iVar8;\n      piVar7 = piVar7 + 1;\n    } while (puVar9 != param_1 + (ulong)(param_2 - 1) + 1);\n    iVar8 = 0;\n    if (param_2 != 1) {\n      do {\n        uVar6 = 0;\n        do {\n          iVar3 = __ptr[uVar6 + 1];\n          if (iVar3 < __ptr[uVar6]) {\n            __ptr[uVar6 + 1] = __ptr[uVar6];\n            uVar2 = param_1[uVar6];\n            __ptr[uVar6] = iVar3;\n            uVar1 = param_1[uVar6 + 1];\n            param_1[uVar6 + 1] = uVar2;\n            param_1[uVar6] = uVar1;\n          }\n          bVar10 = param_2 - 2 != uVar6;\n          uVar6 = uVar6 + 1;\n        } while (bVar10);\n        iVar8 = iVar8 + 1;\n      } while (param_2 != iVar8);\n    }\n  }\n  free(__ptr);\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 146,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(long param_1,int param_2)\n\n{\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  local_1c = 0;\n  for (local_18 = 0; local_18 < param_2; local_18 = local_18 + 1) {\n    if (10 < *(int *)(param_1 + (long)local_18 * 4)) {\n      for (local_14 = *(int *)(param_1 + (long)local_18 * 4); 9 < local_14; local_14 = local_14 / 10\n          ) {\n      }\n      if ((local_14 % 2 == 1) && ((*(int *)(param_1 + (long)local_18 * 4) % 10) % 2 == 1)) {\n        local_1c = local_1c + 1;\n      }\n    }\n  }\n  return local_1c;\n}"
    },
    {
        "task_id": 146,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(int *param_1,int param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  bool bVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    piVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    iVar6 = 0;\n    do {\n      iVar2 = *param_1;\n      iVar5 = iVar2;\n      if (10 < iVar2) {\n        do {\n          iVar4 = iVar5 / 10;\n          bVar3 = 99 < iVar5;\n          iVar5 = iVar4;\n        } while (bVar3);\n        if (iVar4 % 2 == 1) {\n          iVar6 = iVar6 + (uint)((iVar2 % 10) % 2 == 1);\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != piVar1);\n  }\n  return iVar6;\n}"
    },
    {
        "task_id": 146,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  ulong uVar3;\n  ulong uVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (0 < param_2) {\n    iVar6 = 0;\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      uVar2 = *param_1;\n      if (10 < (int)uVar2) {\n        uVar3 = (ulong)uVar2;\n        do {\n          uVar4 = uVar3 / 10;\n          iVar5 = (int)uVar3;\n          uVar3 = uVar4;\n        } while (99 < iVar5);\n        if ((uVar4 & 1) != 0) {\n          iVar6 = (iVar6 + 1) - (uint)((uVar2 & 1) == 0);\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n    return iVar6;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 146,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}",
        "input_asm_prompt": "int func0(uint *param_1,int param_2)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  ulong uVar3;\n  ulong uVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (0 < param_2) {\n    iVar6 = 0;\n    puVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      uVar2 = *param_1;\n      if (10 < (int)uVar2) {\n        uVar3 = (ulong)uVar2;\n        do {\n          uVar4 = uVar3 / 10;\n          iVar5 = (int)uVar3;\n          uVar3 = uVar4;\n        } while (99 < iVar5);\n        if ((uVar4 & 1) != 0) {\n          iVar6 = (iVar6 + 1) - (uint)((uVar2 & 1) == 0);\n        }\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != puVar1);\n    return iVar6;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 147,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  undefined4 uVar1;\n  long lVar2;\n  long lVar3;\n  int iVar4;\n  void *__ptr;\n  long *__ptr_00;\n  long *__ptr_01;\n  void *pvVar5;\n  int local_5c;\n  int local_58;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_44;\n  int local_40;\n  int local_3c;\n  int local_38;\n  \n  __ptr = malloc((long)param_1 << 2);\n  __ptr_00 = (long *)malloc((long)(param_1 + 1) << 3);\n  __ptr_01 = (long *)malloc((long)(param_1 + 1) << 3);\n  for (local_5c = 0; local_5c <= param_1; local_5c = local_5c + 1) {\n    pvVar5 = calloc(3,4);\n    __ptr_00[local_5c] = (long)pvVar5;\n    pvVar5 = calloc(3,4);\n    __ptr_01[local_5c] = (long)pvVar5;\n  }\n  lVar2 = *__ptr_00;\n  *(undefined4 *)(lVar2 + 8) = 0;\n  lVar3 = *__ptr_00;\n  *(undefined4 *)(lVar3 + 4) = *(undefined4 *)(lVar2 + 8);\n  *(undefined4 *)*__ptr_00 = *(undefined4 *)(lVar3 + 4);\n  lVar2 = *__ptr_01;\n  *(undefined4 *)(lVar2 + 8) = 0;\n  lVar3 = *__ptr_01;\n  *(undefined4 *)(lVar3 + 4) = *(undefined4 *)(lVar2 + 8);\n  *(undefined4 *)*__ptr_01 = *(undefined4 *)(lVar3 + 4);\n  for (local_58 = 1; local_58 <= param_1; local_58 = local_58 + 1) {\n    *(int *)((long)local_58 * 4 + -4 + (long)__ptr) = ((local_58 * local_58 - local_58) + 1) % 3;\n    for (local_54 = 0; local_54 < 3; local_54 = local_54 + 1) {\n      *(undefined4 *)(__ptr_00[local_58] + (long)local_54 * 4) =\n           *(undefined4 *)(__ptr_00[(long)local_58 + -1] + (long)local_54 * 4);\n    }\n    *(int *)(__ptr_00[local_58] + (long)*(int *)((long)__ptr + (long)local_58 * 4 + -4) * 4) =\n         *(int *)(__ptr_00[local_58] + (long)*(int *)((long)__ptr + (long)local_58 * 4 + -4) * 4) +\n         1;\n  }\n  for (local_50 = 1; local_50 < 3; local_50 = local_50 + 1) {\n    for (local_4c = 1; local_4c <= param_1; local_4c = local_4c + 1) {\n      for (local_48 = 0; local_48 < 3; local_48 = local_48 + 1) {\n        *(undefined4 *)(__ptr_01[local_4c] + (long)local_48 * 4) =\n             *(undefined4 *)(__ptr_01[(long)local_4c + -1] + (long)local_48 * 4);\n      }\n      if (0 < local_4c) {\n        for (local_44 = 0; local_44 < 3; local_44 = local_44 + 1) {\n          iVar4 = (*(int *)((long)__ptr + (long)local_4c * 4 + -4) + local_44) % 3;\n          *(int *)((long)iVar4 * 4 + __ptr_01[local_4c]) =\n               *(int *)(__ptr_00[(long)local_4c + -1] + (long)local_44 * 4) +\n               *(int *)((long)iVar4 * 4 + __ptr_01[local_4c]);\n        }\n      }\n    }\n    for (local_40 = 0; local_40 <= param_1; local_40 = local_40 + 1) {\n      for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n        *(undefined4 *)(__ptr_00[local_40] + (long)local_3c * 4) =\n             *(undefined4 *)(__ptr_01[local_40] + (long)local_3c * 4);\n        *(undefined4 *)(__ptr_01[local_40] + (long)local_3c * 4) = 0;\n      }\n    }\n  }\n  uVar1 = *(undefined4 *)__ptr_00[param_1];\n  for (local_38 = 0; local_38 <= param_1; local_38 = local_38 + 1) {\n    free((void *)__ptr_00[local_38]);\n    free((void *)__ptr_01[local_38]);\n  }\n  free(__ptr_00);\n  free(__ptr_01);\n  free(__ptr);\n  return uVar1;\n}"
    },
    {
        "task_id": 147,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(uint param_1)\n\n{\n  size_t __size;\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 *puVar3;\n  undefined4 *puVar4;\n  long lVar5;\n  void *__ptr;\n  undefined8 *__ptr_00;\n  undefined8 *__ptr_01;\n  void *pvVar6;\n  int iVar7;\n  long lVar8;\n  long lVar9;\n  \n  __ptr = malloc((long)(int)param_1 << 2);\n  __size = (long)(int)(param_1 + 1) * 8;\n  __ptr_00 = (undefined8 *)malloc(__size);\n  __ptr_01 = (undefined8 *)malloc(__size);\n  if (-1 < (int)param_1) {\n    lVar9 = 0;\n    do {\n      pvVar6 = calloc(3,4);\n      *(void **)((long)__ptr_00 + lVar9) = pvVar6;\n      pvVar6 = calloc(3,4);\n      *(void **)((long)__ptr_01 + lVar9) = pvVar6;\n      lVar9 = lVar9 + 8;\n    } while ((ulong)param_1 * 8 + 8 != lVar9);\n  }\n  puVar3 = (undefined4 *)*__ptr_00;\n  puVar3[2] = 0;\n  puVar3[1] = 0;\n  *puVar3 = 0;\n  puVar3 = (undefined4 *)*__ptr_01;\n  puVar3[2] = 0;\n  puVar3[1] = 0;\n  *puVar3 = 0;\n  if (0 < (int)param_1) {\n    lVar9 = 1;\n    do {\n      iVar7 = (int)lVar9;\n      iVar7 = ((iVar7 * iVar7 - iVar7) + 1) % 3;\n      *(int *)((long)__ptr + lVar9 * 4 + -4) = iVar7;\n      puVar3 = (undefined4 *)__ptr_00[lVar9 + -1];\n      puVar4 = (undefined4 *)__ptr_00[lVar9];\n      *puVar4 = *puVar3;\n      puVar4[1] = puVar3[1];\n      puVar4[2] = puVar3[2];\n      puVar4[iVar7] = puVar4[iVar7] + 1;\n      lVar9 = lVar9 + 1;\n    } while ((ulong)(param_1 - 1) + 2 != lVar9);\n  }\n  iVar7 = 2;\n  do {\n    if ((int)param_1 < 1) {\n      if (param_1 == 0) goto LAB_00101358;\n    }\n    else {\n      lVar9 = 1;\n      do {\n        puVar3 = (undefined4 *)__ptr_01[lVar9 + -1];\n        puVar4 = (undefined4 *)__ptr_01[lVar9];\n        *puVar4 = *puVar3;\n        puVar4[1] = puVar3[1];\n        puVar4[2] = puVar3[2];\n        if (0 < (int)lVar9) {\n          iVar1 = *(int *)((long)__ptr + lVar9 * 4 + -4);\n          lVar5 = __ptr_00[lVar9 + -1];\n          lVar8 = 0;\n          do {\n            puVar4[(iVar1 + (int)lVar8) % 3] =\n                 puVar4[(iVar1 + (int)lVar8) % 3] + *(int *)(lVar5 + lVar8 * 4);\n            lVar8 = lVar8 + 1;\n          } while (lVar8 != 3);\n        }\n        lVar9 = lVar9 + 1;\n      } while ((ulong)(param_1 - 1) + 2 != lVar9);\nLAB_00101358:\n      lVar9 = 0;\n      do {\n        puVar3 = (undefined4 *)__ptr_01[lVar9];\n        puVar4 = (undefined4 *)__ptr_00[lVar9];\n        *puVar4 = *puVar3;\n        *puVar3 = 0;\n        puVar4[1] = puVar3[1];\n        puVar3[1] = 0;\n        puVar4[2] = puVar3[2];\n        puVar3[2] = 0;\n        lVar9 = lVar9 + 1;\n      } while ((int)lVar9 <= (int)param_1);\n    }\n    iVar7 = iVar7 + -1;\n    if (iVar7 == 0) {\n      uVar2 = *(undefined4 *)__ptr_00[(long)(int)(param_1 + 1) + -1];\n      if (-1 < (int)param_1) {\n        lVar9 = 0;\n        do {\n          free(*(void **)((long)__ptr_00 + lVar9));\n          free(*(void **)((long)__ptr_01 + lVar9));\n          lVar9 = lVar9 + 8;\n        } while (lVar9 != (ulong)param_1 * 8 + 8);\n      }\n      free(__ptr_00);\n      free(__ptr_01);\n      free(__ptr);\n      return uVar2;\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 147,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  long lVar1;\n  int *piVar2;\n  size_t __size;\n  void **ppvVar3;\n  undefined4 uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  undefined8 uVar7;\n  int iVar8;\n  void *__ptr;\n  undefined8 *__ptr_00;\n  undefined8 *__ptr_01;\n  void *pvVar9;\n  undefined8 *puVar10;\n  undefined8 *puVar11;\n  uint uVar12;\n  long lVar13;\n  undefined8 *__ptr_02;\n  long lVar14;\n  long lVar15;\n  undefined8 *puVar16;\n  int local_4c;\n  \n  lVar14 = (long)param_1;\n  __ptr = malloc(lVar14 * 4);\n  __size = (long)(param_1 + 1) * 8;\n  __ptr_00 = (undefined8 *)malloc(__size);\n  lVar15 = 0;\n  __ptr_01 = (undefined8 *)malloc(__size);\n  if (param_1 < 0) {\n    __ptr_02 = (undefined8 *)*__ptr_00;\n    puVar16 = (undefined8 *)*__ptr_01;\n    *__ptr_02 = 0;\n    *(undefined4 *)(__ptr_02 + 1) = 0;\n    *puVar16 = 0;\n    *(undefined4 *)(puVar16 + 1) = 0;\n  }\n  else {\n    do {\n      pvVar9 = calloc(3,4);\n      *(void **)((long)__ptr_00 + lVar15) = pvVar9;\n      pvVar9 = calloc(3,4);\n      *(void **)((long)__ptr_01 + lVar15) = pvVar9;\n      lVar15 = lVar15 + 8;\n    } while (lVar14 * 8 + 8 != lVar15);\n    __ptr_02 = (undefined8 *)*__ptr_00;\n    puVar16 = (undefined8 *)*__ptr_01;\n    *__ptr_02 = 0;\n    *(undefined4 *)(__ptr_02 + 1) = 0;\n    *puVar16 = 0;\n    *(undefined4 *)(puVar16 + 1) = 0;\n    if (0 < param_1) {\n      lVar15 = 1;\n      puVar11 = __ptr_02;\n      while( true ) {\n        uVar4 = *(undefined4 *)puVar11;\n        uVar12 = (((int)lVar15 + -1) * (int)lVar15 + 1U) % 3;\n        puVar10 = (undefined8 *)__ptr_00[lVar15];\n        *(uint *)((long)__ptr + lVar15 * 4 + -4) = uVar12;\n        *(undefined4 *)puVar10 = uVar4;\n        *(undefined4 *)((long)puVar10 + 4) = *(undefined4 *)((long)puVar11 + 4);\n        *(undefined4 *)(puVar10 + 1) = *(undefined4 *)(puVar11 + 1);\n        piVar2 = (int *)((long)puVar10 + (long)(int)uVar12 * 4);\n        *piVar2 = *piVar2 + 1;\n        if ((ulong)(param_1 - 1) + 1 == lVar15) break;\n        lVar15 = lVar15 + 1;\n        puVar11 = puVar10;\n      }\n    }\n  }\n  local_4c = 2;\n  if (param_1 < 1) goto LAB_0010148a;\n  do {\n    lVar15 = 1;\n    puVar10 = puVar16;\n    puVar11 = __ptr_02;\n    while( true ) {\n      puVar6 = (undefined8 *)__ptr_01[lVar15];\n      iVar5 = *(int *)((long)__ptr + lVar15 * 4 + -4);\n      *(undefined4 *)puVar6 = *(undefined4 *)puVar10;\n      *(undefined4 *)((long)puVar6 + 4) = *(undefined4 *)((long)puVar10 + 4);\n      lVar13 = 0;\n      *(undefined4 *)(puVar6 + 1) = *(undefined4 *)(puVar10 + 1);\n      do {\n        iVar8 = (int)lVar13;\n        lVar1 = lVar13 * 4;\n        lVar13 = lVar13 + 1;\n        piVar2 = (int *)((long)puVar6 + (long)((iVar5 + iVar8) % 3) * 4);\n        *piVar2 = *piVar2 + *(int *)((long)puVar11 + lVar1);\n      } while (lVar13 != 3);\n      if ((ulong)(param_1 - 1) + 1 == lVar15) break;\n      puVar11 = (undefined8 *)__ptr_00[lVar15];\n      lVar15 = lVar15 + 1;\n      puVar10 = puVar6;\n    }\n    lVar15 = 0;\n    puVar11 = puVar16;\n    puVar10 = __ptr_02;\n    while( true ) {\n      uVar4 = *(undefined4 *)(puVar11 + 1);\n      uVar7 = *puVar11;\n      lVar15 = lVar15 + 1;\n      *puVar11 = 0;\n      *(undefined4 *)(puVar11 + 1) = 0;\n      *puVar10 = uVar7;\n      *(undefined4 *)(puVar10 + 1) = uVar4;\n      if (param_1 < (int)lVar15) break;\n      puVar11 = (undefined8 *)__ptr_01[lVar15];\n      puVar10 = (undefined8 *)__ptr_00[lVar15];\n    }\n    while( true ) {\n      if (local_4c == 1) {\n        uVar4 = *(undefined4 *)__ptr_00[(long)(param_1 + 1) + -1];\n        if (-1 < param_1) {\n          lVar15 = 0;\n          while( true ) {\n            free(__ptr_02);\n            ppvVar3 = (void **)((long)__ptr_01 + lVar15);\n            lVar15 = lVar15 + 8;\n            free(*ppvVar3);\n            if (lVar14 * 8 + 8 == lVar15) break;\n            __ptr_02 = *(undefined8 **)((long)__ptr_00 + lVar15);\n          }\n        }\n        free(__ptr_00);\n        free(__ptr_01);\n        free(__ptr);\n        return uVar4;\n      }\n      local_4c = 1;\n      if (0 < param_1) break;\nLAB_0010148a:\n      if (param_1 == 0) {\n        uVar4 = *(undefined4 *)(puVar16 + 1);\n        uVar7 = *puVar16;\n        *(undefined4 *)(puVar16 + 1) = 0;\n        *puVar16 = 0;\n        *__ptr_02 = uVar7;\n        *(undefined4 *)(__ptr_02 + 1) = uVar4;\n      }\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 147,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1)\n\n{\n  int *piVar1;\n  void **ppvVar2;\n  int iVar3;\n  undefined4 *puVar4;\n  undefined8 *puVar5;\n  int *piVar6;\n  undefined8 uVar7;\n  void *__ptr;\n  long *__ptr_00;\n  undefined8 *__ptr_01;\n  void *pvVar8;\n  ulong uVar9;\n  uint uVar10;\n  undefined8 *puVar11;\n  size_t __size;\n  undefined8 *puVar12;\n  long lVar13;\n  long lVar14;\n  int iVar15;\n  undefined4 uVar16;\n  bool bVar17;\n  \n  lVar13 = (long)param_1;\n  __size = (long)(param_1 + 1) * 8;\n  __ptr = malloc(lVar13 * 4);\n  __ptr_00 = (long *)malloc(__size);\n  lVar14 = 0;\n  __ptr_01 = (undefined8 *)malloc(__size);\n  if (param_1 < 0) {\n    puVar11 = (undefined8 *)*__ptr_00;\n    puVar12 = (undefined8 *)*__ptr_01;\n    *puVar11 = 0;\n    *(undefined4 *)(puVar11 + 1) = 0;\n    *puVar12 = 0;\n    *(undefined4 *)(puVar12 + 1) = 0;\n  }\n  else {\n    do {\n      pvVar8 = calloc(3,4);\n      *(void **)((long)__ptr_00 + lVar14) = pvVar8;\n      pvVar8 = calloc(3,4);\n      *(void **)((long)__ptr_01 + lVar14) = pvVar8;\n      lVar14 = lVar14 + 8;\n    } while (lVar14 != lVar13 * 8 + 8);\n    puVar11 = (undefined8 *)*__ptr_00;\n    puVar12 = (undefined8 *)*__ptr_01;\n    *puVar11 = 0;\n    *(undefined4 *)(puVar11 + 1) = 0;\n    *puVar12 = 0;\n    *(undefined4 *)(puVar12 + 1) = 0;\n    if (0 < param_1) {\n      uVar16 = 0;\n      uVar9 = 0;\n      while( true ) {\n        lVar14 = __ptr_00[uVar9];\n        uVar10 = (((int)uVar9 + 1) * (int)uVar9 + 1U) % 3;\n        puVar4 = (undefined4 *)__ptr_00[uVar9 + 1];\n        *(uint *)((long)__ptr + uVar9 * 4) = uVar10;\n        *puVar4 = uVar16;\n        puVar4[1] = *(undefined4 *)(lVar14 + 4);\n        puVar4[2] = *(undefined4 *)(lVar14 + 8);\n        puVar4[(int)uVar10] = puVar4[(int)uVar10] + 1;\n        if (uVar9 == param_1 - 1) break;\n        uVar16 = *(undefined4 *)__ptr_00[uVar9 + 1];\n        uVar9 = uVar9 + 1;\n      }\n    }\n  }\n  iVar15 = 2;\n  uVar9 = 0;\n  puVar11 = puVar12;\n  if (param_1 < 1) goto LAB_001014be;\n  do {\n    do {\n      puVar5 = (undefined8 *)__ptr_01[uVar9 + 1];\n      *(undefined4 *)puVar5 = *(undefined4 *)puVar11;\n      *(undefined4 *)((long)puVar5 + 4) = *(undefined4 *)((long)puVar11 + 4);\n      iVar3 = *(int *)((long)__ptr + uVar9 * 4);\n      *(undefined4 *)(puVar5 + 1) = *(undefined4 *)(puVar11 + 1);\n      piVar6 = (int *)__ptr_00[uVar9];\n      piVar1 = (int *)((long)puVar5 + (long)(iVar3 % 3) * 4);\n      *piVar1 = *piVar1 + *piVar6;\n      piVar1 = (int *)((long)puVar5 + (long)((iVar3 + 1) % 3) * 4);\n      *piVar1 = *piVar1 + piVar6[1];\n      piVar1 = (int *)((long)puVar5 + (long)((iVar3 + 2) % 3) * 4);\n      *piVar1 = *piVar1 + piVar6[2];\n      bVar17 = uVar9 != param_1 - 1;\n      puVar11 = puVar5;\n      uVar9 = uVar9 + 1;\n    } while (bVar17);\n    lVar14 = 0;\n    do {\n      puVar11 = (undefined8 *)__ptr_01[lVar14];\n      puVar5 = (undefined8 *)__ptr_00[lVar14];\n      lVar14 = lVar14 + 1;\n      uVar16 = *(undefined4 *)(puVar11 + 1);\n      uVar7 = *puVar11;\n      *(undefined4 *)(puVar11 + 1) = 0;\n      *puVar11 = 0;\n      *puVar5 = uVar7;\n      *(undefined4 *)(puVar5 + 1) = uVar16;\n    } while ((int)lVar14 <= param_1);\n    while( true ) {\n      if (iVar15 == 1) {\n        lVar14 = 0;\n        uVar16 = *(undefined4 *)__ptr_00[(long)(param_1 + 1) + -1];\n        if (-1 < param_1) {\n          do {\n            free(*(void **)((long)__ptr_00 + lVar14));\n            ppvVar2 = (void **)((long)__ptr_01 + lVar14);\n            lVar14 = lVar14 + 8;\n            free(*ppvVar2);\n          } while (lVar14 != lVar13 * 8 + 8);\n        }\n        free(__ptr_00);\n        free(__ptr_01);\n        free(__ptr);\n        return uVar16;\n      }\n      iVar15 = 1;\n      uVar9 = 0;\n      puVar11 = puVar12;\n      if (0 < param_1) break;\nLAB_001014be:\n      if (param_1 == 0) {\n        puVar11 = (undefined8 *)*__ptr_01;\n        puVar5 = (undefined8 *)*__ptr_00;\n        uVar16 = *(undefined4 *)(puVar11 + 1);\n        uVar7 = *puVar11;\n        *(undefined4 *)(puVar11 + 1) = 0;\n        *puVar11 = 0;\n        *puVar5 = uVar7;\n        *(undefined4 *)(puVar5 + 1) = uVar16;\n      }\n    }\n  } while( true );\n}"
    },
    {
        "task_id": 148,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,char *param_2,int *param_3)\n\n{\n  int iVar1;\n  void *pvVar2;\n  long in_FS_OFFSET;\n  int local_70;\n  int local_6c;\n  int local_68;\n  char *local_58 [4];\n  char *local_38;\n  char *local_30;\n  char *local_28;\n  char *local_20;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_58[0] = \"Mercury\";\n  local_58[1] = \"Venus\";\n  local_58[2] = \"Earth\";\n  local_58[3] = &DAT_0010201c;\n  local_38 = \"Jupiter\";\n  local_30 = \"Saturn\";\n  local_28 = \"Uranus\";\n  local_20 = \"Neptune\";\n  local_70 = -1;\n  local_6c = -1;\n  for (local_68 = 0; iVar1 = local_70, local_68 < 8; local_68 = local_68 + 1) {\n    iVar1 = strcmp(local_58[local_68],param_1);\n    if (iVar1 == 0) {\n      local_70 = local_68;\n    }\n    iVar1 = strcmp(local_58[local_68],param_2);\n    if (iVar1 == 0) {\n      local_6c = local_68;\n    }\n  }\n  if (((local_70 == -1) || (local_6c == -1)) || (local_70 == local_6c)) {\n    *param_3 = 0;\n    pvVar2 = (void *)0x0;\n  }\n  else {\n    if (local_6c < local_70) {\n      local_70 = local_6c;\n      local_6c = iVar1;\n    }\n    *param_3 = (local_6c - local_70) + -1;\n    if (*param_3 < 1) {\n      *param_3 = 0;\n      pvVar2 = (void *)0x0;\n    }\n    else {\n      pvVar2 = malloc((long)*param_3 << 3);\n      local_68 = local_70;\n      while (local_68 = local_68 + 1, local_68 < local_6c) {\n        *(char **)((long)(local_68 - local_70) * 8 + -8 + (long)pvVar2) = local_58[local_68];\n      }\n    }\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return pvVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 148,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,char *param_2,int *param_3)\n\n{\n  char *__s1;\n  int iVar1;\n  int iVar2;\n  void *pvVar3;\n  ulong uVar4;\n  ulong uVar5;\n  int iVar6;\n  ulong uVar7;\n  long in_FS_OFFSET;\n  bool bVar8;\n  char *local_88 [9];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"Mercury\";\n  local_88[1] = \"Venus\";\n  local_88[2] = \"Earth\";\n  local_88[3] = &DAT_00102018;\n  local_88[4] = \"Jupiter\";\n  local_88[5] = \"Saturn\";\n  local_88[6] = \"Uranus\";\n  local_88[7] = \"Neptune\";\n  uVar4 = 0;\n  uVar5 = 0xffffffff;\n  uVar7 = 0xffffffff;\n  do {\n    __s1 = local_88[uVar4];\n    iVar1 = strcmp(__s1,param_1);\n    if (iVar1 == 0) {\n      uVar7 = uVar4 & 0xffffffff;\n    }\n    iVar2 = (int)uVar7;\n    iVar1 = strcmp(__s1,param_2);\n    if (iVar1 == 0) {\n      uVar5 = uVar4 & 0xffffffff;\n    }\n    iVar1 = (int)uVar5;\n    uVar4 = uVar4 + 1;\n  } while (uVar4 != 8);\n  if ((iVar2 == -1 || iVar1 == -1) || (iVar2 == iVar1)) {\n    *param_3 = 0;\n    pvVar3 = (void *)0x0;\n  }\n  else {\n    iVar6 = iVar2;\n    if (iVar1 < iVar2) {\n      iVar6 = iVar1;\n      iVar1 = iVar2;\n    }\n    iVar2 = (iVar1 - iVar6) + -1;\n    *param_3 = iVar2;\n    if (iVar2 < 1) {\n      *param_3 = 0;\n      pvVar3 = (void *)0x0;\n    }\n    else {\n      pvVar3 = malloc((long)iVar2 * 8);\n      if (iVar6 + 1 < iVar1) {\n        uVar4 = 0;\n        do {\n          *(char **)((long)pvVar3 + uVar4 * 8) = local_88[(long)iVar6 + uVar4 + 1];\n          bVar8 = uVar4 != (uint)((iVar1 + -2) - iVar6);\n          uVar4 = uVar4 + 1;\n        } while (bVar8);\n      }\n    }\n  }\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return pvVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 148,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,char *param_2,int *param_3)\n\n{\n  int iVar1;\n  int iVar2;\n  void *pvVar3;\n  long lVar4;\n  ulong uVar5;\n  int iVar6;\n  ulong uVar7;\n  char *__s1;\n  ulong uVar8;\n  long in_FS_OFFSET;\n  char *local_88 [9];\n  long local_40;\n  \n  uVar8 = 0xffffffff;\n  __s1 = \"Mercury\";\n  uVar7 = 0xffffffff;\n  uVar5 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"Mercury\";\n  local_88[1] = \"Venus\";\n  local_88[2] = \"Earth\";\n  local_88[3] = &DAT_00102018;\n  local_88[4] = \"Jupiter\";\n  local_88[5] = \"Saturn\";\n  local_88[6] = \"Uranus\";\n  local_88[7] = \"Neptune\";\n  while( true ) {\n    iVar1 = strcmp(__s1,param_1);\n    if (iVar1 == 0) {\n      uVar7 = uVar5 & 0xffffffff;\n    }\n    iVar2 = (int)uVar7;\n    iVar1 = strcmp(__s1,param_2);\n    if (iVar1 == 0) {\n      uVar8 = uVar5 & 0xffffffff;\n    }\n    iVar1 = (int)uVar8;\n    uVar5 = uVar5 + 1;\n    if (uVar5 == 8) break;\n    __s1 = local_88[uVar5];\n  }\n  if ((iVar2 != -1 && iVar1 != -1) && (iVar2 != iVar1)) {\n    iVar6 = iVar2;\n    if (iVar1 < iVar2) {\n      iVar6 = iVar1;\n      iVar1 = iVar2;\n    }\n    iVar2 = (iVar1 - iVar6) + -1;\n    *param_3 = iVar2;\n    if (0 < iVar2) {\n      pvVar3 = malloc((long)iVar2 * 8);\n      if (iVar6 + 1 < iVar1) {\n        lVar4 = (long)(iVar6 + 1);\n        do {\n          *(char **)((long)pvVar3 + lVar4 * 8 + (long)iVar6 * -8 + -8) = local_88[lVar4];\n          lVar4 = lVar4 + 1;\n        } while ((int)lVar4 < iVar1);\n      }\n      goto LAB_001016c2;\n    }\n  }\n  *param_3 = 0;\n  pvVar3 = (void *)0x0;\nLAB_001016c2:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return pvVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 148,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char *param_1,char *param_2,int *param_3)\n\n{\n  int iVar1;\n  char *pcVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  void *__dest;\n  long in_FS_OFFSET;\n  char *local_88 [4];\n  char *local_68;\n  char *pcStack_60;\n  char *local_58;\n  char *pcStack_50;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"Mercury\";\n  local_88[1] = \"Venus\";\n  local_88[2] = \"Earth\";\n  local_88[3] = \"Mars\";\n  local_68 = \"Jupiter\";\n  pcStack_60 = \"Saturn\";\n  local_58 = \"Uranus\";\n  pcStack_50 = \"Neptune\";\n  iVar3 = strcmp(\"Mercury\",param_1);\n  iVar4 = strcmp(\"Mercury\",param_2);\n  pcVar2 = local_88[1];\n  iVar3 = -(uint)(iVar3 != 0);\n  iVar5 = strcmp(local_88[1],param_1);\n  if (iVar5 == 0) {\n    iVar3 = 1;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = local_88[2];\n  iVar4 = -(uint)(iVar4 != 0);\n  if (iVar5 == 0) {\n    iVar4 = 1;\n  }\n  iVar5 = strcmp(local_88[2],param_1);\n  if (iVar5 == 0) {\n    iVar3 = 2;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = local_88[3];\n  if (iVar5 == 0) {\n    iVar4 = 2;\n  }\n  iVar5 = strcmp(local_88[3],param_1);\n  if (iVar5 == 0) {\n    iVar3 = 3;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = local_68;\n  if (iVar5 == 0) {\n    iVar4 = 3;\n  }\n  iVar5 = strcmp(local_68,param_1);\n  if (iVar5 == 0) {\n    iVar3 = 4;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = pcStack_60;\n  if (iVar5 == 0) {\n    iVar4 = 4;\n  }\n  iVar5 = strcmp(pcStack_60,param_1);\n  if (iVar5 == 0) {\n    iVar3 = 5;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = local_58;\n  if (iVar5 == 0) {\n    iVar4 = 5;\n  }\n  iVar5 = strcmp(local_58,param_1);\n  if (iVar5 == 0) {\n    iVar3 = 6;\n  }\n  iVar5 = strcmp(pcVar2,param_2);\n  pcVar2 = pcStack_50;\n  if (iVar5 == 0) {\n    iVar4 = 6;\n  }\n  iVar5 = strcmp(pcStack_50,param_1);\n  if (iVar5 == 0) {\n    iVar5 = strcmp(pcVar2,param_2);\n    iVar3 = 7;\n    if (iVar5 != 0) goto LAB_0010187f;\n  }\n  else {\n    iVar5 = strcmp(pcVar2,param_2);\n    if (iVar5 == 0) {\n      if ((iVar3 == 7) || (iVar3 == -1)) goto LAB_001018af;\n      iVar4 = 7;\nLAB_001017f6:\n      iVar5 = (iVar4 - iVar3) + -1;\n      *param_3 = iVar5;\n      iVar1 = iVar4;\n    }\n    else {\nLAB_0010187f:\n      if ((iVar4 == -1 || iVar4 == iVar3) || (iVar3 == -1)) goto LAB_001018af;\n      if (iVar3 <= iVar4) goto LAB_001017f6;\n      iVar5 = (iVar3 - iVar4) + -1;\n      *param_3 = iVar5;\n      iVar1 = iVar3;\n      iVar3 = iVar4;\n    }\n    if (0 < iVar5) {\n      __dest = malloc((long)iVar5 * 8);\n      if (iVar3 + 1 < iVar1) {\n        __dest = memcpy(__dest,local_88 + (iVar3 + 1),(ulong)(uint)((iVar1 + -2) - iVar3) * 8 + 8);\n      }\n      goto LAB_00101844;\n    }\n  }\nLAB_001018af:\n  *param_3 = 0;\n  __dest = (void *)0x0;\nLAB_00101844:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return __dest;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 149,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(long param_1,int param_2,int *param_3)\n\n{\n  undefined8 uVar1;\n  int iVar2;\n  size_t sVar3;\n  size_t sVar4;\n  void *pvVar5;\n  int local_30;\n  int local_2c;\n  \n  *param_3 = 0;\n  for (local_30 = 0; local_30 < param_2; local_30 = local_30 + 1) {\n    sVar3 = strlen(*(char **)(param_1 + (long)local_30 * 8));\n    if ((sVar3 & 1) == 0) {\n      *(undefined8 *)((long)*param_3 * 8 + param_1) = *(undefined8 *)((long)local_30 * 8 + param_1);\n      *param_3 = *param_3 + 1;\n    }\n  }\n  local_30 = 0;\n  do {\n    if (*param_3 + -1 <= local_30) {\n      pvVar5 = malloc((long)*param_3 << 3);\n      for (local_30 = 0; local_30 < *param_3; local_30 = local_30 + 1) {\n        *(undefined8 *)((long)pvVar5 + (long)local_30 * 8) =\n             *(undefined8 *)(param_1 + (long)local_30 * 8);\n      }\n      return pvVar5;\n    }\n    for (local_2c = 0; local_2c < (*param_3 - local_30) + -1; local_2c = local_2c + 1) {\n      sVar3 = strlen(*(char **)(param_1 + (long)local_2c * 8));\n      sVar4 = strlen(*(char **)(param_1 + ((long)local_2c + 1) * 8));\n      if (sVar4 < sVar3) {\nLAB_00101362:\n        uVar1 = *(undefined8 *)(param_1 + (long)local_2c * 8);\n        *(undefined8 *)(param_1 + (long)local_2c * 8) =\n             *(undefined8 *)(param_1 + ((long)local_2c + 1) * 8);\n        *(undefined8 *)(((long)local_2c + 1) * 8 + param_1) = uVar1;\n      }\n      else if (sVar3 == sVar4) {\n        iVar2 = strcmp(*(char **)(param_1 + (long)local_2c * 8),\n                       *(char **)(param_1 + ((long)local_2c + 1) * 8));\n        if (0 < iVar2) goto LAB_00101362;\n      }\n    }\n    local_30 = local_30 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 149,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char **param_1,int param_2,int *param_3)\n\n{\n  char cVar1;\n  int iVar2;\n  void *pvVar3;\n  ulong uVar4;\n  ulong uVar5;\n  char **ppcVar6;\n  long lVar7;\n  char *pcVar8;\n  char *pcVar9;\n  char *pcVar10;\n  bool bVar11;\n  byte bVar12;\n  uint local_3c;\n  \n  bVar12 = 0;\n  *param_3 = 0;\n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    ppcVar6 = param_1;\n    do {\n      uVar4 = 0xffffffffffffffff;\n      pcVar8 = *ppcVar6;\n      do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar8;\n        pcVar8 = pcVar8 + 1;\n      } while (cVar1 != '\\0');\n      if ((uVar4 & 1) == 0) {\n        param_1[*param_3] = *ppcVar6;\n        *param_3 = *param_3 + 1;\n      }\n      ppcVar6 = ppcVar6 + 1;\n    } while (ppcVar6 != param_1 + (ulong)(param_2 - 1) + 1);\n    iVar2 = *param_3;\n    if (1 < iVar2) {\n      local_3c = 0;\n      do {\n        lVar7 = 0;\n        if (1 < (int)(*param_3 - local_3c)) {\n          do {\n            pcVar8 = param_1[lVar7];\n            uVar4 = 0xffffffffffffffff;\n            pcVar9 = pcVar8;\n            do {\n              if (uVar4 == 0) break;\n              uVar4 = uVar4 - 1;\n              cVar1 = *pcVar9;\n              pcVar9 = pcVar9 + (ulong)bVar12 * -2 + 1;\n            } while (cVar1 != '\\0');\n            pcVar9 = param_1[lVar7 + 1];\n            uVar5 = 0xffffffffffffffff;\n            pcVar10 = pcVar9;\n            do {\n              if (uVar5 == 0) break;\n              uVar5 = uVar5 - 1;\n              cVar1 = *pcVar10;\n              pcVar10 = pcVar10 + (ulong)bVar12 * -2 + 1;\n            } while (cVar1 != '\\0');\n            if ((~uVar5 - 1 < ~uVar4 - 1) ||\n               ((~uVar4 - 1 == ~uVar5 - 1 && (iVar2 = strcmp(pcVar8,pcVar9), 0 < iVar2)))) {\n              param_1[lVar7] = pcVar9;\n              param_1[lVar7 + 1] = pcVar8;\n            }\n            lVar7 = lVar7 + 1;\n          } while ((int)lVar7 < (int)(~local_3c + *param_3));\n        }\n        local_3c = local_3c + 1;\n        iVar2 = *param_3;\n      } while ((int)local_3c < iVar2 + -1);\n    }\n  }\n  pvVar3 = malloc((long)iVar2 * 8);\n  iVar2 = *param_3;\n  if (0 < iVar2) {\n    uVar4 = 0;\n    do {\n      *(char **)((long)pvVar3 + uVar4 * 8) = param_1[uVar4];\n      bVar11 = iVar2 - 1 != uVar4;\n      uVar4 = uVar4 + 1;\n    } while (bVar11);\n  }\n  return;\n}"
    },
    {
        "task_id": 149,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(char **param_1,int param_2,int *param_3)\n\n{\n  char *pcVar1;\n  char *__s;\n  uint uVar2;\n  size_t sVar3;\n  size_t sVar4;\n  void *pvVar5;\n  ulong uVar6;\n  int iVar7;\n  char **ppcVar8;\n  bool bVar9;\n  size_t local_50;\n  \n  *param_3 = 0;\n  if (param_2 < 1) {\n    local_50 = 0;\n  }\n  else {\n    iVar7 = 0;\n    ppcVar8 = param_1;\n    do {\n      pcVar1 = *ppcVar8;\n      sVar3 = strlen(pcVar1);\n      local_50 = (long)iVar7 * 8;\n      if ((sVar3 & 1) == 0) {\n        param_1[iVar7] = pcVar1;\n        iVar7 = iVar7 + 1;\n        local_50 = local_50 + 8;\n        *param_3 = iVar7;\n      }\n      ppcVar8 = ppcVar8 + 1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1 != ppcVar8);\n    uVar2 = iVar7 - 1;\n    if (0 < (int)uVar2) {\n      do {\n        uVar2 = uVar2 - 1;\n        ppcVar8 = param_1;\n        do {\n          while( true ) {\n            pcVar1 = *ppcVar8;\n            sVar3 = strlen(pcVar1);\n            __s = ppcVar8[1];\n            sVar4 = strlen(__s);\n            if (sVar3 <= sVar4) break;\n            *ppcVar8 = __s;\n            ppcVar8[1] = pcVar1;\nLAB_001017ed:\n            ppcVar8 = ppcVar8 + 1;\n            if (param_1 + (ulong)uVar2 + 1 == ppcVar8) goto LAB_001017f6;\n          }\n          if ((sVar3 == sVar4) && (iVar7 = strcmp(pcVar1,__s), 0 < iVar7)) {\n            *ppcVar8 = __s;\n            ppcVar8[1] = pcVar1;\n            goto LAB_001017ed;\n          }\n          ppcVar8 = ppcVar8 + 1;\n        } while (param_1 + (ulong)uVar2 + 1 != ppcVar8);\nLAB_001017f6:\n      } while (uVar2 != 0);\n    }\n  }\n  pvVar5 = malloc(local_50);\n  iVar7 = *param_3;\n  uVar6 = 0;\n  if (0 < iVar7) {\n    do {\n      *(char **)((long)pvVar5 + uVar6 * 8) = param_1[uVar6];\n      bVar9 = iVar7 - 1 != uVar6;\n      uVar6 = uVar6 + 1;\n    } while (bVar9);\n  }\n  return;\n}"
    },
    {
        "task_id": 149,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
        "c_test": "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void * func0(char **param_1,int param_2,int *param_3)\n\n{\n  char *pcVar1;\n  char *__s;\n  uint uVar2;\n  size_t sVar3;\n  long lVar4;\n  size_t sVar6;\n  void *__dest;\n  int iVar7;\n  char **ppcVar8;\n  char **ppcVar9;\n  size_t local_50;\n  ulong uVar5;\n  \n  *param_3 = 0;\n  if (param_2 < 1) {\n    local_50 = 0;\n  }\n  else {\n    iVar7 = 0;\n    ppcVar8 = param_1;\n    do {\n      pcVar1 = *ppcVar8;\n      sVar3 = strlen(pcVar1);\n      lVar4 = (long)iVar7;\n      local_50 = lVar4 * 8;\n      if ((sVar3 & 1) == 0) {\n        iVar7 = iVar7 + 1;\n        local_50 = local_50 + 8;\n        param_1[lVar4] = pcVar1;\n        *param_3 = iVar7;\n      }\n      ppcVar8 = ppcVar8 + 1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1 != ppcVar8);\n    uVar5 = (ulong)(iVar7 - 1U);\n    if (0 < (int)(iVar7 - 1U)) {\n      do {\n        uVar2 = (int)uVar5 - 1;\n        uVar5 = (ulong)uVar2;\n        ppcVar8 = param_1;\n        do {\n          while( true ) {\n            pcVar1 = *ppcVar8;\n            sVar3 = strlen(pcVar1);\n            __s = ppcVar8[1];\n            sVar6 = strlen(__s);\n            if ((sVar3 <= sVar6) && ((sVar3 != sVar6 || (iVar7 = strcmp(pcVar1,__s), iVar7 < 1))))\n            break;\n            ppcVar9 = ppcVar8 + 1;\n            *ppcVar8 = __s;\n            ppcVar8[1] = pcVar1;\n            ppcVar8 = ppcVar9;\n            if (ppcVar9 == param_1 + uVar5 + 1) goto LAB_00101852;\n          }\n          ppcVar8 = ppcVar8 + 1;\n        } while (ppcVar8 != param_1 + uVar5 + 1);\nLAB_00101852:\n      } while (uVar2 != 0);\n    }\n  }\n  __dest = malloc(local_50);\n  if (0 < *param_3) {\n    __dest = memcpy(__dest,param_1,(ulong)(*param_3 - 1) * 8 + 8);\n  }\n  return __dest;\n}"
    },
    {
        "task_id": 150,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  bool bVar1;\n  int local_c;\n  \n  bVar1 = 1 < param_1;\n  for (local_c = 2; local_c * local_c <= param_1; local_c = local_c + 1) {\n    if (param_1 % local_c == 0) {\n      bVar1 = false;\n    }\n  }\n  if (bVar1) {\n    param_3 = param_2;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 150,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)(1 < param_1);\n  uVar2 = (uint)(1 < param_1);\n  if (3 < param_1) {\n    iVar1 = 2;\n    do {\n      if ((int)((long)param_1 % (long)iVar1) == 0) {\n        uVar3 = (long)param_1 % (long)iVar1 & 0xffffffff;\n      }\n      uVar2 = (uint)uVar3;\n      iVar1 = iVar1 + 1;\n    } while (iVar1 * iVar1 <= param_1);\n  }\n  if (uVar2 != 0) {\n    param_3 = param_2;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 150,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  bool bVar1;\n  int iVar2;\n  \n  bVar1 = 1 < param_1;\n  if (3 < param_1) {\n    iVar2 = 2;\n    do {\n      if (param_1 % iVar2 == 0) {\n        bVar1 = false;\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  if (bVar1) {\n    param_3 = param_2;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 150,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(int param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  bool bVar1;\n  int iVar2;\n  \n  bVar1 = 1 < param_1;\n  if (3 < param_1) {\n    iVar2 = 2;\n    do {\n      if (param_1 % iVar2 == 0) {\n        bVar1 = false;\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  if (bVar1) {\n    param_3 = param_2;\n  }\n  return param_3;\n}"
    },
    {
        "task_id": 151,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(long param_1,int param_2)\n\n{\n  float fVar1;\n  double dVar2;\n  double dVar3;\n  int local_24;\n  long local_20;\n  \n  local_20 = 0;\n  for (local_24 = 0; local_24 < param_2; local_24 = local_24 + 1) {\n    fVar1 = *(float *)(param_1 + (long)local_24 * 4);\n    dVar2 = round((double)*(float *)(param_1 + (long)local_24 * 4));\n    if (((double)(DAT_00102170 & (ulong)((double)fVar1 - dVar2)) < DAT_00102180) &&\n       (0.0 < *(float *)(param_1 + (long)local_24 * 4))) {\n      dVar2 = round((double)*(float *)(param_1 + (long)local_24 * 4));\n      if ((int)dVar2 % 2 == 1) {\n        dVar2 = round((double)*(float *)(param_1 + (long)local_24 * 4));\n        dVar3 = round((double)*(float *)(param_1 + (long)local_24 * 4));\n        local_20 = local_20 + (int)dVar3 * (int)dVar2;\n      }\n    }\n  }\n  return local_20;\n}"
    },
    {
        "task_id": 151,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float __x;\n  int iVar2;\n  long lVar3;\n  float fVar4;\n  \n  if (param_2 < 1) {\n    lVar3 = 0;\n  }\n  else {\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    lVar3 = 0;\n    do {\n      __x = *param_1;\n      fVar4 = roundf(__x);\n      if ((((double)((ulong)((double)__x - (double)fVar4) & _DAT_00102160) < DAT_00102170) &&\n          (_DAT_00102178 < __x)) && (iVar2 = (int)fVar4, iVar2 % 2 == 1)) {\n        lVar3 = lVar3 + iVar2 * iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (param_1 != pfVar1);\n  }\n  return lVar3;\n}"
    },
    {
        "task_id": 151,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float __x;\n  int iVar2;\n  long lVar3;\n  float fVar4;\n  \n  if (0 < param_2) {\n    lVar3 = 0;\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __x = *param_1;\n      fVar4 = roundf(__x);\n      if ((((double)((ulong)((double)__x - (double)fVar4) & _DAT_00102160) < DAT_00102170) &&\n          (0.0 < __x)) && (iVar2 = (int)fVar4, iVar2 % 2 == 1)) {\n        lVar3 = lVar3 + iVar2 * iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (pfVar1 != param_1);\n    return lVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 151,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}",
        "input_asm_prompt": "long func0(float *param_1,int param_2)\n\n{\n  float *pfVar1;\n  float __x;\n  int iVar2;\n  long lVar3;\n  float fVar4;\n  \n  if (0 < param_2) {\n    lVar3 = 0;\n    pfVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __x = *param_1;\n      fVar4 = roundf(__x);\n      if ((((double)((ulong)((double)__x - (double)fVar4) & _DAT_00102160) < DAT_00102190) &&\n          (0.0 < __x)) && (iVar2 = (int)fVar4, iVar2 % 2 == 1)) {\n        lVar3 = lVar3 + iVar2 * iVar2;\n      }\n      param_1 = param_1 + 1;\n    } while (pfVar1 != param_1);\n    return lVar3;\n  }\n  return 0;\n}"
    },
    {
        "task_id": 152,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2,long param_3,int param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int local_c;\n  \n  for (local_c = 0; local_c < param_4; local_c = local_c + 1) {\n    uVar1 = *(int *)(param_1 + (long)local_c * 4) - *(int *)(param_2 + (long)local_c * 4);\n    uVar2 = (int)uVar1 >> 0x1f;\n    *(uint *)((long)local_c * 4 + param_3) = (uVar1 ^ uVar2) - uVar2;\n  }\n  return;\n}"
    },
    {
        "task_id": 152,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2,long param_3,int param_4)\n\n{\n  int *piVar1;\n  ulong uVar2;\n  uint uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (0 < param_4) {\n    uVar2 = 0;\n    do {\n      uVar3 = *(int *)(param_1 + uVar2 * 4) - *(int *)(param_2 + uVar2 * 4);\n      uVar4 = (int)uVar3 >> 0x1f;\n      *(uint *)(param_3 + uVar2 * 4) = uVar3 ^ uVar4;\n      piVar1 = (int *)(param_3 + uVar2 * 4);\n      *piVar1 = *piVar1 - uVar4;\n      bVar5 = uVar2 != param_4 - 1;\n      uVar2 = uVar2 + 1;\n    } while (bVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 152,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2,long param_3,int param_4)\n\n{\n  int *piVar1;\n  ulong uVar2;\n  uint uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (0 < param_4) {\n    uVar2 = 0;\n    do {\n      uVar3 = *(int *)(param_1 + uVar2 * 4) - *(int *)(param_2 + uVar2 * 4);\n      uVar4 = (int)uVar3 >> 0x1f;\n      *(uint *)(param_3 + uVar2 * 4) = uVar3 ^ uVar4;\n      piVar1 = (int *)(param_3 + uVar2 * 4);\n      *piVar1 = *piVar1 - uVar4;\n      bVar5 = uVar2 != param_4 - 1;\n      uVar2 = uVar2 + 1;\n    } while (bVar5);\n  }\n  return;\n}"
    },
    {
        "task_id": 152,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(long param_1,long param_2,long param_3,uint param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int *piVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  long lVar10;\n  ulong uVar11;\n  bool bVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  \n  if (0 < (int)param_4) {\n    if (((ulong)((param_1 + 0xf) - param_3) < 0x1f || param_4 - 1 < 3) ||\n       ((ulong)((param_2 + 0xf) - param_3) < 0x1f)) {\n      uVar11 = 0;\n      do {\n        uVar13 = *(int *)(param_1 + uVar11 * 4) - *(int *)(param_2 + uVar11 * 4);\n        uVar14 = (int)uVar13 >> 0x1f;\n        *(uint *)(param_3 + uVar11 * 4) = uVar13 ^ uVar14;\n        piVar1 = (int *)(param_3 + uVar11 * 4);\n        *piVar1 = *piVar1 - uVar14;\n        bVar12 = uVar11 != param_4 - 1;\n        uVar11 = uVar11 + 1;\n      } while (bVar12);\n    }\n    else {\n      lVar10 = 0;\n      do {\n        piVar1 = (int *)(param_1 + lVar10);\n        iVar4 = piVar1[1];\n        iVar5 = piVar1[2];\n        iVar6 = piVar1[3];\n        piVar2 = (int *)(param_2 + lVar10);\n        iVar7 = piVar2[1];\n        iVar8 = piVar2[2];\n        iVar9 = piVar2[3];\n        uVar13 = *piVar1 - *piVar2 >> 0x1f;\n        uVar14 = iVar4 - iVar7 >> 0x1f;\n        uVar15 = iVar5 - iVar8 >> 0x1f;\n        uVar16 = iVar6 - iVar9 >> 0x1f;\n        piVar3 = (int *)(param_3 + lVar10);\n        *piVar3 = (*piVar1 - *piVar2 ^ uVar13) - uVar13;\n        piVar3[1] = (iVar4 - iVar7 ^ uVar14) - uVar14;\n        piVar3[2] = (iVar5 - iVar8 ^ uVar15) - uVar15;\n        piVar3[3] = (iVar6 - iVar9 ^ uVar16) - uVar16;\n        lVar10 = lVar10 + 0x10;\n      } while (lVar10 != (ulong)(param_4 >> 2) << 4);\n      uVar13 = param_4 & 0xfffffffc;\n      if ((param_4 & 3) != 0) {\n        uVar11 = (ulong)uVar13;\n        uVar14 = *(int *)(param_1 + uVar11 * 4) - *(int *)(param_2 + uVar11 * 4);\n        uVar15 = (int)uVar14 >> 0x1f;\n        *(uint *)(param_3 + uVar11 * 4) = uVar14 ^ uVar15;\n        piVar1 = (int *)(param_3 + uVar11 * 4);\n        *piVar1 = *piVar1 - uVar15;\n        if ((int)(uVar13 + 1) < (int)param_4) {\n          lVar10 = (long)(int)(uVar13 + 1);\n          uVar14 = *(int *)(param_1 + lVar10 * 4) - *(int *)(param_2 + lVar10 * 4);\n          uVar15 = (int)uVar14 >> 0x1f;\n          *(uint *)(param_3 + lVar10 * 4) = uVar14 ^ uVar15;\n          piVar1 = (int *)(param_3 + lVar10 * 4);\n          *piVar1 = *piVar1 - uVar15;\n          if ((int)(uVar13 + 2) < (int)param_4) {\n            lVar10 = (long)(int)(uVar13 + 2);\n            uVar13 = *(int *)(param_1 + lVar10 * 4) - *(int *)(param_2 + lVar10 * 4);\n            uVar14 = (int)uVar13 >> 0x1f;\n            *(uint *)(param_3 + lVar10 * 4) = uVar13 ^ uVar14;\n            piVar1 = (int *)(param_3 + lVar10 * 4);\n            *piVar1 = *piVar1 - uVar14;\n            return;\n          }\n        }\n      }\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 153,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined8 param_1,long param_2,int param_3,char *param_4)\n\n{\n  char cVar1;\n  long lVar2;\n  int local_28;\n  int local_24;\n  int local_20;\n  int local_1c;\n  long local_18;\n  \n  local_28 = -1000;\n  local_18 = 0;\n  for (local_24 = 0; local_24 < param_3; local_24 = local_24 + 1) {\n    lVar2 = *(long *)(param_2 + (long)local_24 * 8);\n    local_20 = 0;\n    for (local_1c = 0; *(char *)(lVar2 + local_1c) != '\\0'; local_1c = local_1c + 1) {\n      cVar1 = *(char *)(lVar2 + local_1c);\n      if (('@' < cVar1) && (cVar1 < '[')) {\n        local_20 = local_20 + 1;\n      }\n      if (('`' < cVar1) && (cVar1 < '{')) {\n        local_20 = local_20 + -1;\n      }\n    }\n    if (local_28 < local_20) {\n      local_28 = local_20;\n      local_18 = lVar2;\n    }\n  }\n  sprintf(param_4,\"%s.%s\",param_1,local_18);\n  return;\n}"
    },
    {
        "task_id": 153,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined8 param_1,char **param_2,int param_3,undefined8 param_4)\n\n{\n  char **ppcVar1;\n  char cVar2;\n  char *pcVar3;\n  int iVar4;\n  char *pcVar5;\n  int iVar6;\n  char *pcVar7;\n  \n  if (param_3 < 1) {\n    pcVar7 = (char *)0x0;\n  }\n  else {\n    ppcVar1 = param_2 + (ulong)(param_3 - 1) + 1;\n    pcVar7 = (char *)0x0;\n    iVar6 = -1000;\n    do {\n      pcVar3 = *param_2;\n      cVar2 = *pcVar3;\n      if (cVar2 == '\\0') {\n        iVar4 = 0;\n      }\n      else {\n        iVar4 = 0;\n        pcVar5 = pcVar3;\n        do {\n          pcVar5 = pcVar5 + 1;\n          if ((byte)(cVar2 + 0xbfU) < 0x1a) {\n            iVar4 = iVar4 + 1;\n          }\n          else {\n            iVar4 = iVar4 - (uint)((byte)(cVar2 + 0x9fU) < 0x1a);\n          }\n          cVar2 = *pcVar5;\n        } while (cVar2 != '\\0');\n      }\n      if (iVar6 < iVar4) {\n        pcVar7 = pcVar3;\n        iVar6 = iVar4;\n      }\n      param_2 = param_2 + 1;\n    } while (param_2 != ppcVar1);\n  }\n  __sprintf_chk(param_4,1,0xffffffffffffffff,\"%s.%s\",param_1,pcVar7);\n  return;\n}"
    },
    {
        "task_id": 153,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined8 param_1,char **param_2,int param_3,undefined8 param_4)\n\n{\n  char **ppcVar1;\n  char *pcVar2;\n  char cVar3;\n  int iVar4;\n  char *pcVar5;\n  int iVar6;\n  char *pcVar7;\n  \n  if (param_3 < 1) {\n    pcVar7 = (char *)0x0;\n  }\n  else {\n    pcVar7 = (char *)0x0;\n    iVar6 = -1000;\n    ppcVar1 = param_2 + (ulong)(param_3 - 1) + 1;\n    do {\n      pcVar2 = *param_2;\n      cVar3 = *pcVar2;\n      if (cVar3 == '\\0') {\n        iVar4 = 0;\n      }\n      else {\n        pcVar5 = pcVar2 + 1;\n        iVar4 = 0;\n        do {\n          while (0x19 < (byte)(cVar3 + 0xbfU)) {\n            iVar4 = iVar4 - (uint)((byte)(cVar3 + 0x9fU) < 0x1a);\n            cVar3 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n            if (cVar3 == '\\0') goto LAB_001017b2;\n          }\n          cVar3 = *pcVar5;\n          pcVar5 = pcVar5 + 1;\n          iVar4 = iVar4 + 1;\n        } while (cVar3 != '\\0');\n      }\nLAB_001017b2:\n      if (iVar6 < iVar4) {\n        pcVar7 = pcVar2;\n        iVar6 = iVar4;\n      }\n      param_2 = param_2 + 1;\n    } while (param_2 != ppcVar1);\n  }\n  __sprintf_chk(param_4,1,0xffffffffffffffff,\"%s.%s\",param_1,pcVar7);\n  return;\n}"
    },
    {
        "task_id": 153,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(undefined8 param_1,char **param_2,int param_3,undefined8 param_4)\n\n{\n  char **ppcVar1;\n  char *pcVar2;\n  char cVar3;\n  int iVar4;\n  char *pcVar5;\n  int iVar6;\n  char *pcVar7;\n  \n  if (param_3 < 1) {\n    pcVar7 = (char *)0x0;\n  }\n  else {\n    pcVar7 = (char *)0x0;\n    iVar6 = -1000;\n    ppcVar1 = param_2 + (ulong)(param_3 - 1) + 1;\n    do {\n      pcVar2 = *param_2;\n      cVar3 = *pcVar2;\n      if (cVar3 == '\\0') {\n        iVar4 = 0;\n      }\n      else {\n        pcVar5 = pcVar2 + 1;\n        iVar4 = 0;\n        do {\n          while (0x19 < (byte)(cVar3 + 0xbfU)) {\n            iVar4 = iVar4 - (uint)((byte)(cVar3 + 0x9fU) < 0x1a);\n            cVar3 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n            if (cVar3 == '\\0') goto LAB_00101832;\n          }\n          cVar3 = *pcVar5;\n          pcVar5 = pcVar5 + 1;\n          iVar4 = iVar4 + 1;\n        } while (cVar3 != '\\0');\n      }\nLAB_00101832:\n      if (iVar6 < iVar4) {\n        pcVar7 = pcVar2;\n        iVar6 = iVar4;\n      }\n      param_2 = param_2 + 1;\n    } while (param_2 != ppcVar1);\n  }\n  __sprintf_chk(param_4,1,0xffffffffffffffff,\"%s.%s\",param_1,pcVar7);\n  return;\n}"
    },
    {
        "task_id": 154,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *__dest;\n  char *pcVar3;\n  int local_1c;\n  \n  strlen(param_1);\n  sVar2 = strlen(param_2);\n  iVar1 = (int)sVar2;\n  __dest = (char *)malloc((long)(iVar1 * 2 + 1));\n  local_1c = 0;\n  while( true ) {\n    if (iVar1 <= local_1c) {\n      free(__dest);\n      return 0;\n    }\n    strncpy(__dest,param_2 + local_1c,(long)(iVar1 - local_1c));\n    strncpy(__dest + ((long)iVar1 - (long)local_1c),param_2,(long)local_1c);\n    __dest[iVar1] = '\\0';\n    pcVar3 = strstr(param_1,__dest);\n    if (pcVar3 != (char *)0x0) break;\n    local_1c = local_1c + 1;\n  }\n  free(__dest);\n  return 1;\n}"
    },
    {
        "task_id": 154,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  char *pcVar4;\n  char *pcVar5;\n  long lVar6;\n  size_t __n;\n  bool bVar7;\n  \n  lVar6 = -1;\n  pcVar4 = param_2;\n  do {\n    if (lVar6 == 0) break;\n    lVar6 = lVar6 + -1;\n    cVar1 = *pcVar4;\n    pcVar4 = pcVar4 + 1;\n  } while (cVar1 != '\\0');\n  uVar3 = ~(uint)lVar6;\n  iVar2 = uVar3 - 1;\n  pcVar4 = (char *)malloc((long)(int)(uVar3 + iVar2));\n  if (0 < iVar2) {\n    lVar6 = (long)iVar2;\n    __n = 0;\n    do {\n      strncpy(pcVar4,param_2 + __n,lVar6 - __n);\n      strncpy(pcVar4 + (lVar6 - __n),param_2,__n);\n      pcVar4[lVar6] = '\\0';\n      pcVar5 = strstr(param_1,pcVar4);\n      if (pcVar5 != (char *)0x0) {\n        free(pcVar4);\n        return 1;\n      }\n      bVar7 = __n != uVar3 - 2;\n      __n = __n + 1;\n    } while (bVar7);\n  }\n  free(pcVar4);\n  return 0;\n}"
    },
    {
        "task_id": 154,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *__dest;\n  char *pcVar3;\n  bool bVar4;\n  \n  sVar2 = strlen(param_2);\n  iVar1 = (int)sVar2;\n  __dest = (char *)malloc((long)(iVar1 * 2 + 1));\n  if (0 < iVar1) {\n    sVar2 = 0;\n    do {\n      strncpy(__dest,param_2 + sVar2,(long)iVar1 - sVar2);\n      strncpy(__dest + iVar1 + -sVar2,param_2,sVar2);\n      __dest[iVar1] = '\\0';\n      pcVar3 = strstr(param_1,__dest);\n      if (pcVar3 != (char *)0x0) {\n        free(__dest);\n        return 1;\n      }\n      bVar4 = sVar2 != iVar1 - 1;\n      sVar2 = sVar2 + 1;\n    } while (bVar4);\n  }\n  free(__dest);\n  return 0;\n}"
    },
    {
        "task_id": 154,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
        "c_test": "#include <assert.h>\n#include <stdbool.h>\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(char *param_1,char *param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  char *__dest;\n  char *pcVar3;\n  bool bVar4;\n  \n  sVar2 = strlen(param_2);\n  iVar1 = (int)sVar2;\n  __dest = (char *)malloc((long)(iVar1 * 2 + 1));\n  if (0 < iVar1) {\n    sVar2 = 0;\n    do {\n      strncpy(__dest,param_2 + sVar2,(long)iVar1 - sVar2);\n      strncpy(__dest + iVar1 + -sVar2,param_2,sVar2);\n      __dest[iVar1] = '\\0';\n      pcVar3 = strstr(param_1,__dest);\n      if (pcVar3 != (char *)0x0) {\n        free(__dest);\n        return 1;\n      }\n      bVar4 = sVar2 != iVar1 - 1;\n      sVar2 = sVar2 + 1;\n    } while (bVar4);\n  }\n  free(__dest);\n  return 0;\n}"
    },
    {
        "task_id": 155,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2)\n\n{\n  int local_1c;\n  int local_14;\n  int local_10;\n  \n  local_14 = 0;\n  local_10 = 0;\n  local_1c = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  do {\n    if ((local_1c % 10 & 1U) == 0) {\n      local_14 = local_14 + 1;\n    }\n    else {\n      local_10 = local_10 + 1;\n    }\n    local_1c = local_1c / 10;\n  } while (0 < local_1c);\n  *param_2 = local_14;\n  param_2[1] = local_10;\n  return;\n}"
    },
    {
        "task_id": 155,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  \n  iVar2 = 0;\n  iVar4 = 0;\n  uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  do {\n    if ((uVar3 & 1) == 0) {\n      iVar4 = iVar4 + 1;\n    }\n    else {\n      iVar2 = iVar2 + 1;\n    }\n    bVar1 = 9 < (int)uVar3;\n    uVar3 = (int)uVar3 / 10;\n  } while (bVar1);\n  *param_2 = iVar4;\n  param_2[1] = iVar2;\n  return;\n}"
    },
    {
        "task_id": 155,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  iVar2 = 0;\n  iVar1 = 0;\n  uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while( true ) {\n    if ((uVar3 & 1) == 0) {\n      iVar1 = iVar1 + 1;\n    }\n    else {\n      iVar2 = iVar2 + 1;\n    }\n    if ((int)uVar3 < 10) break;\n    uVar3 = uVar3 / 10;\n  }\n  *param_2 = iVar1;\n  param_2[1] = iVar2;\n  return;\n}"
    },
    {
        "task_id": 155,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,int *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  iVar2 = 0;\n  iVar1 = 0;\n  uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while( true ) {\n    if ((uVar3 & 1) == 0) {\n      iVar1 = iVar1 + 1;\n    }\n    else {\n      iVar2 = iVar2 + 1;\n    }\n    if ((int)uVar3 < 10) break;\n    uVar3 = uVar3 / 10;\n  }\n  *param_2 = iVar1;\n  param_2[1] = iVar2;\n  return;\n}"
    },
    {
        "task_id": 156,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,char *param_2)\n\n{\n  long in_FS_OFFSET;\n  int local_cc;\n  int local_bc;\n  int local_b8 [4];\n  undefined4 local_a8;\n  undefined4 local_a4;\n  undefined4 local_a0;\n  undefined4 local_9c;\n  undefined4 local_98;\n  undefined4 local_94;\n  undefined4 local_90;\n  undefined4 local_8c;\n  undefined4 local_88;\n  char *local_78 [4];\n  undefined *local_58;\n  undefined *local_50;\n  undefined *local_48;\n  undefined *local_40;\n  undefined *local_38;\n  undefined *local_30;\n  undefined *local_28;\n  undefined *local_20;\n  undefined *local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_78[0] = \"m\";\n  local_78[1] = &DAT_00102006;\n  local_78[2] = &DAT_00102009;\n  local_78[3] = &DAT_0010200b;\n  local_58 = &DAT_0010200e;\n  local_50 = &DAT_00102010;\n  local_48 = &DAT_00102013;\n  local_40 = &DAT_00102015;\n  local_38 = &DAT_00102018;\n  local_30 = &DAT_0010201a;\n  local_28 = &DAT_0010201d;\n  local_20 = &DAT_0010201f;\n  local_18 = &DAT_00102022;\n  local_b8[0] = 1000;\n  local_b8[1] = 900;\n  local_b8[2] = 500;\n  local_b8[3] = 400;\n  local_a8 = 100;\n  local_a4 = 0x5a;\n  local_a0 = 0x32;\n  local_9c = 0x28;\n  local_98 = 10;\n  local_94 = 9;\n  local_90 = 5;\n  local_8c = 4;\n  local_88 = 1;\n  local_bc = 0;\n  *param_2 = '\\0';\n  local_cc = param_1;\n  while (0 < local_cc) {\n    for (; local_b8[local_bc] <= local_cc; local_cc = local_cc - local_b8[local_bc]) {\n      strcat(param_2,local_78[local_bc]);\n    }\n    if (0 < local_cc) {\n      local_bc = local_bc + 1;\n    }\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 156,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,char *param_2)\n\n{\n  int iVar1;\n  char **ppcVar2;\n  int *piVar3;\n  long in_FS_OFFSET;\n  int local_d8 [4];\n  undefined4 local_c8;\n  undefined4 local_c4;\n  undefined4 local_c0;\n  undefined4 local_bc;\n  undefined4 local_b8;\n  undefined4 local_b4;\n  undefined4 local_b0;\n  undefined4 local_ac;\n  undefined4 local_a8;\n  char *local_98 [4];\n  undefined *local_78;\n  undefined1 *local_70;\n  undefined *local_68;\n  undefined *local_60;\n  undefined *local_58;\n  undefined *local_50;\n  undefined *local_48;\n  undefined1 *local_40;\n  undefined1 *local_38;\n  long local_30;\n  \n  piVar3 = local_d8;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_98[0] = \"m\";\n  local_98[1] = &DAT_00102004;\n  local_98[2] = &DAT_00102008;\n  local_98[3] = &DAT_00102007;\n  local_78 = &DAT_0010202c;\n  local_70 = &DAT_0010200a;\n  local_68 = &DAT_0010200e;\n  local_60 = &DAT_0010200d;\n  local_58 = &DAT_00102012;\n  local_50 = &DAT_00102011;\n  local_48 = &DAT_00102199;\n  local_40 = &DAT_00102198;\n  local_38 = &DAT_00102100;\n  local_d8[0] = 1000;\n  local_d8[1] = 900;\n  local_d8[2] = 500;\n  local_d8[3] = 400;\n  local_c8 = 100;\n  local_c4 = 0x5a;\n  local_c0 = 0x32;\n  local_bc = 0x28;\n  local_b8 = 10;\n  local_b4 = 9;\n  local_b0 = 5;\n  local_ac = 4;\n  local_a8 = 1;\n  *param_2 = '\\0';\n  if (0 < param_1) {\n    ppcVar2 = local_98;\n    do {\n      iVar1 = *piVar3;\n      for (; iVar1 <= param_1; param_1 = param_1 - iVar1) {\n        strcat(param_2,*ppcVar2);\n      }\n      piVar3 = piVar3 + 1;\n      ppcVar2 = ppcVar2 + 1;\n    } while (0 < param_1);\n  }\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 156,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,char *param_2)\n\n{\n  char *__src;\n  int iVar1;\n  long lVar2;\n  long lVar3;\n  long in_FS_OFFSET;\n  undefined8 local_d4;\n  undefined8 local_cc;\n  undefined8 local_c4;\n  undefined8 local_bc;\n  undefined8 local_b4;\n  undefined8 local_ac;\n  char *local_98 [4];\n  undefined *local_78;\n  undefined *local_70;\n  undefined *local_68;\n  undefined *local_60;\n  undefined *local_58;\n  undefined *local_50;\n  undefined *local_48;\n  undefined *local_40;\n  undefined *local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  *param_2 = '\\0';\n  local_98[0] = \"m\";\n  local_98[1] = &DAT_00102004;\n  local_98[2] = &DAT_00102008;\n  local_98[3] = &DAT_00102007;\n  local_78 = &DAT_0010202c;\n  local_70 = &DAT_0010200a;\n  local_68 = &DAT_0010200e;\n  local_60 = &DAT_0010200d;\n  local_58 = &DAT_00102012;\n  local_50 = &DAT_00102011;\n  local_48 = &DAT_00102199;\n  local_40 = &DAT_00102198;\n  local_38 = &DAT_00102100;\n  local_d4 = 0x1f400000384;\n  local_cc = 0x6400000190;\n  local_c4 = 0x320000005a;\n  local_bc = 0xa00000028;\n  local_b4 = 0x500000009;\n  local_ac = 0x100000004;\n  if (0 < param_1) {\n    iVar1 = 1000;\n    lVar2 = 0;\n    lVar3 = lVar2;\n    if (param_1 < 1000) goto LAB_00101684;\n    while( true ) {\n      __src = *(char **)((long)local_98 + lVar2 * 2);\n      do {\n        param_1 = param_1 - iVar1;\n        param_2 = strcat(param_2,__src);\n      } while (iVar1 <= param_1);\n      lVar3 = lVar2;\n      if (param_1 == 0) break;\nLAB_00101684:\n      do {\n        lVar2 = lVar3 + 4;\n        iVar1 = *(int *)((long)&local_d4 + lVar3);\n        lVar3 = lVar2;\n      } while (param_1 < iVar1);\n    }\n  }\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 156,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,char *param_2)\n\n{\n  int iVar1;\n  char *__src;\n  long lVar2;\n  long in_FS_OFFSET;\n  int local_e8 [4];\n  undefined4 local_d8;\n  undefined4 uStack_d4;\n  undefined4 uStack_d0;\n  undefined4 uStack_cc;\n  undefined4 local_c8;\n  undefined4 uStack_c4;\n  undefined4 uStack_c0;\n  undefined4 uStack_bc;\n  undefined4 local_b8;\n  char *local_a8 [4];\n  undefined *local_88;\n  undefined *puStack_80;\n  undefined *local_78;\n  undefined *puStack_70;\n  undefined *local_68;\n  undefined *puStack_60;\n  undefined *local_58;\n  undefined *puStack_50;\n  undefined *local_48;\n  long local_40;\n  \n  lVar2 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  *param_2 = '\\0';\n  local_b8 = 1;\n  local_a8[0] = \"m\";\n  local_a8[1] = &DAT_00102004;\n  local_a8[2] = &DAT_00102008;\n  local_a8[3] = &DAT_00102007;\n  local_88 = &DAT_0010202c;\n  puStack_80 = &DAT_0010200a;\n  local_78 = &DAT_0010200e;\n  puStack_70 = &DAT_0010200d;\n  local_68 = &DAT_00102012;\n  puStack_60 = &DAT_00102011;\n  local_48 = &DAT_00102100;\n  local_58 = &DAT_00102199;\n  puStack_50 = &DAT_00102198;\n  local_e8[0] = _DAT_001021e0;\n  local_e8[1] = _UNK_001021e4;\n  local_e8[2] = _UNK_001021e8;\n  local_e8[3] = _UNK_001021ec;\n  local_d8 = _DAT_001021f0;\n  uStack_d4 = _UNK_001021f4;\n  uStack_d0 = _UNK_001021f8;\n  uStack_cc = _UNK_001021fc;\n  local_c8 = _DAT_00102200;\n  uStack_c4 = _UNK_00102204;\n  uStack_c0 = _UNK_00102208;\n  uStack_bc = _UNK_0010220c;\n  if (0 < param_1) {\n    do {\n      for (; iVar1 = local_e8[lVar2], param_1 < iVar1; lVar2 = lVar2 + 1) {\n      }\n      __src = local_a8[lVar2];\n      do {\n        param_1 = param_1 - iVar1;\n        param_2 = strcat(param_2,__src);\n      } while (iVar1 <= param_1);\n      lVar2 = lVar2 + 1;\n    } while (param_1 != 0);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}"
    },
    {
        "task_id": 157,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined8 func0(float param_1,float param_2,float param_3)\n\n{\n  undefined8 uVar1;\n  \n  if ((((double)(float)((uint)((param_1 * param_1 + param_2 * param_2) - param_3 * param_3) &\n                       DAT_00102120) < DAT_00102130) ||\n      ((double)(float)((uint)((param_1 * param_1 + param_3 * param_3) - param_2 * param_2) &\n                      DAT_00102120) < DAT_00102130)) ||\n     ((double)(float)((uint)((param_2 * param_2 + param_3 * param_3) - param_1 * param_1) &\n                     DAT_00102120) < DAT_00102130)) {\n    uVar1 = 1;\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}"
    },
    {
        "task_id": 157,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  bool bVar1;\n  \n  param_1 = param_1 * param_1;\n  param_2 = param_2 * param_2;\n  param_3 = param_3 * param_3;\n  bVar1 = true;\n  if ((DAT_00102020 <= (double)(float)((uint)((param_1 + param_2) - param_3) & _DAT_00102010)) &&\n     (DAT_00102020 <= (double)(float)((uint)((param_1 + param_3) - param_2) & _DAT_00102010))) {\n    bVar1 = (double)(float)((uint)((param_2 + param_3) - param_1) & _DAT_00102010) < DAT_00102020;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 157,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  bool bVar1;\n  \n  param_1 = param_1 * param_1;\n  bVar1 = true;\n  param_2 = param_2 * param_2;\n  param_3 = param_3 * param_3;\n  if ((DAT_00102020 <= (double)(float)((uint)((param_1 + param_2) - param_3) & DAT_00102010)) &&\n     (DAT_00102020 <= (double)(float)((uint)((param_1 + param_3) - param_2) & DAT_00102010))) {\n    bVar1 = (double)(float)((uint)((param_2 + param_3) - param_1) & DAT_00102010) < DAT_00102020;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 157,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "bool func0(float param_1,float param_2,float param_3)\n\n{\n  bool bVar1;\n  \n  param_1 = param_1 * param_1;\n  bVar1 = true;\n  param_2 = param_2 * param_2;\n  param_3 = param_3 * param_3;\n  if ((DAT_00102020 <= (double)(float)((uint)((param_1 + param_2) - param_3) & DAT_00102010)) &&\n     (DAT_00102020 <= (double)(float)((uint)((param_1 + param_3) - param_2) & DAT_00102010))) {\n    bVar1 = (double)(float)((uint)((param_2 + param_3) - param_1) & DAT_00102010) < DAT_00102020;\n  }\n  return bVar1;\n}"
    },
    {
        "task_id": 158,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(long param_1,int param_2)\n\n{\n  int iVar1;\n  char *pcVar2;\n  size_t sVar3;\n  long in_FS_OFFSET;\n  int local_134;\n  int local_130;\n  int local_12c;\n  int local_128;\n  char *local_120;\n  undefined8 local_118;\n  undefined8 local_110;\n  undefined8 local_108;\n  undefined8 local_100;\n  undefined8 local_f8;\n  undefined8 local_f0;\n  undefined8 local_e8;\n  undefined8 local_e0;\n  undefined8 local_d8;\n  undefined8 local_d0;\n  undefined8 local_c8;\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined8 local_88;\n  undefined8 local_80;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_120 = \"\";\n  local_134 = 0;\n  local_130 = 0;\n  do {\n    if (param_2 <= local_130) {\n      if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n      }\n      return local_120;\n    }\n    local_118 = 0;\n    local_110 = 0;\n    local_108 = 0;\n    local_100 = 0;\n    local_f8 = 0;\n    local_f0 = 0;\n    local_e8 = 0;\n    local_e0 = 0;\n    local_d8 = 0;\n    local_d0 = 0;\n    local_c8 = 0;\n    local_c0 = 0;\n    local_b8 = 0;\n    local_b0 = 0;\n    local_a8 = 0;\n    local_a0 = 0;\n    local_98 = 0;\n    local_90 = 0;\n    local_88 = 0;\n    local_80 = 0;\n    local_78 = 0;\n    local_70 = 0;\n    local_68 = 0;\n    local_60 = 0;\n    local_58 = 0;\n    local_50 = 0;\n    local_48 = 0;\n    local_40 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_12c = 0;\n    for (local_128 = 0;\n        *(char *)((long)local_128 + *(long *)(param_1 + (long)local_130 * 8)) != '\\0';\n        local_128 = local_128 + 1) {\n      pcVar2 = strchr((char *)&local_118,\n                      (int)*(char *)((long)local_128 + *(long *)(param_1 + (long)local_130 * 8)));\n      if (pcVar2 == (char *)0x0) {\n        sVar3 = strlen((char *)&local_118);\n        *(undefined *)((long)&local_118 + (long)(int)sVar3) =\n             *(undefined *)((long)local_128 + *(long *)(param_1 + (long)local_130 * 8));\n        *(undefined *)((long)&local_118 + (long)((int)sVar3 + 1)) = 0;\n        local_12c = local_12c + 1;\n      }\n    }\n    if (local_134 < local_12c) {\nLAB_001014a0:\n      local_120 = *(char **)(param_1 + (long)local_130 * 8);\n      local_134 = local_12c;\n    }\n    else if (local_12c == local_134) {\n      iVar1 = strcmp(*(char **)(param_1 + (long)local_130 * 8),local_120);\n      if (iVar1 < 0) goto LAB_001014a0;\n    }\n    local_130 = local_130 + 1;\n  } while( true );\n}"
    },
    {
        "task_id": 158,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char cVar2;\n  char *__s1;\n  int iVar3;\n  int iVar4;\n  char *pcVar5;\n  long lVar6;\n  char cVar7;\n  char *pcVar8;\n  undefined8 *puVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  byte bVar11;\n  int local_15c;\n  char *local_158;\n  undefined8 local_148;\n  undefined8 local_140;\n  undefined8 local_138;\n  undefined8 local_130;\n  undefined8 local_128;\n  undefined8 local_120;\n  undefined8 local_118;\n  undefined8 local_110;\n  undefined8 local_108;\n  undefined8 local_100;\n  undefined8 local_f8;\n  undefined8 local_f0;\n  undefined8 local_e8;\n  undefined8 local_e0;\n  undefined8 local_d8;\n  undefined8 local_d0;\n  undefined8 local_c8;\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined8 local_88;\n  undefined8 local_80;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  long local_40;\n  \n  bVar11 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_158 = \"\";\n  if (0 < param_2) {\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    local_15c = 0;\n    do {\n      local_148 = 0;\n      local_140 = 0;\n      local_138 = 0;\n      local_130 = 0;\n      local_128 = 0;\n      local_120 = 0;\n      local_118 = 0;\n      local_110 = 0;\n      local_108 = 0;\n      local_100 = 0;\n      local_f8 = 0;\n      local_f0 = 0;\n      local_e8 = 0;\n      local_e0 = 0;\n      local_d8 = 0;\n      local_d0 = 0;\n      local_c8 = 0;\n      local_c0 = 0;\n      local_b8 = 0;\n      local_b0 = 0;\n      local_a8 = 0;\n      local_a0 = 0;\n      local_98 = 0;\n      local_90 = 0;\n      local_88 = 0;\n      local_80 = 0;\n      local_78 = 0;\n      local_70 = 0;\n      local_68 = 0;\n      local_60 = 0;\n      local_58 = 0;\n      local_50 = 0;\n      __s1 = *param_1;\n      cVar7 = *__s1;\n      if (cVar7 == '\\0') {\n        iVar10 = 0;\n      }\n      else {\n        iVar10 = 0;\n        pcVar8 = __s1;\n        do {\n          pcVar8 = pcVar8 + 1;\n          pcVar5 = strchr((char *)&local_148,(int)cVar7);\n          if (pcVar5 == (char *)0x0) {\n            lVar6 = -1;\n            puVar9 = &local_148;\n            do {\n              if (lVar6 == 0) break;\n              lVar6 = lVar6 + -1;\n              cVar2 = *(char *)puVar9;\n              puVar9 = (undefined8 *)((long)puVar9 + (ulong)bVar11 * -2 + 1);\n            } while (cVar2 != '\\0');\n            *(char *)((long)&local_148 + (long)(int)(~(uint)lVar6 - 1)) = cVar7;\n            *(undefined *)((long)&local_148 + (long)(int)~(uint)lVar6) = 0;\n            iVar10 = iVar10 + 1;\n          }\n          cVar7 = *pcVar8;\n        } while (cVar7 != '\\0');\n      }\n      iVar3 = iVar10;\n      pcVar8 = __s1;\n      if (((iVar10 <= local_15c) && (iVar3 = local_15c, pcVar8 = local_158, local_15c == iVar10)) &&\n         (iVar4 = strcmp(__s1,local_158), iVar3 = iVar10, pcVar8 = __s1, -1 < iVar4)) {\n        iVar3 = local_15c;\n        pcVar8 = local_158;\n      }\n      local_158 = pcVar8;\n      local_15c = iVar3;\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_158;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}"
    },
    {
        "task_id": 158,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__s1;\n  int iVar2;\n  char *pcVar3;\n  uint *puVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  char *pcVar9;\n  char cVar10;\n  long in_FS_OFFSET;\n  bool bVar11;\n  int local_15c;\n  char *local_150;\n  undefined local_148 [16];\n  undefined local_138 [16];\n  undefined local_128 [16];\n  undefined local_118 [16];\n  undefined local_108 [16];\n  undefined local_f8 [16];\n  undefined local_e8 [16];\n  undefined local_d8 [16];\n  undefined local_c8 [16];\n  undefined local_b8 [16];\n  undefined local_a8 [16];\n  undefined local_98 [16];\n  undefined local_88 [16];\n  undefined local_78 [16];\n  undefined local_68 [16];\n  undefined local_58 [16];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_150 = \"\";\n  if (0 < param_2) {\n    local_15c = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s1 = *param_1;\n      local_148 = (undefined  [16])0x0;\n      cVar10 = *__s1;\n      local_138 = (undefined  [16])0x0;\n      local_128 = (undefined  [16])0x0;\n      local_118 = (undefined  [16])0x0;\n      local_108 = (undefined  [16])0x0;\n      local_f8 = (undefined  [16])0x0;\n      local_e8 = (undefined  [16])0x0;\n      local_d8 = (undefined  [16])0x0;\n      local_c8 = (undefined  [16])0x0;\n      local_b8 = (undefined  [16])0x0;\n      local_a8 = (undefined  [16])0x0;\n      local_98 = (undefined  [16])0x0;\n      local_88 = (undefined  [16])0x0;\n      local_78 = (undefined  [16])0x0;\n      local_68 = (undefined  [16])0x0;\n      local_58 = (undefined  [16])0x0;\n      if (cVar10 == '\\0') {\n        iVar8 = 0;\n      }\n      else {\n        iVar8 = 0;\n        pcVar9 = __s1 + 1;\n        do {\n          while (pcVar3 = strchr(local_148,(int)cVar10), puVar5 = (uint *)local_148,\n                pcVar3 == (char *)0x0) {\n            do {\n              puVar4 = puVar5;\n              uVar6 = *puVar4 + 0xfefefeff & ~*puVar4;\n              uVar7 = uVar6 & 0x80808080;\n              puVar5 = puVar4 + 1;\n            } while (uVar7 == 0);\n            bVar11 = (uVar6 & 0x8080) == 0;\n            if (bVar11) {\n              uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar11) {\n              puVar5 = (uint *)((long)puVar4 + 6);\n            }\n            iVar8 = iVar8 + 1;\n            iVar2 = (((int)puVar5 + -3) - (uint)CARRY1((byte)uVar7,(byte)uVar7)) - (int)local_148;\n            local_148[iVar2] = cVar10;\n            cVar10 = *pcVar9;\n            local_148[iVar2 + 1] = 0;\n            pcVar9 = pcVar9 + 1;\n            if (cVar10 == '\\0') goto LAB_001017ce;\n          }\n          cVar10 = *pcVar9;\n          pcVar9 = pcVar9 + 1;\n        } while (cVar10 != '\\0');\n      }\nLAB_001017ce:\n      iVar2 = iVar8;\n      pcVar9 = __s1;\n      if (((iVar8 <= local_15c) && (iVar2 = local_15c, pcVar9 = local_150, local_15c == iVar8)) &&\n         (iVar8 = strcmp(__s1,local_150), pcVar9 = __s1, -1 < iVar8)) {\n        pcVar9 = local_150;\n      }\n      local_150 = pcVar9;\n      local_15c = iVar2;\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_150;\n}"
    },
    {
        "task_id": 158,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char **param_1,int param_2)\n\n{\n  char **ppcVar1;\n  char *__s1;\n  int iVar2;\n  int iVar3;\n  char *pcVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  char *pcVar9;\n  char cVar10;\n  long in_FS_OFFSET;\n  bool bVar11;\n  int local_15c;\n  char *local_150;\n  undefined local_148 [16];\n  undefined local_138 [16];\n  undefined local_128 [16];\n  undefined local_118 [16];\n  undefined local_108 [16];\n  undefined local_f8 [16];\n  undefined local_e8 [16];\n  undefined local_d8 [16];\n  undefined local_c8 [16];\n  undefined local_b8 [16];\n  undefined local_a8 [16];\n  undefined local_98 [16];\n  undefined local_88 [16];\n  undefined local_78 [16];\n  undefined local_68 [16];\n  undefined local_58 [16];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_150 = \"\";\n  if (0 < param_2) {\n    local_15c = 0;\n    ppcVar1 = param_1 + (ulong)(param_2 - 1) + 1;\n    do {\n      __s1 = *param_1;\n      local_148 = (undefined  [16])0x0;\n      cVar10 = *__s1;\n      local_138 = (undefined  [16])0x0;\n      local_128 = (undefined  [16])0x0;\n      local_118 = (undefined  [16])0x0;\n      local_108 = (undefined  [16])0x0;\n      local_f8 = (undefined  [16])0x0;\n      local_e8 = (undefined  [16])0x0;\n      local_d8 = (undefined  [16])0x0;\n      local_c8 = (undefined  [16])0x0;\n      local_b8 = (undefined  [16])0x0;\n      local_a8 = (undefined  [16])0x0;\n      local_98 = (undefined  [16])0x0;\n      local_88 = (undefined  [16])0x0;\n      local_78 = (undefined  [16])0x0;\n      local_68 = (undefined  [16])0x0;\n      local_58 = (undefined  [16])0x0;\n      if (cVar10 == '\\0') {\n        iVar2 = 0;\n      }\n      else {\n        iVar2 = 0;\n        pcVar9 = __s1 + 1;\n        do {\n          while (pcVar4 = strchr(local_148,(int)cVar10), puVar6 = (uint *)local_148,\n                pcVar4 != (char *)0x0) {\n            cVar10 = *pcVar9;\n            pcVar9 = pcVar9 + 1;\n            if (cVar10 == '\\0') goto joined_r0x00101887;\n          }\n          do {\n            puVar5 = puVar6;\n            uVar7 = *puVar5 + 0xfefefeff & ~*puVar5;\n            uVar8 = uVar7 & 0x80808080;\n            puVar6 = puVar5 + 1;\n          } while (uVar8 == 0);\n          bVar11 = (uVar7 & 0x8080) == 0;\n          if (bVar11) {\n            uVar8 = uVar8 >> 0x10;\n          }\n          if (bVar11) {\n            puVar6 = (uint *)((long)puVar5 + 6);\n          }\n          iVar2 = iVar2 + 1;\n          iVar3 = (((int)puVar6 + -3) - (uint)CARRY1((byte)uVar8,(byte)uVar8)) - (int)local_148;\n          local_148[iVar3] = cVar10;\n          local_148[iVar3 + 1] = 0;\n          cVar10 = *pcVar9;\n          pcVar9 = pcVar9 + 1;\n        } while (cVar10 != '\\0');\n      }\njoined_r0x00101887:\n      iVar3 = iVar2;\n      pcVar9 = __s1;\n      if (((iVar2 <= local_15c) && (iVar3 = local_15c, pcVar9 = local_150, local_15c == iVar2)) &&\n         (iVar2 = strcmp(__s1,local_150), pcVar9 = __s1, -1 < iVar2)) {\n        pcVar9 = local_150;\n      }\n      local_150 = pcVar9;\n      local_15c = iVar3;\n      param_1 = param_1 + 1;\n    } while (param_1 != ppcVar1);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return local_150;\n}"
    },
    {
        "task_id": 159,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,int param_3,int *param_4)\n\n{\n  if (param_3 < param_2) {\n    *param_4 = param_1 + param_3;\n    param_4[1] = 0;\n  }\n  else {\n    *param_4 = param_1 + param_2;\n    param_4[1] = param_3 - param_2;\n  }\n  return;\n}"
    },
    {
        "task_id": 159,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,int param_3,int *param_4)\n\n{\n  if (param_3 < param_2) {\n    *param_4 = param_3 + param_1;\n    param_4[1] = 0;\n    return;\n  }\n  *param_4 = param_1 + param_2;\n  param_4[1] = param_3 - param_2;\n  return;\n}"
    },
    {
        "task_id": 159,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,int param_3,int *param_4)\n\n{\n  if (param_3 < param_2) {\n    param_4[1] = 0;\n    *param_4 = param_3 + param_1;\n    return;\n  }\n  *param_4 = param_1 + param_2;\n  param_4[1] = param_3 - param_2;\n  return;\n}"
    },
    {
        "task_id": 159,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
        "c_test": "#include <assert.h>\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}",
        "input_asm_prompt": "void func0(int param_1,int param_2,int param_3,int *param_4)\n\n{\n  if (param_3 < param_2) {\n    param_4[1] = 0;\n    *param_4 = param_1 + param_3;\n    return;\n  }\n  param_4[1] = param_3 - param_2;\n  *param_4 = param_1 + param_2;\n  return;\n}"
    },
    {
        "task_id": 160,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(long param_1,long param_2,int param_3,int param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined4 *__ptr;\n  void *__ptr_00;\n  double dVar3;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  \n  __ptr = (undefined4 *)malloc((long)param_4 << 2);\n  __ptr_00 = malloc((long)param_4 << 2);\n  for (local_2c = 0; local_2c < param_4; local_2c = local_2c + 1) {\n    __ptr[local_2c] = *(undefined4 *)(param_2 + (long)local_2c * 4);\n    *(int *)((long)local_2c * 4 + (long)__ptr_00) = local_2c;\n  }\n  for (local_28 = 0; local_28 < param_3; local_28 = local_28 + 1) {\n    iVar2 = strcmp(*(char **)(param_1 + (long)local_28 * 8),\"**\");\n    if (iVar2 == 0) {\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_28 * 4) * 4) !=\n             *(int *)((long)__ptr_00 + (long)local_28 * 4)) {\n        *(undefined4 *)((long)__ptr_00 + (long)local_28 * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_28 * 4) * 4);\n      }\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_28 + 1) * 4) * 4\n                     ) != *(int *)((long)__ptr_00 + ((long)local_28 + 1) * 4)) {\n        *(undefined4 *)((long)__ptr_00 + ((long)local_28 + 1) * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_28 + 1) * 4) * 4);\n      }\n      dVar3 = pow((double)__ptr[*(int *)((long)__ptr_00 + (long)local_28 * 4)],\n                  (double)__ptr[*(int *)((long)__ptr_00 + ((long)local_28 + 1) * 4)]);\n      __ptr[*(int *)((long)__ptr_00 + (long)local_28 * 4)] = (int)dVar3;\n      *(undefined4 *)((long)__ptr_00 + ((long)local_28 + 1) * 4) =\n           *(undefined4 *)((long)__ptr_00 + (long)local_28 * 4);\n    }\n  }\n  for (local_24 = 0; local_24 < param_3; local_24 = local_24 + 1) {\n    iVar2 = strcmp(*(char **)(param_1 + (long)local_24 * 8),\"*\");\n    if ((iVar2 == 0) || (iVar2 = strcmp(*(char **)(param_1 + (long)local_24 * 8),\"//\"), iVar2 == 0))\n    {\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_24 * 4) * 4) !=\n             *(int *)((long)__ptr_00 + (long)local_24 * 4)) {\n        *(undefined4 *)((long)__ptr_00 + (long)local_24 * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_24 * 4) * 4);\n      }\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_24 + 1) * 4) * 4\n                     ) != *(int *)((long)__ptr_00 + ((long)local_24 + 1) * 4)) {\n        *(undefined4 *)((long)__ptr_00 + ((long)local_24 + 1) * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_24 + 1) * 4) * 4);\n      }\n      iVar2 = strcmp(*(char **)(param_1 + (long)local_24 * 8),\"*\");\n      if (iVar2 == 0) {\n        __ptr[*(int *)((long)__ptr_00 + (long)local_24 * 4)] =\n             __ptr[*(int *)((long)__ptr_00 + ((long)local_24 + 1) * 4)] *\n             __ptr[*(int *)((long)__ptr_00 + (long)local_24 * 4)];\n      }\n      else {\n        __ptr[*(int *)((long)__ptr_00 + (long)local_24 * 4)] =\n             (int)__ptr[*(int *)((long)__ptr_00 + (long)local_24 * 4)] /\n             (int)__ptr[*(int *)((long)__ptr_00 + ((long)local_24 + 1) * 4)];\n      }\n      *(undefined4 *)((long)__ptr_00 + ((long)local_24 + 1) * 4) =\n           *(undefined4 *)((long)__ptr_00 + (long)local_24 * 4);\n    }\n  }\n  for (local_20 = 0; local_20 < param_3; local_20 = local_20 + 1) {\n    iVar2 = strcmp(*(char **)(param_1 + (long)local_20 * 8),\"+\");\n    if ((iVar2 == 0) || (iVar2 = strcmp(*(char **)(param_1 + (long)local_20 * 8),\"-\"), iVar2 == 0))\n    {\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_20 * 4) * 4) !=\n             *(int *)((long)__ptr_00 + (long)local_20 * 4)) {\n        *(undefined4 *)((long)__ptr_00 + (long)local_20 * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + (long)local_20 * 4) * 4);\n      }\n      while (*(int *)((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_20 + 1) * 4) * 4\n                     ) != *(int *)((long)__ptr_00 + ((long)local_20 + 1) * 4)) {\n        *(undefined4 *)((long)__ptr_00 + ((long)local_20 + 1) * 4) =\n             *(undefined4 *)\n              ((long)__ptr_00 + (long)*(int *)((long)__ptr_00 + ((long)local_20 + 1) * 4) * 4);\n      }\n      iVar2 = strcmp(*(char **)(param_1 + (long)local_20 * 8),\"+\");\n      if (iVar2 == 0) {\n        __ptr[*(int *)((long)__ptr_00 + (long)local_20 * 4)] =\n             __ptr[*(int *)((long)__ptr_00 + ((long)local_20 + 1) * 4)] +\n             __ptr[*(int *)((long)__ptr_00 + (long)local_20 * 4)];\n      }\n      else {\n        __ptr[*(int *)((long)__ptr_00 + (long)local_20 * 4)] =\n             __ptr[*(int *)((long)__ptr_00 + (long)local_20 * 4)] -\n             __ptr[*(int *)((long)__ptr_00 + ((long)local_20 + 1) * 4)];\n      }\n      *(undefined4 *)((long)__ptr_00 + ((long)local_20 + 1) * 4) =\n           *(undefined4 *)((long)__ptr_00 + (long)local_20 * 4);\n    }\n  }\n  uVar1 = *__ptr;\n  free(__ptr);\n  free(__ptr_00);\n  return uVar1;\n}"
    },
    {
        "task_id": 160,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(byte **param_1,long param_2,int param_3,int param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  int *piVar4;\n  int iVar5;\n  undefined4 *__ptr;\n  int *__ptr_00;\n  ulong uVar6;\n  long lVar7;\n  long lVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  int *piVar12;\n  int *piVar13;\n  byte **ppbVar14;\n  bool bVar15;\n  bool bVar16;\n  bool bVar17;\n  byte bVar18;\n  double dVar19;\n  \n  bVar18 = 0;\n  __ptr = (undefined4 *)malloc((long)param_4 << 2);\n  __ptr_00 = (int *)malloc((long)param_4 << 2);\n  if (0 < param_4) {\n    uVar6 = 0;\n    do {\n      __ptr[uVar6] = *(undefined4 *)(param_2 + uVar6 * 4);\n      __ptr_00[uVar6] = (int)uVar6;\n      bVar16 = uVar6 != param_4 - 1;\n      uVar6 = uVar6 + 1;\n    } while (bVar16);\n  }\n  bVar16 = false;\n  bVar17 = param_3 == 0;\n  if (0 < param_3) {\n    ppbVar14 = param_1;\n    piVar4 = __ptr_00;\n    do {\n      piVar13 = piVar4 + 1;\n      lVar7 = 3;\n      pbVar9 = *ppbVar14;\n      pbVar10 = &DAT_00102004;\n      do {\n        if (lVar7 == 0) break;\n        lVar7 = lVar7 + -1;\n        bVar16 = *pbVar9 < *pbVar10;\n        bVar17 = *pbVar9 == *pbVar10;\n        pbVar9 = pbVar9 + (ulong)bVar18 * -2 + 1;\n        pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n      } while (bVar17);\n      if ((!bVar16 && !bVar17) == bVar16) {\n        iVar5 = __ptr_00[*piVar4];\n        if (*piVar4 != __ptr_00[*piVar4]) {\n          do {\n            *piVar4 = iVar5;\n            bVar16 = __ptr_00[iVar5] != iVar5;\n            iVar5 = __ptr_00[iVar5];\n          } while (bVar16);\n        }\n        lVar7 = (long)*piVar13;\n        iVar5 = __ptr_00[lVar7];\n        if (*piVar13 != __ptr_00[lVar7]) {\n          do {\n            *piVar13 = iVar5;\n            lVar7 = (long)iVar5;\n            bVar16 = __ptr_00[lVar7] != iVar5;\n            iVar5 = __ptr_00[lVar7];\n          } while (bVar16);\n        }\n        iVar5 = *piVar4;\n        dVar19 = pow((double)__ptr[iVar5],(double)__ptr[lVar7]);\n        __ptr[iVar5] = (int)dVar19;\n        *piVar13 = iVar5;\n      }\n      ppbVar14 = ppbVar14 + 1;\n      bVar16 = ppbVar14 < param_1 + (ulong)(param_3 - 1) + 1;\n      bVar17 = ppbVar14 == param_1 + (ulong)(param_3 - 1) + 1;\n      piVar4 = piVar13;\n    } while (!bVar17);\n    piVar4 = __ptr_00 + (ulong)(param_3 - 1) + 1;\n    piVar13 = __ptr_00;\n    ppbVar14 = param_1;\n    do {\n      pbVar9 = *ppbVar14;\n      lVar7 = 2;\n      pbVar10 = pbVar9;\n      pbVar11 = &DAT_00102005;\n      do {\n        if (lVar7 == 0) break;\n        lVar7 = lVar7 + -1;\n        bVar16 = *pbVar10 < *pbVar11;\n        bVar17 = *pbVar10 == *pbVar11;\n        pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n        pbVar11 = pbVar11 + (ulong)bVar18 * -2 + 1;\n      } while (bVar17);\n      bVar15 = false;\n      bVar16 = (!bVar16 && !bVar17) == bVar16;\n      if (bVar16) {\nLAB_00101334:\n        iVar5 = __ptr_00[*piVar13];\n        if (*piVar13 != __ptr_00[*piVar13]) {\n          do {\n            *piVar13 = iVar5;\n            bVar16 = __ptr_00[iVar5] != iVar5;\n            iVar5 = __ptr_00[iVar5];\n          } while (bVar16);\n        }\n        uVar1 = piVar13[1];\n        lVar7 = (long)(int)uVar1;\n        uVar2 = __ptr_00[lVar7];\n        bVar16 = uVar1 < uVar2;\n        bVar17 = uVar1 == uVar2;\n        while (!bVar17) {\n          piVar13[1] = uVar2;\n          lVar7 = (long)(int)uVar2;\n          uVar1 = __ptr_00[lVar7];\n          bVar16 = uVar1 < uVar2;\n          bVar17 = uVar1 == uVar2;\n          uVar2 = uVar1;\n        }\n        lVar8 = 2;\n        pbVar10 = &DAT_00102005;\n        do {\n          if (lVar8 == 0) break;\n          lVar8 = lVar8 + -1;\n          bVar16 = *pbVar9 < *pbVar10;\n          bVar17 = *pbVar9 == *pbVar10;\n          pbVar9 = pbVar9 + (ulong)bVar18 * -2 + 1;\n          pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n        } while (bVar17);\n        if ((!bVar16 && !bVar17) == bVar16) {\n          __ptr[*piVar13] = __ptr[*piVar13] * __ptr[lVar7];\n        }\n        else {\n          __ptr[*piVar13] = (int)__ptr[*piVar13] / (int)__ptr[lVar7];\n        }\n        piVar13[1] = *piVar13;\n      }\n      else {\n        lVar7 = 3;\n        pbVar10 = pbVar9;\n        pbVar11 = &DAT_00102007;\n        do {\n          if (lVar7 == 0) break;\n          lVar7 = lVar7 + -1;\n          bVar15 = *pbVar10 < *pbVar11;\n          bVar16 = *pbVar10 == *pbVar11;\n          pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n          pbVar11 = pbVar11 + (ulong)bVar18 * -2 + 1;\n        } while (bVar16);\n        if ((!bVar15 && !bVar16) == bVar15) goto LAB_00101334;\n      }\n      ppbVar14 = ppbVar14 + 1;\n      piVar13 = piVar13 + 1;\n      bVar16 = piVar4 < piVar13;\n      bVar17 = piVar4 == piVar13;\n      piVar12 = __ptr_00;\n    } while (!bVar17);\n    do {\n      pbVar9 = *param_1;\n      lVar7 = 2;\n      pbVar10 = pbVar9;\n      pbVar11 = &DAT_0010200a;\n      do {\n        if (lVar7 == 0) break;\n        lVar7 = lVar7 + -1;\n        bVar16 = *pbVar10 < *pbVar11;\n        bVar17 = *pbVar10 == *pbVar11;\n        pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n        pbVar11 = pbVar11 + (ulong)bVar18 * -2 + 1;\n      } while (bVar17);\n      bVar15 = false;\n      bVar16 = (!bVar16 && !bVar17) == bVar16;\n      if (bVar16) {\nLAB_00101420:\n        iVar5 = __ptr_00[*piVar12];\n        if (*piVar12 != __ptr_00[*piVar12]) {\n          do {\n            *piVar12 = iVar5;\n            bVar16 = __ptr_00[iVar5] != iVar5;\n            iVar5 = __ptr_00[iVar5];\n          } while (bVar16);\n        }\n        uVar1 = piVar12[1];\n        lVar7 = (long)(int)uVar1;\n        uVar2 = __ptr_00[lVar7];\n        bVar16 = uVar1 < uVar2;\n        bVar17 = uVar1 == uVar2;\n        while (!bVar17) {\n          piVar12[1] = uVar2;\n          lVar7 = (long)(int)uVar2;\n          uVar1 = __ptr_00[lVar7];\n          bVar16 = uVar1 < uVar2;\n          bVar17 = uVar1 == uVar2;\n          uVar2 = uVar1;\n        }\n        lVar8 = 2;\n        pbVar10 = &DAT_0010200a;\n        do {\n          if (lVar8 == 0) break;\n          lVar8 = lVar8 + -1;\n          bVar16 = *pbVar9 < *pbVar10;\n          bVar17 = *pbVar9 == *pbVar10;\n          pbVar9 = pbVar9 + (ulong)bVar18 * -2 + 1;\n          pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n        } while (bVar17);\n        if ((!bVar16 && !bVar17) == bVar16) {\n          __ptr[*piVar12] = __ptr[*piVar12] + __ptr[lVar7];\n        }\n        else {\n          __ptr[*piVar12] = __ptr[*piVar12] - __ptr[lVar7];\n        }\n        piVar12[1] = *piVar12;\n      }\n      else {\n        lVar7 = 2;\n        pbVar10 = pbVar9;\n        pbVar11 = &DAT_0010200c;\n        do {\n          if (lVar7 == 0) break;\n          lVar7 = lVar7 + -1;\n          bVar15 = *pbVar10 < *pbVar11;\n          bVar16 = *pbVar10 == *pbVar11;\n          pbVar10 = pbVar10 + (ulong)bVar18 * -2 + 1;\n          pbVar11 = pbVar11 + (ulong)bVar18 * -2 + 1;\n        } while (bVar16);\n        if ((!bVar15 && !bVar16) == bVar15) goto LAB_00101420;\n      }\n      param_1 = param_1 + 1;\n      piVar12 = piVar12 + 1;\n      bVar16 = piVar4 < piVar12;\n      bVar17 = piVar4 == piVar12;\n    } while (!bVar17);\n  }\n  uVar3 = *__ptr;\n  free(__ptr);\n  free(__ptr_00);\n  return uVar3;\n}"
    },
    {
        "task_id": 160,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(byte **param_1,long param_2,int param_3,int param_4)\n\n{\n  ulong uVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  byte *pbVar4;\n  int iVar5;\n  undefined4 *__ptr;\n  int *__ptr_00;\n  ulong uVar6;\n  long lVar7;\n  int iVar8;\n  uint uVar9;\n  int *piVar10;\n  int *piVar11;\n  byte **ppbVar12;\n  bool bVar13;\n  double dVar14;\n  \n  __ptr = (undefined4 *)malloc((long)param_4 << 2);\n  __ptr_00 = (int *)malloc((long)param_4 << 2);\n  uVar6 = 0;\n  if (0 < param_4) {\n    do {\n      uVar3 = *(undefined4 *)(param_2 + uVar6 * 4);\n      __ptr_00[uVar6] = (int)uVar6;\n      __ptr[uVar6] = uVar3;\n      bVar13 = param_4 - 1 != uVar6;\n      uVar6 = uVar6 + 1;\n    } while (bVar13);\n  }\n  uVar6 = 0;\n  if (0 < param_3) {\n    do {\n      pbVar4 = param_1[uVar6];\n      if (((*pbVar4 == 0x2a) && (pbVar4[1] == 0x2a)) && (pbVar4[2] == 0)) {\n        iVar8 = __ptr_00[uVar6];\n        iVar5 = __ptr_00[iVar8];\n        if (iVar8 != __ptr_00[iVar8]) {\n          do {\n            iVar8 = iVar5;\n            __ptr_00[uVar6] = iVar8;\n            iVar5 = __ptr_00[iVar8];\n          } while (__ptr_00[iVar8] != iVar8);\n        }\n        lVar7 = (long)__ptr_00[uVar6 + 1];\n        iVar5 = __ptr_00[lVar7];\n        if (__ptr_00[uVar6 + 1] != iVar5) {\n          do {\n            lVar7 = (long)iVar5;\n            __ptr_00[uVar6 + 1] = iVar5;\n            bVar13 = __ptr_00[lVar7] != iVar5;\n            iVar5 = __ptr_00[lVar7];\n          } while (bVar13);\n        }\n        dVar14 = pow((double)__ptr[iVar8],(double)__ptr[lVar7]);\n        __ptr_00[uVar6 + 1] = iVar8;\n        __ptr[iVar8] = (int)dVar14;\n      }\n      uVar1 = uVar6 + 1;\n      bVar13 = param_3 - 1 != uVar6;\n      uVar6 = uVar1;\n    } while (bVar13);\n    piVar10 = __ptr_00;\n    ppbVar12 = param_1;\n    do {\n      pbVar4 = *ppbVar12;\n      bVar2 = *pbVar4;\n      if (((bVar2 == 0x2a) && (pbVar4[1] == 0)) ||\n         ((*pbVar4 == 0x2f && ((pbVar4[1] == 0x2f && (pbVar4[2] == 0)))))) {\n        iVar8 = *piVar10;\n        iVar5 = __ptr_00[iVar8];\n        if (iVar8 != __ptr_00[iVar8]) {\n          do {\n            iVar8 = iVar5;\n            *piVar10 = iVar8;\n            iVar5 = __ptr_00[iVar8];\n          } while (__ptr_00[iVar8] != iVar8);\n        }\n        lVar7 = (long)piVar10[1];\n        iVar5 = __ptr_00[lVar7];\n        if (__ptr_00[lVar7] != piVar10[1]) {\n          do {\n            lVar7 = (long)iVar5;\n            piVar10[1] = iVar5;\n            bVar13 = __ptr_00[lVar7] != iVar5;\n            iVar5 = __ptr_00[lVar7];\n          } while (bVar13);\n        }\n        uVar9 = bVar2 - 0x2a;\n        if (uVar9 == 0) {\n          uVar9 = (uint)pbVar4[1];\n        }\n        piVar11 = __ptr + iVar8;\n        if (uVar9 == 0) {\n          *piVar11 = *piVar11 * __ptr[lVar7];\n        }\n        else {\n          *piVar11 = *piVar11 / (int)__ptr[lVar7];\n        }\n        piVar10[1] = iVar8;\n      }\n      piVar10 = piVar10 + 1;\n      ppbVar12 = ppbVar12 + 1;\n      piVar11 = __ptr_00;\n    } while (__ptr_00 + uVar1 != piVar10);\n    do {\n      pbVar4 = *param_1;\n      bVar2 = *pbVar4;\n      if (((bVar2 == 0x2b) && (pbVar4[1] == 0)) || ((bVar2 == 0x2d && (pbVar4[1] == 0)))) {\n        iVar8 = *piVar11;\n        iVar5 = __ptr_00[iVar8];\n        if (__ptr_00[iVar8] != iVar8) {\n          do {\n            iVar8 = iVar5;\n            *piVar11 = iVar8;\n            iVar5 = __ptr_00[iVar8];\n          } while (__ptr_00[iVar8] != iVar8);\n        }\n        lVar7 = (long)piVar11[1];\n        iVar5 = __ptr_00[lVar7];\n        if (piVar11[1] != __ptr_00[lVar7]) {\n          do {\n            lVar7 = (long)iVar5;\n            piVar11[1] = iVar5;\n            bVar13 = __ptr_00[lVar7] != iVar5;\n            iVar5 = __ptr_00[lVar7];\n          } while (bVar13);\n        }\n        iVar5 = __ptr[lVar7];\n        piVar11[1] = iVar8;\n        if (bVar2 != 0x2b) {\n          iVar5 = -iVar5;\n        }\n        __ptr[iVar8] = __ptr[iVar8] + iVar5;\n      }\n      piVar11 = piVar11 + 1;\n      param_1 = param_1 + 1;\n    } while (__ptr_00 + uVar1 != piVar11);\n  }\n  uVar3 = *__ptr;\n  free(__ptr);\n  free(__ptr_00);\n  return uVar3;\n}"
    },
    {
        "task_id": 160,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
        "c_test": "#include <assert.h>\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}",
        "input_asm_prompt": "undefined4 func0(byte **param_1,void *param_2,int param_3,uint param_4)\n\n{\n  byte bVar1;\n  int iVar2;\n  undefined4 uVar3;\n  byte *pbVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  int iVar8;\n  undefined4 *__dest;\n  undefined (*__ptr) [16];\n  undefined (*pauVar9) [16];\n  long lVar10;\n  long lVar11;\n  undefined (*pauVar12) [16];\n  ulong uVar13;\n  ulong uVar14;\n  undefined (*pauVar15) [16];\n  byte **ppbVar16;\n  int *piVar17;\n  bool bVar18;\n  double dVar19;\n  undefined auVar20 [16];\n  undefined auVar21 [16];\n  \n  uVar14 = (ulong)(int)param_4;\n  __dest = (undefined4 *)malloc(uVar14 << 2);\n  __ptr = (undefined (*) [16])malloc(uVar14 << 2);\n  if (0 < (int)param_4) {\n    memcpy(__dest,param_2,(ulong)(param_4 - 1) * 4 + 4);\n    iVar5 = _UNK_001020cc;\n    iVar8 = _UNK_001020c8;\n    iVar7 = _UNK_001020c4;\n    iVar2 = _DAT_001020c0;\n    if (param_4 - 1 < 3) {\n      uVar6 = 0;\n    }\n    else {\n      pauVar9 = __ptr;\n      auVar20 = _DAT_001020b0;\n      do {\n        pauVar12 = pauVar9 + 1;\n        auVar21._0_4_ = auVar20._0_4_ + iVar2;\n        auVar21._4_4_ = auVar20._4_4_ + iVar7;\n        auVar21._8_4_ = auVar20._8_4_ + iVar8;\n        auVar21._12_4_ = auVar20._12_4_ + iVar5;\n        *pauVar9 = auVar20;\n        pauVar9 = pauVar12;\n        auVar20 = auVar21;\n      } while (__ptr + (uVar14 >> 2 & 0x3fffffff) != pauVar12);\n      uVar6 = param_4 & 0xfffffffc;\n      if ((uVar14 & 3) == 0) goto LAB_00101442;\n    }\n    *(uint *)((long)*__ptr + (long)(int)uVar6 * 4) = uVar6;\n    iVar2 = uVar6 + 1;\n    if (iVar2 < (int)param_4) {\n      iVar7 = uVar6 + 2;\n      *(int *)((long)*__ptr + (long)iVar2 * 4) = iVar2;\n      if (iVar7 < (int)param_4) {\n        *(int *)((long)*__ptr + (long)iVar7 * 4) = iVar7;\n      }\n    }\n  }\nLAB_00101442:\n  uVar14 = 0;\n  if (0 < param_3) {\n    do {\n      uVar13 = uVar14;\n      pbVar4 = param_1[uVar13];\n      if (((*pbVar4 == 0x2a) && (pbVar4[1] == 0x2a)) && (pbVar4[2] == 0)) {\n        iVar7 = *(int *)((long)*__ptr + uVar13 * 4);\n        lVar10 = (long)iVar7;\n        iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n        if (iVar7 != iVar2) {\n          do {\n            iVar7 = iVar2;\n            lVar10 = (long)iVar7;\n            *(int *)((long)*__ptr + uVar13 * 4) = iVar7;\n            iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n          } while (iVar2 != iVar7);\n        }\n        lVar10 = lVar10 * 4;\n        iVar2 = *(int *)((long)*__ptr + uVar13 * 4 + 4);\n        lVar11 = (long)iVar2;\n        iVar8 = *(int *)((long)*__ptr + lVar11 * 4);\n        if (iVar2 != iVar8) {\n          do {\n            lVar11 = (long)iVar8;\n            *(int *)((long)*__ptr + uVar13 * 4 + 4) = iVar8;\n            iVar2 = *(int *)((long)*__ptr + lVar11 * 4);\n            bVar18 = iVar2 != iVar8;\n            iVar8 = iVar2;\n          } while (bVar18);\n          iVar7 = *(int *)((long)*__ptr + uVar13 * 4);\n          lVar10 = (long)iVar7 << 2;\n        }\n        dVar19 = pow((double)*(int *)((long)__dest + lVar10),(double)__dest[lVar11]);\n        *(int *)((long)*__ptr + uVar13 * 4 + 4) = iVar7;\n        *(int *)((long)__dest + lVar10) = (int)dVar19;\n      }\n      uVar14 = uVar13 + 1;\n    } while (param_3 - 1 != uVar13);\n    pauVar9 = (undefined (*) [16])((long)*__ptr + uVar13 * 4 + 4);\n    pauVar12 = __ptr;\n    ppbVar16 = param_1;\n    do {\n      pbVar4 = *ppbVar16;\n      bVar1 = *pbVar4;\n      if (((bVar1 == 0x2a) && (pbVar4[1] == 0)) ||\n         ((*pbVar4 == 0x2f && ((pbVar4[1] == 0x2f && (pbVar4[2] == 0)))))) {\n        iVar7 = *(int *)*pauVar12;\n        lVar10 = (long)iVar7;\n        iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n        if (iVar7 != iVar2) {\n          do {\n            iVar7 = iVar2;\n            lVar10 = (long)iVar7;\n            *(int *)*pauVar12 = iVar7;\n            iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n          } while (iVar2 != iVar7);\n        }\n        lVar10 = lVar10 * 4;\n        iVar2 = *(int *)((long)*pauVar12 + 4);\n        lVar11 = (long)iVar2;\n        iVar8 = *(int *)((long)*__ptr + lVar11 * 4);\n        if (iVar8 != iVar2) {\n          do {\n            lVar11 = (long)iVar8;\n            *(int *)((long)*pauVar12 + 4) = iVar8;\n            iVar2 = *(int *)((long)*__ptr + lVar11 * 4);\n            bVar18 = iVar2 != iVar8;\n            iVar8 = iVar2;\n          } while (bVar18);\n          iVar7 = *(int *)*pauVar12;\n          lVar10 = (long)iVar7 << 2;\n        }\n        uVar6 = bVar1 - 0x2a;\n        if (uVar6 == 0) {\n          uVar6 = (uint)pbVar4[1];\n        }\n        piVar17 = (int *)(lVar10 + (long)__dest);\n        if (uVar6 == 0) {\n          *piVar17 = *piVar17 * __dest[lVar11];\n        }\n        else {\n          *piVar17 = *piVar17 / (int)__dest[lVar11];\n        }\n        *(int *)((long)*pauVar12 + 4) = iVar7;\n      }\n      pauVar12 = (undefined (*) [16])((long)*pauVar12 + 4);\n      ppbVar16 = ppbVar16 + 1;\n      pauVar15 = __ptr;\n    } while (pauVar9 != pauVar12);\n    do {\n      pbVar4 = *param_1;\n      bVar1 = *pbVar4;\n      if (((bVar1 == 0x2b) && (pbVar4[1] == 0)) || ((bVar1 == 0x2d && (pbVar4[1] == 0)))) {\n        iVar7 = *(int *)*pauVar15;\n        lVar10 = (long)iVar7;\n        iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n        if (iVar2 != iVar7) {\n          do {\n            iVar7 = iVar2;\n            lVar10 = (long)iVar7;\n            *(int *)*pauVar15 = iVar7;\n            iVar2 = *(int *)((long)*__ptr + lVar10 * 4);\n          } while (iVar2 != iVar7);\n        }\n        lVar10 = lVar10 * 4;\n        iVar2 = *(int *)((long)*pauVar15 + 4);\n        lVar11 = (long)iVar2;\n        iVar8 = *(int *)((long)*__ptr + lVar11 * 4);\n        if (iVar2 != iVar8) {\n          do {\n            lVar11 = (long)iVar8;\n            *(int *)((long)*pauVar15 + 4) = iVar8;\n            iVar2 = *(int *)((long)*__ptr + lVar11 * 4);\n            bVar18 = iVar2 != iVar8;\n            iVar8 = iVar2;\n          } while (bVar18);\n          iVar7 = *(int *)*pauVar15;\n          lVar10 = (long)iVar7 << 2;\n        }\n        iVar2 = __dest[lVar11];\n        *(int *)((long)*pauVar15 + 4) = iVar7;\n        if (bVar1 != 0x2b) {\n          iVar2 = -iVar2;\n        }\n        *(int *)(lVar10 + (long)__dest) = *(int *)(lVar10 + (long)__dest) + iVar2;\n      }\n      pauVar15 = (undefined (*) [16])((long)*pauVar15 + 4);\n      param_1 = param_1 + 1;\n    } while (pauVar9 != pauVar15);\n  }\n  uVar3 = *__dest;\n  free(__dest);\n  free(__ptr);\n  return uVar3;\n}"
    },
    {
        "task_id": 161,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  size_t sVar4;\n  ushort **ppuVar5;\n  int local_18;\n  int local_14;\n  int local_10;\n  \n  local_18 = 0;\n  sVar4 = strlen(param_1);\n  iVar2 = (int)sVar4;\n  for (local_14 = 0; local_14 < iVar2; local_14 = local_14 + 1) {\n    ppuVar5 = __ctype_b_loc();\n    if (((*ppuVar5)[(byte)param_1[local_14]] & 0x400) == 0) {\n      local_18 = local_18 + 1;\n    }\n    else {\n      ppuVar5 = __ctype_b_loc();\n      if (((*ppuVar5)[(byte)param_1[local_14]] & 0x100) == 0) {\n        ppuVar5 = __ctype_b_loc();\n        if (((*ppuVar5)[(byte)param_1[local_14]] & 0x200) != 0) {\n          iVar3 = toupper((uint)(byte)param_1[local_14]);\n          param_1[local_14] = (char)iVar3;\n        }\n      }\n      else {\n        iVar3 = tolower((uint)(byte)param_1[local_14]);\n        param_1[local_14] = (char)iVar3;\n      }\n    }\n  }\n  if (local_18 == iVar2) {\n    for (local_10 = 0; local_10 < iVar2 / 2; local_10 = local_10 + 1) {\n      cVar1 = param_1[local_10];\n      param_1[local_10] = param_1[(long)(iVar2 - local_10) + -1];\n      param_1[(long)(iVar2 - local_10) + -1] = cVar1;\n    }\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 161,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "byte * func0(byte *param_1)\n\n{\n  byte bVar1;\n  ushort uVar2;\n  ushort **ppuVar3;\n  __int32_t **pp_Var4;\n  long lVar5;\n  ulong uVar6;\n  byte *pbVar7;\n  int iVar8;\n  int iVar9;\n  \n  uVar6 = 0xffffffffffffffff;\n  pbVar7 = param_1;\n  do {\n    if (uVar6 == 0) break;\n    uVar6 = uVar6 - 1;\n    bVar1 = *pbVar7;\n    pbVar7 = pbVar7 + 1;\n  } while (bVar1 != 0);\n  iVar8 = (int)(~uVar6 - 1);\n  if (iVar8 < 1) {\n    iVar9 = 0;\n  }\n  else {\n    ppuVar3 = __ctype_b_loc();\n    iVar9 = 0;\n    pbVar7 = param_1;\n    do {\n      bVar1 = *pbVar7;\n      uVar2 = (*ppuVar3)[bVar1];\n      if ((uVar2 & 0x400) == 0) {\n        iVar9 = iVar9 + 1;\n      }\n      else if ((uVar2 & 0x100) == 0) {\n        if ((uVar2 & 0x200) != 0) {\n          pp_Var4 = __ctype_toupper_loc();\n          *pbVar7 = (byte)(*pp_Var4)[bVar1];\n        }\n      }\n      else {\n        pp_Var4 = __ctype_tolower_loc();\n        *pbVar7 = (byte)(*pp_Var4)[bVar1];\n      }\n      pbVar7 = pbVar7 + 1;\n    } while (pbVar7 != param_1 + (ulong)(iVar8 - 1) + 1);\n  }\n  if ((iVar8 == iVar9) && (1 < iVar8)) {\n    pbVar7 = param_1 + (long)iVar8 + -1;\n    lVar5 = 0;\n    do {\n      bVar1 = param_1[lVar5];\n      param_1[lVar5] = *pbVar7;\n      *pbVar7 = bVar1;\n      lVar5 = lVar5 + 1;\n      pbVar7 = pbVar7 + -1;\n    } while ((int)lVar5 < (int)(((uint)(~uVar6 - 1 >> 0x1f) & 1) + iVar8) >> 1);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 161,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "byte * func0(byte *param_1)\n\n{\n  byte bVar1;\n  ushort uVar2;\n  int iVar3;\n  size_t sVar4;\n  ushort **ppuVar5;\n  __int32_t **pp_Var6;\n  byte *pbVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  int iVar10;\n  \n  sVar4 = strlen((char *)param_1);\n  iVar3 = (int)sVar4;\n  if (iVar3 < 1) {\n    iVar10 = 0;\n  }\n  else {\n    ppuVar5 = __ctype_b_loc();\n    iVar10 = 0;\n    pbVar9 = param_1;\n    do {\n      while( true ) {\n        bVar1 = *pbVar9;\n        uVar2 = (*ppuVar5)[bVar1];\n        if ((uVar2 & 0x400) != 0) break;\n        pbVar9 = pbVar9 + 1;\n        iVar10 = iVar10 + 1;\n        if (pbVar9 == param_1 + (ulong)(iVar3 - 1) + 1) goto LAB_0010154f;\n      }\n      if ((uVar2 & 0x100) == 0) {\n        if ((uVar2 & 0x200) != 0) {\n          pp_Var6 = __ctype_toupper_loc();\n          *pbVar9 = (byte)(*pp_Var6)[bVar1];\n        }\n      }\n      else {\n        pp_Var6 = __ctype_tolower_loc();\n        *pbVar9 = (byte)(*pp_Var6)[bVar1];\n      }\n      pbVar9 = pbVar9 + 1;\n    } while (pbVar9 != param_1 + (ulong)(iVar3 - 1) + 1);\n  }\nLAB_0010154f:\n  if ((iVar3 == iVar10) && (iVar3 >> 1 != 0)) {\n    pbVar9 = param_1 + (long)iVar3 + -1;\n    pbVar8 = param_1;\n    do {\n      bVar1 = *pbVar8;\n      pbVar7 = pbVar9 + -1;\n      *pbVar8 = *pbVar9;\n      *pbVar9 = bVar1;\n      pbVar9 = pbVar7;\n      pbVar8 = pbVar8 + 1;\n    } while (param_1 + (((long)iVar3 + -2) - (ulong)((iVar3 >> 1) - 1)) != pbVar7);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 161,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
        "c_test": "#include <assert.h>\n#include <string.h>\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}",
        "input_asm_prompt": "byte * func0(byte *param_1)\n\n{\n  byte bVar1;\n  ushort uVar2;\n  int iVar3;\n  size_t sVar4;\n  ushort **ppuVar5;\n  __int32_t **pp_Var6;\n  byte *pbVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  int iVar10;\n  \n  sVar4 = strlen((char *)param_1);\n  iVar3 = (int)sVar4;\n  if (iVar3 < 1) {\n    iVar10 = 0;\n  }\n  else {\n    ppuVar5 = __ctype_b_loc();\n    iVar10 = 0;\n    pbVar9 = param_1;\n    do {\n      while( true ) {\n        bVar1 = *pbVar9;\n        uVar2 = (*ppuVar5)[bVar1];\n        if ((uVar2 & 0x400) != 0) break;\n        pbVar9 = pbVar9 + 1;\n        iVar10 = iVar10 + 1;\n        if (param_1 + (ulong)(iVar3 - 1) + 1 == pbVar9) goto LAB_0010154f;\n      }\n      if ((uVar2 & 0x100) == 0) {\n        if ((uVar2 & 0x200) != 0) {\n          pp_Var6 = __ctype_toupper_loc();\n          *pbVar9 = (byte)(*pp_Var6)[bVar1];\n        }\n      }\n      else {\n        pp_Var6 = __ctype_tolower_loc();\n        *pbVar9 = (byte)(*pp_Var6)[bVar1];\n      }\n      pbVar9 = pbVar9 + 1;\n    } while (param_1 + (ulong)(iVar3 - 1) + 1 != pbVar9);\n  }\nLAB_0010154f:\n  if ((iVar3 == iVar10) && (iVar3 >> 1 != 0)) {\n    pbVar9 = param_1 + (long)iVar3 + -1;\n    pbVar8 = param_1;\n    do {\n      bVar1 = *pbVar8;\n      pbVar7 = pbVar9 + -1;\n      *pbVar8 = *pbVar9;\n      *pbVar9 = bVar1;\n      pbVar9 = pbVar7;\n      pbVar8 = pbVar8 + 1;\n    } while (param_1 + (((long)iVar3 + -2) - (ulong)((iVar3 >> 1) - 1)) != pbVar7);\n  }\n  return param_1;\n}"
    },
    {
        "task_id": 162,
        "type": "O0",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}",
        "input_asm_prompt": "char * func0(char *param_1)\n\n{\n  char *__s;\n  uint local_1c;\n  uint local_18;\n  uint local_14;\n  \n  if (*param_1 == '\\0') {\n    __s = strdup(\"None\");\n  }\n  else {\n    local_1c = 0xffffffff;\n    for (local_18 = 0; param_1[local_18] != '\\0'; local_18 = local_18 + 1) {\n      local_1c = local_1c ^ (byte)param_1[local_18];\n      for (local_14 = 0; local_14 < 8; local_14 = local_14 + 1) {\n        if ((local_1c & 1) == 0) {\n          local_1c = local_1c >> 1;\n        }\n        else {\n          local_1c = local_1c >> 1 ^ 0xedb88320;\n        }\n      }\n    }\n    __s = (char *)malloc(9);\n    if (__s != (char *)0x0) {\n      sprintf(__s,\"%08X\",(ulong)~local_1c);\n    }\n  }\n  return __s;\n}"
    },
    {
        "task_id": 162,
        "type": "O1",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}",
        "input_asm_prompt": "char * func0(byte *param_1)\n\n{\n  uint uVar1;\n  byte bVar2;\n  char *pcVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint uVar7;\n  \n  bVar2 = *param_1;\n  uVar6 = 0;\n  uVar7 = 0xffffffff;\n  if (bVar2 == 0) {\n    pcVar3 = strdup(\"None\");\n  }\n  else {\n    do {\n      uVar7 = uVar7 ^ bVar2;\n      iVar5 = 8;\n      do {\n        uVar4 = uVar7 >> 1;\n        uVar1 = uVar7 & 1;\n        uVar7 = uVar7 >> 1 ^ 0xedb88320;\n        if (uVar1 == 0) {\n          uVar7 = uVar4;\n        }\n        iVar5 = iVar5 + -1;\n      } while (iVar5 != 0);\n      uVar6 = uVar6 + 1;\n      bVar2 = param_1[uVar6];\n    } while (bVar2 != 0);\n    pcVar3 = (char *)malloc(9);\n    if (pcVar3 != (char *)0x0) {\n      __sprintf_chk(pcVar3,1,9,&DAT_00102009,~uVar7);\n    }\n  }\n  return pcVar3;\n}"
    },
    {
        "task_id": 162,
        "type": "O2",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}",
        "input_asm_prompt": "char * func0(byte *param_1)\n\n{\n  byte bVar1;\n  int iVar2;\n  ulong uVar3;\n  char *pcVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  \n  bVar1 = *param_1;\n  if (bVar1 != 0) {\n    uVar3 = 0;\n    uVar6 = 0xffffffff;\n    do {\n      uVar6 = uVar6 ^ bVar1;\n      iVar2 = 8;\n      do {\n        uVar7 = uVar6 >> 1;\n        uVar5 = uVar6 & 1;\n        uVar6 = uVar7;\n        if (uVar5 != 0) {\n          uVar6 = uVar7 ^ 0xedb88320;\n        }\n        iVar2 = iVar2 + -1;\n      } while (iVar2 != 0);\n      uVar3 = (ulong)((int)uVar3 + 1);\n      bVar1 = param_1[uVar3];\n    } while (bVar1 != 0);\n    pcVar4 = (char *)malloc(9);\n    if (pcVar4 != (char *)0x0) {\n      __sprintf_chk(pcVar4,1,9,&DAT_00102009,~uVar6);\n    }\n    return pcVar4;\n  }\n  pcVar4 = strdup(\"None\");\n  return pcVar4;\n}"
    },
    {
        "task_id": 162,
        "type": "O3",
        "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}",
        "input_asm_prompt": "char * func0(byte *param_1)\n\n{\n  byte bVar1;\n  ulong uVar2;\n  char *pcVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  bVar1 = *param_1;\n  if (bVar1 != 0) {\n    uVar2 = 0;\n    uVar5 = 0xffffffff;\n    do {\n      uVar4 = (bVar1 ^ uVar5) >> 1;\n      if (((bVar1 ^ uVar5) & 1) != 0) {\n        uVar4 = uVar4 ^ 0xedb88320;\n      }\n      uVar5 = uVar4 >> 1;\n      if ((uVar4 & 1) != 0) {\n        uVar5 = uVar4 >> 1 ^ 0xedb88320;\n      }\n      uVar4 = uVar5 >> 1;\n      if ((uVar5 & 1) != 0) {\n        uVar4 = uVar5 >> 1 ^ 0xedb88320;\n      }\n      uVar5 = uVar4 >> 1;\n      if ((uVar4 & 1) != 0) {\n        uVar5 = uVar4 >> 1 ^ 0xedb88320;\n      }\n      uVar4 = uVar5 >> 1;\n      if ((uVar5 & 1) != 0) {\n        uVar4 = uVar5 >> 1 ^ 0xedb88320;\n      }\n      uVar5 = uVar4 >> 1;\n      if ((uVar4 & 1) != 0) {\n        uVar5 = uVar4 >> 1 ^ 0xedb88320;\n      }\n      uVar4 = uVar5 >> 1;\n      if ((uVar5 & 1) != 0) {\n        uVar4 = uVar5 >> 1 ^ 0xedb88320;\n      }\n      uVar5 = uVar4 >> 1;\n      if ((uVar4 & 1) != 0) {\n        uVar5 = uVar4 >> 1 ^ 0xedb88320;\n      }\n      uVar2 = (ulong)((int)uVar2 + 1);\n      bVar1 = param_1[uVar2];\n    } while (bVar1 != 0);\n    pcVar3 = (char *)malloc(9);\n    if (pcVar3 != (char *)0x0) {\n      __sprintf_chk(pcVar3,1,9,&DAT_00102009,~uVar5);\n    }\n    return pcVar3;\n  }\n  pcVar3 = strdup(\"None\");\n  return pcVar3;\n}"
    },
    {
        "task_id": 163,
        "type": "O0",
        "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,uint param_2,long param_3,int *param_4)\n\n{\n  int iVar1;\n  uint local_20;\n  uint local_1c;\n  uint local_10;\n  \n  *param_4 = 0;\n  local_20 = param_2;\n  local_1c = param_1;\n  if ((int)param_2 < (int)param_1) {\n    local_20 = param_1;\n    local_1c = param_2;\n  }\n  for (local_10 = local_1c; (int)local_10 <= (int)local_20; local_10 = local_10 + 1) {\n    if (((int)local_10 < 10) && ((local_10 & 1) == 0)) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)((long)iVar1 * 4 + param_3) = local_10;\n    }\n  }\n  return;\n}"
    },
    {
        "task_id": 163,
        "type": "O1",
        "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,uint param_2,long param_3,int *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if ((int)param_2 < (int)param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  do {\n    if (((int)param_1 < 10) && ((param_1 & 1) == 0)) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)(param_3 + (long)iVar1 * 4) = param_1;\n    }\n    param_1 = param_1 + 1;\n  } while ((int)param_1 <= (int)uVar2);\n  return;\n}"
    },
    {
        "task_id": 163,
        "type": "O2",
        "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,uint param_2,long param_3,int *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if ((int)param_2 < (int)param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  do {\n    if (((int)param_1 < 10) && ((param_1 & 1) == 0)) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)(param_3 + (long)iVar1 * 4) = param_1;\n    }\n    param_1 = param_1 + 1;\n  } while ((int)param_1 <= (int)uVar2);\n  return;\n}"
    },
    {
        "task_id": 163,
        "type": "O3",
        "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
        "c_test": "#include <stdio.h>\n#include <assert.h>\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}",
        "input_asm_prompt": "void func0(uint param_1,uint param_2,long param_3,int *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if ((int)param_2 < (int)param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  if ((int)param_1 < 10) {\n    if (9 < (int)uVar2) {\n      uVar2 = 9;\n    }\n    do {\n      if ((param_1 & 1) == 0) {\n        iVar1 = *param_4;\n        *param_4 = iVar1 + 1;\n        *(uint *)(param_3 + (long)iVar1 * 4) = param_1;\n      }\n      param_1 = param_1 + 1;\n    } while ((int)param_1 <= (int)uVar2);\n    return;\n  }\n  return;\n}"
    }
]